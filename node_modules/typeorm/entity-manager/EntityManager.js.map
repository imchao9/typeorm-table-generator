{"version":3,"sources":["../../src/entity-manager/EntityManager.ts"],"names":[],"mappings":"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","file":"EntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {FindOptions} from \"../find-options/FindOptions\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {BaseEntityManager} from \"./BaseEntityManager\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager extends BaseEntityManager {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\n        super(connection, queryRunnerProvider);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: Function, entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: string, entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: Function, entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: string, entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     */\n    persist<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[]): Promise<Entity|Entity[]> {\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        return Promise.resolve().then(() => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n            if (typeof target === \"string\") {\n                return this.getRepository<Entity|Entity[]>(target).persist(entity);\n            } else {\n                if (target instanceof Array) {\n                    if (target.length === 0)\n                        return Promise.resolve(target);\n\n                    return Promise.all(target.map((t, i) => {\n                        return this.getRepository<Entity>(t.constructor).persist((entity as Entity[])[i]);\n                    }));\n                } else {\n                    return this.getRepository<Entity>(target.constructor).persist(entity as Entity);\n                }\n            }\n        });\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: Function, entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: string, entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[]): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: Function, entity: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: string, entity: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[]): Promise<Entity|Entity[]> {\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        if (typeof target === \"string\") {\n            return this.getRepository<Entity|Entity[]>(target).remove(entity);\n        } else {\n            if (target instanceof Array) {\n                return Promise.all(target.map((t, i) => {\n                    return this.getRepository<Entity>(t.constructor).remove((entity as Entity[])[i]);\n                }));\n            } else {\n                return this.getRepository<Entity>(target.constructor).remove(entity as Entity);\n            }\n        }\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral | FindOptions, options?: FindOptions): Promise<number> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).count(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).count(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).count();\n        }\n    }\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity[]> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).find(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).find(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).find();\n        }\n    }\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<[Entity[], number]> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).findAndCount(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).findAndCount(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).findAndCount();\n        }\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity|undefined> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).findOne(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).findOne(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).findOne();\n        }\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], options?: FindOptions): Promise<Entity[]> {\n        return this.getRepository(entityClass).findByIds(ids, options);\n    }\n\n    /**\n     * Finds entity with given id.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, options?: FindOptions): Promise<Entity|undefined> {\n        return this.getRepository(entityClass).findOneById(id, options);\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n\n        try {\n            return await queryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n        }\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        const queryRunner = await queryRunnerProvider.provide();\n        const transactionEntityManager = new EntityManager(this.connection, queryRunnerProvider);\n\n        try {\n            await queryRunner.beginTransaction();\n            const result = await runInTransaction(transactionEntityManager);\n            await queryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw err;\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     */\n    clear<Entity>(entityClass: ObjectType<Entity>): Promise<void> {\n        return this.getRepository(entityClass).clear();\n    }\n\n}"],"sourceRoot":".."}