{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*!\n */\nimport {DriverOptions} from \"./driver/DriverOptions\";\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\nimport {Connection} from \"./connection/Connection\";\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nimport {getFromContainer} from \"./container\";\nimport {ObjectType} from \"./common/ObjectType\";\nimport {Repository} from \"./repository/Repository\";\nimport {EntityManager} from \"./entity-manager/EntityManager\";\nimport {PlatformTools} from \"./platform/PlatformTools\";\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/DiscriminatorColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/options/ColumnOptions\";\nexport * from \"./decorator/options/IndexOptions\";\nexport * from \"./decorator/options/JoinColumnOptions\";\nexport * from \"./decorator/options/JoinTableOptions\";\nexport * from \"./decorator/options/RelationOptions\";\nexport * from \"./decorator/options/EntityOptions\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/AbstractEntity\";\nexport * from \"./decorator/entity/ClassEntityChild\";\nexport * from \"./decorator/entity/ClosureEntity\";\nexport * from \"./decorator/entity/EmbeddableEntity\";\nexport * from \"./decorator/entity/SingleEntityChild\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionEntityManager\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/NamingStrategy\";\nexport * from \"./decorator/Embedded\";\nexport * from \"./decorator/DiscriminatorValue\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./schema-builder/schema/ColumnSchema\";\nexport * from \"./schema-builder/schema/ForeignKeySchema\";\nexport * from \"./schema-builder/schema/IndexSchema\";\nexport * from \"./schema-builder/schema/PrimaryKeySchema\";\nexport * from \"./schema-builder/schema/TableSchema\";\n\nexport {Connection} from \"./connection/Connection\";\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nexport {DriverOptions} from \"./driver/DriverOptions\";\nexport {Driver} from \"./driver/Driver\";\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\nexport {EntityManager} from \"./entity-manager/EntityManager\";\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\nexport {Repository} from \"./repository/Repository\";\nexport {TreeRepository} from \"./repository/TreeRepository\";\nexport {SpecificRepository} from \"./repository/SpecificRepository\";\nexport {FindOptions} from \"./find-options/FindOptions\";\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\nexport {ObjectLiteral} from \"./common/ObjectLiteral\";\nexport {ObjectType} from \"./common/ObjectType\";\n\n// -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n\nexport * from \"./decorator/tables/Table\";\nexport * from \"./decorator/tables/AbstractTable\";\nexport * from \"./decorator/tables/ClassTableChild\";\nexport * from \"./decorator/tables/ClosureTable\";\nexport * from \"./decorator/tables/EmbeddableTable\";\nexport * from \"./decorator/tables/SingleTableChild\";\nexport * from \"./decorator/tables/Table\";\n\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n\n    return globalScope.typeormMetadataArgsStorage;\n}\n\n/**\n * Gets a ConnectionManager which creates connections.\n */\nexport function getConnectionManager(): ConnectionManager {\n    return getFromContainer(ConnectionManager);\n}\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically.\n *\n * First, it will try to find a \"default\" configuration from ormconfig.json.\n * You can also specify a connection name to use from ormconfig.json,\n * and you even can specify a path to your custom ormconfig.json.\n *\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\n * it will try to create connection from environment variables.\n * There are several environment variables you can set:\n *\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n * - TYPEORM_URL - database connection url. Should be a string.\n * - TYPEORM_HOST - database host. Should be a string.\n * - TYPEORM_PORT - database access port. Should be a number.\n * - TYPEORM_USERNAME - database username. Should be a string.\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n *\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n */\nexport function createConnection(): Promise<Connection>;\n\n/**\n * Creates connection from the given connection options and registers it in the manager.\n */\nexport function createConnection(options?: ConnectionOptions): Promise<Connection>;\n\n/**\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\n * Optionally you can specify a path to custom ormconfig.json file.\n */\nexport function createConnection(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\n\n/**\n * Creates connection and and registers it in the manager.\n */\nexport function createConnection(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\n    return getConnectionManager().createAndConnect(optionsOrConnectionNameFromConfig as any, ormConfigPath);\n}\n\n/**\n * Creates new connections and registers them in the manager.\n *\n * If array of connection options were not specified, then it will try to create them automatically\n * from ormconfig.json. You can also specify path to your custom ormconfig.json.\n *\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\n * it will try to create connection from environment variables.\n * There are several environment variables you can set:\n *\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n * - TYPEORM_URL - database connection url. Should be a string.\n * - TYPEORM_HOST - database host. Should be a string.\n * - TYPEORM_PORT - database access port. Should be a number.\n * - TYPEORM_USERNAME - database username. Should be a string.\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n *\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n */\nexport function createConnections(): Promise<Connection[]>;\n\n/**\n * Creates connections from the given connection options and registers them in the manager.\n */\nexport function createConnections(options?: ConnectionOptions[]): Promise<Connection[]>;\n\n/**\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\n * Optionally you can specify a path to custom ormconfig.json file.\n */\nexport function createConnections(ormConfigPath?: string): Promise<Connection[]>;\n\n/**\n * Creates connections and and registers them in the manager.\n */\nexport function createConnections(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\n    return getConnectionManager().createAndConnectToAll(optionsOrOrmConfigFilePath as any);\n}\n\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getConnection(connectionName: string = \"default\"): Connection {\n    return getConnectionManager().get(connectionName);\n}\n\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getEntityManager(connectionName: string = \"default\"): EntityManager {\n    return getConnectionManager().get(connectionName).entityManager;\n}\n\n/**\n * Gets repository for the given entity class.\n */\nexport function getRepository<Entity>(entityClass: ObjectType<Entity>, connectionName: string): Repository<Entity>;\n\n/**\n * Gets repository for the given entity name.\n */\nexport function getRepository<Entity>(entityName: string, connectionName: string): Repository<Entity>;\n\n/**\n * Gets repository for the given entity class or name.\n */\nexport function getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): Repository<Entity> {\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClassOrName as any);\n}\n"],"sourceRoot":"."}