{"version":3,"sources":["../../src/metadata-args/MetadataArgsStorage.ts"],"names":[],"mappings":"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","file":"MetadataArgsStorage.js","sourcesContent":["import {TargetMetadataArgsCollection} from \"./collection/TargetMetadataArgsCollection\";\nimport {PropertyMetadataArgsCollection} from \"./collection/PropertyMetadataArgsCollection\";\nimport {RelationMetadataArgs} from \"./RelationMetadataArgs\";\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\n\n/**\n * Storage all metadatas of all available types: tables, fields, subscribers, relations, etc.\n * Each metadata represents some specifications of what it represents.\n */\nexport class MetadataArgsStorage {\n\n    // todo: type in function validation, inverse side function validation\n    // todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n    // todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n    // todo: check for duplicate targets too since this check has been removed too\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables = new TargetMetadataArgsCollection<TableMetadataArgs>();\n    readonly entityRepositories = new TargetMetadataArgsCollection<EntityRepositoryMetadataArgs>();\n    readonly transactionEntityManagers = new TargetMetadataArgsCollection<TransactionEntityMetadataArgs>();\n    readonly namingStrategies = new TargetMetadataArgsCollection<NamingStrategyMetadataArgs>();\n    readonly entitySubscribers = new TargetMetadataArgsCollection<EntitySubscriberMetadataArgs>();\n    readonly indices = new PropertyMetadataArgsCollection<IndexMetadataArgs>();\n    readonly columns = new PropertyMetadataArgsCollection<ColumnMetadataArgs>();\n    readonly relations = new PropertyMetadataArgsCollection<RelationMetadataArgs>();\n    readonly joinColumns = new PropertyMetadataArgsCollection<JoinColumnMetadataArgs>();\n    readonly joinTables = new PropertyMetadataArgsCollection<JoinTableMetadataArgs>();\n    readonly entityListeners = new PropertyMetadataArgsCollection<EntityListenerMetadataArgs>();\n    readonly relationCounts = new PropertyMetadataArgsCollection<RelationCountMetadataArgs>();\n    readonly relationIds = new PropertyMetadataArgsCollection<RelationIdMetadataArgs>();\n    readonly embeddeds = new PropertyMetadataArgsCollection<EmbeddedMetadataArgs>();\n    readonly inheritances = new TargetMetadataArgsCollection<InheritanceMetadataArgs>();\n    readonly discriminatorValues = new TargetMetadataArgsCollection<DiscriminatorValueMetadataArgs>();\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets merged (with all abstract classes) table metadatas for the given classes.\n     */\n    getMergedTableMetadatas(classes?: Function[]) {\n        const allTableMetadataArgs = classes ? this.tables.filterByTargets(classes) : this.tables;\n        const tableMetadatas = allTableMetadataArgs.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"class-table-child\");\n\n        return tableMetadatas.toArray().map(tableMetadata => {\n            return this.mergeWithAbstract(allTableMetadataArgs, tableMetadata);\n        });\n    }\n\n    /**\n     * Gets merged (with all abstract classes) embeddable table metadatas for the given classes.\n     */\n    getMergedEmbeddableTableMetadatas(classes?: Function[]) {\n        const tables = classes ? this.tables.filterByTargets(classes) : this.tables;\n        const embeddableTableMetadatas = tables.filter(table => table.type === \"embeddable\");\n\n        return embeddableTableMetadatas.toArray().map(embeddableTableMetadata => {\n            return this.mergeWithEmbeddable(embeddableTableMetadatas, embeddableTableMetadata);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     */\n    protected mergeWithAbstract(allTableMetadatas: TargetMetadataArgsCollection<TableMetadataArgs>,\n                                table: TableMetadataArgs) {\n\n        const indices = this.indices.filterByTarget(table.target);\n        const columns = this.columns.filterByTarget(table.target);\n        const relations = this.relations.filterByTarget(table.target);\n        const joinColumns = this.joinColumns.filterByTarget(table.target);\n        const joinTables = this.joinTables.filterByTarget(table.target);\n        const entityListeners = this.entityListeners.filterByTarget(table.target);\n        const relationCounts = this.relationCounts.filterByTarget(table.target);\n        const relationIds = this.relationIds.filterByTarget(table.target);\n        const embeddeds = this.embeddeds.filterByTarget(table.target);\n        const inheritances = this.inheritances.filterByTarget(table.target);\n        const inheritance = (inheritances.length > 0) ? inheritances.toArray()[0] : undefined;\n        const discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\n\n        // find parent if this table is class-table-child\n        let parent: TableMetadataArgs|undefined = undefined;\n\n        // merge metadata from abstract tables\n        allTableMetadatas.toArray().forEach(inheritedTable => {\n            if (table.type === \"single-table-child\") return;\n            if (!table.target || !inheritedTable.target) return;\n            if (!(table.target instanceof Function) || !(inheritedTable.target instanceof Function)) return;\n            if (!this.isInherited(table.target, inheritedTable.target)) return;\n\n            // check if inheritedTable is a class with class table inheritance - then we don't need to merge its columns, relations, etc. things\n            if (!!this.inheritances.filterByTarget(inheritedTable.target).toArray().find(inheritance => inheritance.type === \"class-table\")) {\n                parent = inheritedTable;\n                return;\n            }\n\n            const metadatasFromAbstract = this.mergeWithAbstract(allTableMetadatas, inheritedTable);\n\n            metadatasFromAbstract.indices\n                .toArray()\n                .filter(index => { // make sure we don't have index with such name already\n                    return !index.name || !indices.toArray().find(existIndex => existIndex.name === index.name);\n                })\n                .forEach(index => indices.add(index));\n\n            metadatasFromAbstract.columns\n                .filterRepeatedMetadatas(columns.toArray())\n                .toArray()\n                .forEach(metadata => columns.add(metadata));\n\n            metadatasFromAbstract.relations\n                .filterRepeatedMetadatas(relations.toArray())\n                .toArray()\n                .forEach(metadata => relations.add(metadata));\n\n            metadatasFromAbstract.joinColumns\n                .filterRepeatedMetadatas(joinColumns.toArray())\n                .toArray()\n                .forEach(metadata => joinColumns.add(metadata));\n\n            metadatasFromAbstract.joinTables\n                .filterRepeatedMetadatas(joinTables.toArray())\n                .toArray()\n                .forEach(metadata => joinTables.add(metadata));\n\n            metadatasFromAbstract.entityListeners\n                .filterRepeatedMetadatas(entityListeners.toArray())\n                .toArray()\n                .forEach(metadata => entityListeners.add(metadata));\n\n            metadatasFromAbstract.relationCounts\n                .filterRepeatedMetadatas(relationCounts.toArray())\n                .toArray()\n                .forEach(metadata => relationCounts.add(metadata));\n\n            metadatasFromAbstract.relationIds\n                .filterRepeatedMetadatas(relationIds.toArray())\n                .toArray()\n                .forEach(metadata => relationIds.add(metadata));\n\n            metadatasFromAbstract.embeddeds\n                .filterRepeatedMetadatas(embeddeds.toArray())\n                .toArray()\n                .forEach(metadata => embeddeds.add(metadata));\n\n        });\n\n        // merge metadata from child tables for single-table inheritance\n        const children: TableMetadataArgs[] = [];\n\n        if (inheritance && inheritance.type === \"single-table\") {\n            allTableMetadatas.toArray().forEach(childTable => {\n                if (childTable.type !== \"single-table-child\") return;\n                if (!childTable.target || !table.target) return;\n                if (!(childTable.target instanceof Function) || !(table.target instanceof Function)) return;\n                if (!this.isInherited(childTable.target, table.target)) return;\n\n                children.push(childTable);\n                this.discriminatorValues\n                    .filterByTarget(childTable.target)\n                    .toArray()\n                    .forEach(metadata => discriminatorValues.push(metadata));\n\n                // for single table inheritance we also merge all columns, relation, etc. into same table\n                if (inheritance.type === \"single-table\") { // todo: remove?\n                    const metadatasFromAbstract = this.mergeWithAbstract(allTableMetadatas, childTable);\n\n                    metadatasFromAbstract.indices\n                        .toArray()\n                        .filter(index => { // make sure we don't have index with such name already\n                            return !indices.toArray().find(existIndex => existIndex.name === index.name);\n                        })\n                        .forEach(index => indices.add(index));\n\n                    metadatasFromAbstract.columns\n                        .filterRepeatedMetadatas(columns.toArray())\n                        .toArray()\n                        .forEach(metadata => columns.add(metadata));\n\n                    metadatasFromAbstract.relations\n                        .filterRepeatedMetadatas(relations.toArray())\n                        .toArray()\n                        .forEach(metadata => relations.add(metadata));\n\n                    metadatasFromAbstract.joinColumns\n                        .filterRepeatedMetadatas(joinColumns.toArray())\n                        .toArray()\n                        .forEach(metadata => joinColumns.add(metadata));\n\n                    metadatasFromAbstract.joinTables\n                        .filterRepeatedMetadatas(joinTables.toArray())\n                        .toArray()\n                        .forEach(metadata => joinTables.add(metadata));\n\n                    metadatasFromAbstract.entityListeners\n                        .filterRepeatedMetadatas(entityListeners.toArray())\n                        .toArray()\n                        .forEach(metadata => entityListeners.add(metadata));\n\n                    metadatasFromAbstract.relationCounts\n                        .filterRepeatedMetadatas(relationCounts.toArray())\n                        .toArray()\n                        .forEach(metadata => relationCounts.add(metadata));\n\n                    metadatasFromAbstract.relationIds\n                        .filterRepeatedMetadatas(relationIds.toArray())\n                        .toArray()\n                        .forEach(metadata => relationIds.add(metadata));\n\n                    metadatasFromAbstract.embeddeds\n                        .filterRepeatedMetadatas(embeddeds.toArray())\n                        .toArray()\n                        .forEach(metadata => embeddeds.add(metadata));\n\n                    metadatasFromAbstract.children\n                        .forEach(metadata => children.push(metadata));\n                }\n            });\n        }\n\n        return {\n            table: table,\n            parent: parent,\n            inheritance: inheritance,\n            children: children,\n            indices: indices,\n            columns: columns,\n            relations: relations,\n            joinColumns: joinColumns,\n            joinTables: joinTables,\n            entityListeners: entityListeners,\n            relationCounts: relationCounts,\n            relationIds: relationIds,\n            embeddeds: embeddeds,\n            discriminatorValues: discriminatorValues\n        };\n    }\n\n    /**\n     */\n    protected mergeWithEmbeddable(allTableMetadatas: TargetMetadataArgsCollection<TableMetadataArgs>,\n                                  tableMetadata: TableMetadataArgs) {\n        const columns = this.columns.filterByTarget(tableMetadata.target);\n\n        allTableMetadatas\n            .filter(metadata => {\n                if (!tableMetadata.target || !metadata.target) return false;\n                if (!(tableMetadata.target instanceof Function) || !(metadata.target instanceof Function)) return false;\n                return this.isInherited(tableMetadata.target, metadata.target); // todo: fix it for entity schema\n            })\n            .toArray()\n            .forEach(parentMetadata => {\n                const metadatasFromParents = this.mergeWithEmbeddable(allTableMetadatas, parentMetadata);\n\n                metadatasFromParents.columns\n                    .filterRepeatedMetadatas(columns.toArray())\n                    .toArray()\n                    .forEach(metadata => columns.add(metadata));\n            });\n\n        return {\n            table: tableMetadata,\n            columns: columns\n        };\n    }\n\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    protected isInherited(target1: Function, target2: Function) {\n        // we cannot use instanceOf in this method, because we need order of inherited tables, to ensure that\n        // properties get inherited in a right order. To achieve it we can only check a first parent of the class\n        // return this.target.prototype instanceof anotherTable.target;\n        return Object.getPrototypeOf(target1.prototype).constructor === target2;\n    }\n\n}"],"sourceRoot":".."}