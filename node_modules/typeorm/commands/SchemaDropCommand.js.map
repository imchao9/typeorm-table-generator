{"version":3,"sources":["../../src/commands/SchemaDropCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA6D;AAG7D;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,aAAa,CAAC;QACxB,aAAQ,GAAG,iFAAiF;YACxF,kEAAkE,CAAC;IA2C3E,CAAC;IAzCG,mCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,qDAAqD;SAClE,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,gBAAgB;YACzB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,mCAAO,GAAb,UAAc,IAAS;;gBAEf,UAAU,EAAoC,WAAW;;;;qCAAtB,SAAS,gBAA8B,EAAE;;;;wBAE5E,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC;wBAC1C,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,IAAI,CAAC;6BACpC,IAAI,CAAC,UAAU,EAAf,wBAAe;wBACF,qBAAM,wBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,EAAA;;wBAAvF,UAAU,GAAG,SAA0E,CAAC;wBACxF,qBAAM,UAAU,CAAC,YAAY,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;wBAChC,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;4BAEX,qBAAM,yBAAiB,EAAE,EAAA;;wBAAvC,WAAW,GAAG,SAAyB,CAAC;wBACxC,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,YAAY,EAAE,EAAzB,CAAyB,CAAC,CAAC,EAAA;;wBAA3E,SAA2E,CAAC;;;;;wBAIhF,EAAE,CAAC,CAAC,UAAU,CAAC;4BACV,UAAyB,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,KAAG,CAAC,CAAC;wBACxD,MAAM,KAAG,CAAC;;6BAGN,UAAU,EAAV,yBAAU;wBACV,qBAAM,UAAU,CAAC,KAAK,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;6BAE7B,qBAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,KAAK,EAAE,EAAlB,CAAkB,CAAC,CAAC,EAAA;;wBAApE,SAAoE,CAAC;;;;;;KAE5E;IACL,wBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,8CAAiB","file":"SchemaDropCommand.js","sourcesContent":["import {createConnections, createConnection} from \"../index\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Drops all tables of the database from the given connection.\n */\nexport class SchemaDropCommand {\n    command = \"schema:drop\";\n    describe = \"Drops all tables in the database. It drops tables on all connections you have. \" +\n        \"To drop table of a concrete connection's database use -c option.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which to drop all tables.\"\n            })\n            .option(\"cf\", {\n                alias: \"config\",\n                default: \"ormconfig.json\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(argv: any) {\n\n        let connection: Connection|undefined = undefined, connections: Connection[] = [];\n        try {\n            process.env.LOGGER_CLI_SCHEMA_SYNC = true;\n            process.env.SKIP_SCHEMA_CREATION = true;\n            if (argv.connection) {\n                connection = await createConnection(argv.connection, process.cwd() + \"/\" + argv.config);\n                await connection.dropDatabase();\n                await connection.close();\n            } else {\n                connections = await createConnections();\n                await Promise.all(connections.map(connection => connection.dropDatabase()));\n            }\n\n        } catch (err) {\n            if (connection)\n                (connection as Connection).logger.log(\"error\", err);\n            throw err;\n\n        } finally {\n            if (connection)\n                await connection.close();\n\n            await Promise.all(connections.map(connection => connection.close()));\n        }\n    }\n}"],"sourceRoot":".."}