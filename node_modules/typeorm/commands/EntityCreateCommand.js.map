{"version":3,"sources":["../../src/commands/EntityCreateCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAyB;AAGzB;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,eAAe,CAAC;QAC1B,aAAQ,GAAG,yBAAyB,CAAC;IA0EzC,CAAC;IAxEG,qCAAO,GAAP,UAAQ,KAAU;QACd,MAAM,CAAC,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,gDAAgD;SAC7D,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,2BAA2B;YACrC,MAAM,EAAE,IAAI;SACf,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,2CAA2C;SACxD,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,gBAAgB;YACzB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,qCAAO,GAAb,UAAc,IAAS;;gBACb,WAAW,EACX,QAAQ,EACV,SAAS,EAKC,WAAW,EAEP,UAAU;;;;sCATR,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;mCAC7C,IAAI,CAAC,IAAI,GAAG,KAAK;oCAClB,IAAI,CAAC,GAAG;wBAExB,gFAAgF;wBAChF,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACb,IAAI,CAAC;8CACwC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gCACnF,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;iDACK,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU;wCAC1C,MAAM,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oCAC5H,CAAC,CAAC;oCACF,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;wCAC/B,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC;oCAC3C,CAAC;gCACL,CAAC;4BACL,CAAC;4BAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACrB,CAAC;wBAED,qBAAM,mBAAmB,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,SAAS,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,QAAQ,EAAE,WAAW,CAAC,EAAA;;wBAAxH,SAAwH,CAAC;;;;;KAC5H;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACc,8BAAU,GAA3B,UAA4B,IAAY,EAAE,OAAe;QACrD,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;YAC9B,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAtB,CAAsB,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACc,+BAAW,GAA5B,UAA6B,IAAY;QACrC,MAAM,CAAC,kEAGA,IAAI,cAGlB,CAAC;IACE,CAAC;IAEL,0BAAC;AAAD,CA5EA,AA4EC,IAAA;AA5EY,kDAAmB","file":"EntityCreateCommand.js","sourcesContent":["import * as fs from \"fs\";\nimport {ConnectionOptions} from \"../connection/ConnectionOptions\";\n\n/**\n * Generates a new entity.\n */\nexport class EntityCreateCommand {\n    command = \"entity:create\";\n    describe = \"Generates a new entity.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which to run a query\"\n            })\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the entity class.\",\n                demand: true\n            })\n            .option(\"d\", {\n                alias: \"dir\",\n                describe: \"Directory where entity should be created.\"\n            })\n            .option(\"cf\", {\n                alias: \"config\",\n                default: \"ormconfig.json\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(argv: any) {\n        const fileContent = EntityCreateCommand.getTemplate(argv.name);\n        const filename = argv.name + \".ts\";\n        let directory = argv.dir;\n\n        // if directory is not set then try to open tsconfig and find default path there\n        if (!directory) {\n            try {\n                const connections: ConnectionOptions[] = require(process.cwd() + \"/\" + argv.config);\n                if (connections) {\n                    const connection = connections.find(connection => { // todo: need to implement \"environment\" support in the ormconfig too\n                        return connection.name === argv.connection || ((argv.connection === \"default\" || !argv.connection) && !connection.name);\n                    });\n                    if (connection && connection.cli) {\n                        directory = connection.cli.entitiesDir;\n                    }\n                }\n            } catch (err) { }\n        }\n\n        await EntityCreateCommand.createFile(process.cwd() + \"/\" + (directory ? (directory + \"/\") : \"\") + filename, fileContent);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a file with the given content in the given path.\n     */\n    protected static createFile(path: string, content: string): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            fs.writeFile(path, content, err => err ? fail(err) : ok());\n        });\n    }\n\n    /**\n     * Gets contents of the entity file.\n     */\n    protected static getTemplate(name: string): string {\n        return `import {Entity} from \"typeorm\";\n\n@Entity()\nexport class ${name} {\n\n}\n`;\n    }\n\n}"],"sourceRoot":".."}