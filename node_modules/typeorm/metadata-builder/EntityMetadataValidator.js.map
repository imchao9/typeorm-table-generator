{"version":3,"sources":["../../src/metadata-builder/EntityMetadataValidator.ts"],"names":[],"mappings":"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","file":"EntityMetadataValidator.js","sourcesContent":["import {UsingJoinTableIsNotAllowedError} from \"./error/UsingJoinTableIsNotAllowedError\";\nimport {UsingJoinTableOnlyOnOneSideAllowedError} from \"./error/UsingJoinTableOnlyOnOneSideAllowedError\";\nimport {UsingJoinColumnIsNotAllowedError} from \"./error/UsingJoinColumnIsNotAllowedError\";\nimport {UsingJoinColumnOnlyOnOneSideAllowedError} from \"./error/UsingJoinColumnOnlyOnOneSideAllowedError\";\nimport {MissingJoinColumnError} from \"./error/MissingJoinColumnError\";\nimport {MissingJoinTableError} from \"./error/MissingJoinTableError\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {MissingPrimaryColumnError} from \"./error/MissingPrimaryColumnError\";\nimport {CircularRelationsError} from \"./error/CircularRelationsError\";\nimport {DepGraph} from \"../util/DepGraph\";\n\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas: EntityMetadata[]) {\n        entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas));\n        this.validateDependencies(entityMetadatas);\n    }\n\n    /**\n     * Validates given entity metadata.\n     */\n    validate(entityMetadata: EntityMetadata, allEntityMetadatas: EntityMetadata[]) {\n\n        // check if table metadata has an id\n        if (!entityMetadata.table.isClassTableChild && !entityMetadata.primaryColumns.length && !entityMetadata.junction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritanceType === \"single-table\") {\n            if (!entityMetadata.hasDiscriminatorColumn)\n                throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put @DiscriminatorColumn decorator?`);\n\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\n                throw new Error(`Entity ${entityMetadata.name} has empty discriminator value. Discriminator value should not be empty.`);\n\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.`);\n        }\n\n        // validate relations\n        entityMetadata.relations.forEach(relation => {\n\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            if (relation.joinTable) {\n                if (!relation.isManyToMany)\n                    throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n                    throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            }\n\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);\n\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n                throw new MissingJoinTableError(entityMetadata, relation);\n\n\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n\n        });\n\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(relation => {\n            const isCircularCascadeRemove = relation.isCascadeRemove && relation.hasInverseSide && relation.inverseRelation.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` +\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n    }\n\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\n\n        const graph = new DepGraph();\n        entityMetadatas.forEach(entityMetadata => {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.relationsWithJoinColumns\n                .filter(relation => !relation.isNullable)\n                .forEach(relation => {\n                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n                });\n        });\n        try {\n            graph.overallOrder();\n\n        } catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    }\n\n}"],"sourceRoot":".."}