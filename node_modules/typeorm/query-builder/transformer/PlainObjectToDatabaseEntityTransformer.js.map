{"version":3,"sources":["../../src/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts"],"names":[],"mappings":"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","file":"PlainObjectToDatabaseEntityTransformer.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryBuilder} from \"../QueryBuilder\";\n\n/**\n */\ninterface LoadMap {\n    name: string;\n    child: LoadMap[];\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n\n    // constructor(protected namingStrategy: NamingStrategyInterface) {\n    // }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform<Entity extends ObjectLiteral>(plainObject: ObjectLiteral, metadata: EntityMetadata, queryBuilder: QueryBuilder<Entity>): Promise<Entity|undefined> {\n\n        // if plain object does not have id then nothing to load really\n        if (!metadata.checkIfObjectContainsAllPrimaryKeys(plainObject))\n            return Promise.reject<Entity>(\"Given object does not have a primary column, cannot transform it to database entity.\");\n\n        const alias = queryBuilder.alias;\n        const needToLoad = this.buildLoadMap(plainObject, metadata, true);\n\n        this.join(queryBuilder, needToLoad, alias);\n\n        metadata.primaryColumns.forEach(primaryColumn => {\n            queryBuilder\n                .andWhere(alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName)\n                .setParameter(primaryColumn.propertyName, plainObject[primaryColumn.propertyName]);\n        });\n        if (metadata.parentEntityMetadata) {\n            metadata.parentEntityMetadata.primaryColumns.forEach(primaryColumn => {\n                const parentIdColumn = metadata.parentIdColumns.find(parentIdColumn => {\n                    return parentIdColumn.propertyName === primaryColumn.propertyName;\n                });\n                if (!parentIdColumn)\n                    throw new Error(`Prent id column for the given primary column was not found.`);\n\n                queryBuilder\n                    .andWhere(alias + \".\" + parentIdColumn.propertyName + \"=:\" + primaryColumn.propertyName)\n                    .setParameter(primaryColumn.propertyName, plainObject[primaryColumn.propertyName]);\n            });\n        }\n\n        return queryBuilder.getOne();\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private join<Entity extends ObjectLiteral>(qb: QueryBuilder<Entity>, needToLoad: LoadMap[], parentAlias: string) {\n        needToLoad.forEach(i => {\n            const alias = parentAlias + \"_\" + i.name;\n            qb.leftJoinAndSelect(parentAlias + \".\" + i.name, alias);\n            if (i.child && i.child.length)\n                this.join(qb, i.child, alias);\n        });\n    }\n\n    private buildLoadMap(object: any, metadata: EntityMetadata, isFirstLevelDepth = false): LoadMap[] {\n        // todo: rething the way we are trying to load things using left joins cause there are situations when same\n        // todo: entities are loaded multiple times and become different objects (problem with duplicate entities in dbEntities)\n        return metadata.relations\n            .filter(relation => object.hasOwnProperty(relation.propertyName))\n            .filter(relation => {\n                // we only need to load empty relations for first-level depth objects, otherwise removal can break\n                // this is not reliable, refactor this part later\n                const value = (object[relation.propertyName] instanceof Promise && relation.isLazy) ? object[\"__\" + relation.propertyName + \"__\"] : object[relation.propertyName];\n                return isFirstLevelDepth || !(value instanceof Array) || value.length > 0;\n            })\n            .map(relation => {\n                let value = (object[relation.propertyName] instanceof Promise && relation.isLazy) ? object[\"__\" + relation.propertyName + \"__\"] : object[relation.propertyName];\n                // let value = object[relation.propertyName];\n                if (value instanceof Array)\n                    value = Object.assign({}, ...value);\n\n                const child = value ? this.buildLoadMap(value, relation.inverseEntityMetadata) : [];\n                return <LoadMap> { name: relation.propertyName, child: child };\n            });\n    }\n\n}"],"sourceRoot":"../.."}