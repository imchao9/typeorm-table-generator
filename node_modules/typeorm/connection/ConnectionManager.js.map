{"version":3,"sources":["../../src/connection/ConnectionManager.ts"],"names":[],"mappings":"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","file":"ConnectionManager.js","sourcesContent":["import {Connection} from \"./Connection\";\nimport {ConnectionNotFoundError} from \"./error/ConnectionNotFoundError\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {DriverOptions} from \"../driver/DriverOptions\";\nimport {Driver} from \"../driver/Driver\";\nimport {MissingDriverError} from \"./error/MissingDriverError\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {AlreadyHasActiveConnectionError} from \"./error/AlreadyHasActiveConnectionError\";\nimport {Logger} from \"../logger/Logger\";\nimport {SqliteDriver} from \"../driver/sqlite/SqliteDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {CannotDetermineConnectionOptionsError} from \"./error/CannotDetermineConnectionOptionsError\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {WebsqlDriver} from \"../driver/websql/WebsqlDriver\";\n\n/**\n * ConnectionManager is used to store and manage all these different connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nexport class ConnectionManager {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * List of connections registered in this connection manager.\n     */\n    protected connections: Connection[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return !!this.connections.find(connection => connection.name === name);\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws exception if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): Connection {\n        const connection = this.connections.find(connection => connection.name === name);\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * You need to manually call #connect method to establish connection.\n     * Note that dropSchemaOnConnection and autoSchemaSync options of a ConnectionOptions will not work there - use\n     * createAndConnect method to use them.\n     */\n    create(options: ConnectionOptions): Connection {\n\n        const logger = new Logger(options.logging || {});\n        const driver = this.createDriver(options.driver, logger);\n        const connection = this.createConnection(options.name || \"default\", driver, logger);\n\n        // import entity schemas\n        if (options.entitySchemas) {\n            const [directories, classes] = this.splitStringsAndClasses(options.entitySchemas);\n            connection\n                .importEntitySchemas(classes)\n                .importEntitySchemaFromDirectories(directories);\n        }\n\n        // import entities\n        if (options.entities) {\n            const [directories, classes] = this.splitStringsAndClasses(options.entities);\n            connection\n                .importEntities(classes)\n                .importEntitiesFromDirectories(directories);\n        }\n\n        // import subscriber\n        if (options.subscribers) {\n            const [directories, classes] = this.splitStringsAndClasses(options.subscribers);\n            connection\n                .importSubscribers(classes)\n                .importSubscribersFromDirectories(directories);\n        }\n\n        // import naming strategies\n        if (options.namingStrategies) {\n            const [directories, classes] = this.splitStringsAndClasses(options.namingStrategies);\n            connection\n                .importNamingStrategies(classes)\n                .importNamingStrategiesFromDirectories(directories);\n        }\n\n        // import migrations\n        if (options.migrations) {\n            const [directories, classes] = this.splitStringsAndClasses(options.migrations);\n            connection\n                .importMigrations(classes)\n                .importMigrationsFromDirectories(directories);\n        }\n\n        // set naming strategy to be used for this connection\n        if (options.usedNamingStrategy)\n            connection.useNamingStrategy(options.usedNamingStrategy as any);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection and registers it in the manager.\n     *\n     * If connection options were not specified, then it will try to create connection automatically.\n     *\n     * First, it will try to find a \"default\" configuration from ormconfig.json.\n     * You can also specify a connection name to use from ormconfig.json,\n     * and you even can specify a path to custom ormconfig.json file.\n     *\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\n     * it will try to create connection from environment variables.\n     * There are several environment variables you can set:\n     *\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n     * - TYPEORM_URL - database connection url. Should be a string.\n     * - TYPEORM_HOST - database host. Should be a string.\n     * - TYPEORM_PORT - database access port. Should be a number.\n     * - TYPEORM_USERNAME - database username. Should be a string.\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n     *\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n     */\n    async createAndConnect(): Promise<Connection>;\n\n    /**\n     * Creates connection from the given connection options and registers it in the manager.\n     */\n    async createAndConnect(options: ConnectionOptions): Promise<Connection>;\n\n    /**\n     * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\n     * Optionally you can specify a path to custom ormconfig.json file.\n     */\n    async createAndConnect(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\n\n    /**\n     * Creates connection and and registers it in the manager.\n     */\n    async createAndConnect(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\n\n        // if connection options are given, then create connection from them\n        if (optionsOrConnectionNameFromConfig && optionsOrConnectionNameFromConfig instanceof Object)\n            return this.createAndConnectByConnectionOptions(optionsOrConnectionNameFromConfig as ConnectionOptions);\n\n        // if connection name is specified then explicitly try to load connection options from it\n        if (typeof optionsOrConnectionNameFromConfig === \"string\")\n            return this.createFromConfigAndConnect(optionsOrConnectionNameFromConfig || \"default\", ormConfigPath);\n\n        // if nothing is specified then try to silently load config from ormconfig.json\n        if (this.hasDefaultConfigurationInConfigurationFile())\n            return this.createFromConfigAndConnect(\"default\");\n\n        // if driver type is set in environment variables then try to create connection from env variables\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\n            return this.createFromEnvAndConnect();\n\n        throw new CannotDetermineConnectionOptionsError();\n    }\n\n    /**\n     * Creates new connections and registers them in the manager.\n     *\n     * If array of connection options were not specified, then it will try to create them automatically\n     * from ormconfig.json. You can also specify path to your custom ormconfig.json file.\n     *\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\n     * it will try to create connection from environment variables.\n     * There are several environment variables you can set:\n     *\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n     * - TYPEORM_URL - database connection url. Should be a string.\n     * - TYPEORM_HOST - database host. Should be a string.\n     * - TYPEORM_PORT - database access port. Should be a number.\n     * - TYPEORM_USERNAME - database username. Should be a string.\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n     *\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n     */\n    async createAndConnectToAll(): Promise<Connection[]>;\n\n    /**\n     * Creates connections from the given connection options and registers them in the manager.\n     */\n    async createAndConnectToAll(options?: ConnectionOptions[]): Promise<Connection[]>;\n\n    /**\n     * Creates connections from the ormconfig.json file.\n     * Optionally you can specify a path to custom ormconfig.json file.\n     */\n    async createAndConnectToAll(ormConfigPath?: string): Promise<Connection[]>;\n\n    /**\n     * Creates connections and and registers them in the manager.\n     */\n    async createAndConnectToAll(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\n\n        // if connection options are given, then create connection from them\n        if (optionsOrOrmConfigFilePath && optionsOrOrmConfigFilePath instanceof Array)\n            return Promise.all(optionsOrOrmConfigFilePath.map(options => {\n                return this.createAndConnectByConnectionOptions(options as ConnectionOptions);\n            }));\n\n        // if connection name is specified then explicitly try to load connection options from it\n        if (typeof optionsOrOrmConfigFilePath === \"string\")\n            return this.createFromConfigAndConnectToAll(optionsOrOrmConfigFilePath as string);\n\n        // if nothing is specified then try to silently load config from ormconfig.json\n        if (this.hasOrmConfigurationFile())\n            return this.createFromConfigAndConnectToAll();\n\n        // if driver type is set in environment variables then try to create connection from env variables\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\n            return [await this.createFromEnvAndConnect()];\n\n        throw new CannotDetermineConnectionOptionsError();\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if ormconfig.json exists.\n     */\n    protected hasOrmConfigurationFile(): boolean {\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\n        if (!PlatformTools.fileExist(path))\n            return false;\n\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\n        if (configuration instanceof Array) {\n            return configuration\n                    .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                    .length > 0;\n\n        } else if (configuration instanceof Object) {\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                return false;\n\n            return Object.keys(configuration).length > 0;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if there is a default connection in the ormconfig.json file.\n     */\n    protected hasDefaultConfigurationInConfigurationFile(): boolean {\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\n        if (!PlatformTools.fileExist(path))\n            return false;\n\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\n        if (configuration instanceof Array) {\n            return !!configuration\n                .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                .find(config => !!config.name || config.name === \"default\");\n\n        } else if (configuration instanceof Object) {\n            if (!configuration.name ||\n                configuration.name !== \"default\")\n                return false;\n\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                return false;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if environment variables contains connection options.\n     */\n    protected hasDefaultConfigurationInEnvironmentVariables(): boolean {\n        return !!PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\");\n    }\n\n    /**\n     * Allows to quickly create a connection based on the environment variable values.\n     */\n    protected async createFromEnvAndConnect(): Promise<Connection> {\n        return this.createAndConnectByConnectionOptions({\n            driver: {\n                type: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\"),\n                url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\n                host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\n                port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\n                username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\n                password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\n                database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\n                sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\n                storage: PlatformTools.getEnvVariable(\"TYPEORM_STORAGE\"),\n                usePool: PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\") !== undefined ? OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\")) : undefined, // special check for defined is required here\n                extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined\n            },\n            autoSchemaSync: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_AUTO_SCHEMA_SYNC\")),\n            entities: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\").split(\",\") : [],\n            subscribers: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\") ? PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\").split(\",\") : [],\n            entitySchemas: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\").split(\",\") : [],\n            namingStrategies: PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\").split(\",\") : [],\n            usedNamingStrategy: PlatformTools.getEnvVariable(\"TYPEORM_USED_NAMING_STRATEGY\"),\n            logging: {\n                logQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_QUERIES\")),\n                logFailedQueryError: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_FAILED_QUERIES\")),\n                logOnlyFailedQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_ONLY_FAILED_QUERIES\")),\n            }\n        });\n    }\n\n\n    /**\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\n     * and registers a new connection in the manager.\n     * Optionally you can specify a path to the json configuration.\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\n     */\n    protected async createFromConfigAndConnectToAll(path?: string): Promise<Connection[]> {\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\n        if (!optionsArray)\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\n\n        const promises = optionsArray\n            .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")) // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\n            .map(options => this.createAndConnectByConnectionOptions(options));\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\n     * and registers a new connection in the manager.\n     * Optionally you can specify a path to the json configuration.\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\n     */\n    protected async createFromConfigAndConnect(connectionName: string, path?: string): Promise<Connection> {\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\n        if (!optionsArray)\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\n\n        const environmentLessOptions = optionsArray.filter(options => (options.name || \"default\") === connectionName);\n        const options = environmentLessOptions.filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")); // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\n\n        if (!options.length)\n            throw new Error(`Connection \"${connectionName}\" ${PlatformTools.getEnvVariable(\"NODE_ENV\") ? \"for the environment \" + PlatformTools.getEnvVariable(\"NODE_ENV\") + \" \" : \"\"}was not found in the json configuration file.` +\n                (environmentLessOptions.length ? ` However there are such configurations for other environments: ${environmentLessOptions.map(options => options.environment).join(\", \")}.` : \"\"));\n\n        return this.createAndConnectByConnectionOptions(options[0]);\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers a new connection in the manager.\n     */\n    protected async createAndConnectByConnectionOptions(options: ConnectionOptions): Promise<Connection> {\n        const connection = this.create(options);\n\n        // connect to the database\n        await connection.connect();\n\n        // if option is set - drop schema once connection is done\n        if (options.dropSchemaOnConnection && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n            await connection.dropDatabase();\n\n        // if option is set - automatically synchronize a schema\n        if (options.autoSchemaSync && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n            await connection.syncSchema();\n\n        // if option is set - automatically synchronize a schema\n        if (options.autoMigrationsRun && !PlatformTools.getEnvVariable(\"SKIP_MIGRATIONS_RUN\"))\n            await connection.runMigrations();\n\n        return connection;\n    }\n\n    /**\n     * Splits given array of mixed strings and / or functions into two separate array of string and array of functions.\n     */\n    protected splitStringsAndClasses<T>(strAndClses: string[]|T[]): [string[], T[]] {\n        return [\n            (strAndClses as string[]).filter(str => typeof str === \"string\"),\n            (strAndClses as T[]).filter(cls => typeof cls !== \"string\"),\n        ];\n    }\n\n    /**\n     * Creates a new driver based on the given driver type and options.\n     */\n    protected createDriver(options: DriverOptions, logger: Logger): Driver {\n        switch (options.type) {\n            case \"mysql\":\n                return new MysqlDriver(options, logger, undefined);\n            case \"postgres\":\n                return new PostgresDriver(options, logger);\n            case \"mariadb\":\n                return new MysqlDriver(options, logger);\n            case \"sqlite\":\n                return new SqliteDriver(options, logger);\n            case \"oracle\":\n                return new OracleDriver(options, logger);\n            case \"mssql\":\n                return new SqlServerDriver(options, logger);\n            case \"websql\":\n                return new WebsqlDriver(options, logger);\n            default:\n                throw new MissingDriverError(options.type);\n        }\n    }\n\n    /**\n     * Creates a new connection and registers it in the connection manager.\n     */\n    protected createConnection(name: string, driver: Driver, logger: Logger) {\n        const existConnection = this.connections.find(connection => connection.name === name);\n        if (existConnection) {\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError(name);\n\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n\n        const connection = new Connection(name, driver, logger);\n        this.connections.push(connection);\n        return connection;\n    }\n\n}\n"],"sourceRoot":".."}