{"version":3,"sources":["../../src/schema-builder/schema/ColumnSchema.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH;IA8CI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,sBAAY,OASX;QAtCD;;WAEG;QACH,eAAU,GAAY,KAAK,CAAC;QAE5B;;WAEG;QACH,gBAAW,GAAY,KAAK,CAAC;QAE7B;;WAEG;QACH,cAAS,GAAY,KAAK,CAAC;QAE3B;;WAEG;QACH,aAAQ,GAAY,KAAK,CAAC;QAqBtB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;YAC/B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC;YAC9C,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,KAAK,CAAC;YAChD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC;YAC5C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC;YAC1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QACnC,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,4BAAK,GAAL;QACI,IAAM,eAAe,GAAG,IAAI,YAAY,EAAE,CAAC;QAC3C,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACjC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACjC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACvC,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAC7C,eAAe,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QAC/C,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACzC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACvC,MAAM,CAAC,eAAe,CAAC;IAC3B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,mBAAM,GAAb,UAAc,cAA8B,EAAE,cAAsB;QAChE,IAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QACxC,YAAY,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;QACxC,YAAY,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;QAC9C,YAAY,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;QAC9C,YAAY,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QACtD,YAAY,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QACpD,YAAY,CAAC,IAAI,GAAG,cAAc,CAAC;QACnC,YAAY,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;QAClD,YAAY,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;QAChD,MAAM,CAAC,YAAY,CAAC;IACxB,CAAC;IAEL,mBAAC;AAAD,CAhHA,AAgHC,IAAA;AAhHY,oCAAY","file":"ColumnSchema.js","sourcesContent":["import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\n\n/**\n * Table's column's schema in the database represented in this class.\n */\nexport class ColumnSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string;\n\n    /**\n     * Column type.\n     */\n    type: string;\n\n    /**\n     * Column's default value.\n     */\n    default: any;\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Column's comment.\n     */\n    comment: string|undefined;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: {\n        name?: string,\n        type?: string,\n        default?: string,\n        isNullable?: boolean,\n        isGenerated?: boolean,\n        isPrimary?: boolean,\n        isUnique?: boolean,\n        comment?: string\n    }) {\n        if (options) {\n            this.name = options.name || \"\";\n            this.type = options.type || \"\";\n            this.default = options.default;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.comment = options.comment;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column schema to a new column schema with exact same properties as this column schema has.\n     */\n    clone(): ColumnSchema {\n        const newColumnSchema = new ColumnSchema();\n        newColumnSchema.name = this.name;\n        newColumnSchema.type = this.type;\n        newColumnSchema.default = this.default;\n        newColumnSchema.isNullable = this.isNullable;\n        newColumnSchema.isGenerated = this.isGenerated;\n        newColumnSchema.isPrimary = this.isPrimary;\n        newColumnSchema.isUnique = this.isUnique;\n        newColumnSchema.comment = this.comment;\n        return newColumnSchema;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new column based on the given column metadata.\n     */\n    static create(columnMetadata: ColumnMetadata, normalizedType: string): ColumnSchema {\n        const columnSchema = new ColumnSchema();\n        columnSchema.name = columnMetadata.name;\n        columnSchema.default = columnMetadata.default;\n        columnSchema.comment = columnMetadata.comment;\n        columnSchema.isGenerated = columnMetadata.isGenerated;\n        columnSchema.isNullable = columnMetadata.isNullable;\n        columnSchema.type = normalizedType;\n        columnSchema.isPrimary = columnMetadata.isPrimary;\n        columnSchema.isUnique = columnMetadata.isUnique;\n        return columnSchema;\n    }\n\n}"],"sourceRoot":"../.."}