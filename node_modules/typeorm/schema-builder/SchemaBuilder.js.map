{"version":3,"sources":["../../src/schema-builder/SchemaBuilder.ts"],"names":[],"mappings":"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","file":"SchemaBuilder.js","sourcesContent":["import {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {TableSchema} from \"./schema/TableSchema\";\nimport {ColumnSchema} from \"./schema/ColumnSchema\";\nimport {ForeignKeySchema} from \"./schema/ForeignKeySchema\";\nimport {IndexSchema} from \"./schema/IndexSchema\";\nimport {Driver} from \"../driver/Driver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"../logger/Logger\";\nimport {PrimaryKeySchema} from \"./schema/PrimaryKeySchema\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * All synchronized tables in the database.\n     */\n    protected tableSchemas: TableSchema[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * @param driver Driver needs to create a query runner\n     * @param logger Used to log schema creation events\n     * @param entityMetadatas All entities to create schema for\n     */\n    constructor(protected driver: Driver,\n                protected logger: Logger,\n                protected entityMetadatas: EntityMetadata[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = await this.driver.createQueryRunner();\n        this.tableSchemas = await this.loadTableSchemas();\n\n        await this.queryRunner.beginTransaction();\n        try {\n            await this.dropOldForeignKeys();\n            // await this.dropOldPrimaryKeys(); // todo: need to drop primary column because column updates are not possible\n            await this.createNewTables();\n            await this.dropRemovedColumns();\n            await this.addNewColumns();\n            await this.updateExistColumns();\n            await this.updatePrimaryKeys();\n            await this.createForeignKeys();\n            await this.createIndices();\n            await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n            await this.queryRunner.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.entityMetadatas.filter(metadata => !metadata.table.skipSchemaSync);\n    }\n\n    /**\n     * Loads all table schemas from the database.\n     */\n    protected loadTableSchemas(): Promise<TableSchema[]> {\n        const tableNames = this.entityToSyncMetadatas.map(metadata => metadata.table.name);\n        return this.queryRunner.loadTableSchemas(tableNames);\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the table schemas, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const foreignKeySchemasToDrop = tableSchema.foreignKeys.filter(foreignKeySchema => {\n                return !metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === foreignKeySchema.name);\n            });\n            if (foreignKeySchemasToDrop.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`dropping old foreign keys of ${tableSchema.name}: ${foreignKeySchemasToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // remove foreign keys from the table schema\n            tableSchema.removeForeignKeys(foreignKeySchemasToDrop);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemasToDrop);\n        });\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            // check if table does not exist yet\n            const existTableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (existTableSchema)\n                return;\n\n            this.logger.logSchemaBuild(`creating a new table: ${metadata.table.name}`);\n\n            // create a new table schema and sync it in the database\n            const tableSchema = new TableSchema(metadata.table.name, this.metadataColumnsToColumnSchemas(metadata.columns), true);\n            this.tableSchemas.push(tableSchema);\n            await this.queryRunner.createTable(tableSchema);\n        });\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected dropRemovedColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema) return;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedColumnSchemas = tableSchema.columns.filter(columnSchema => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.name === columnSchema.name);\n            });\n            if (droppedColumnSchemas.length === 0)\n                return;\n\n            // drop all foreign keys that has column to be removed in its columns\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedForeignKeys(metadata.table.name, droppedColumnSchema.name);\n            }));\n\n            // drop all indices that point to this column\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedIndices(metadata.table.name, droppedColumnSchema.name);\n            }));\n\n            this.logger.logSchemaBuild(`columns dropped in ${tableSchema.name}: ` + droppedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // remove columns from the table schema and primary keys of it if its used in the primary keys\n            tableSchema.removeColumns(droppedColumnSchemas);\n            tableSchema.removePrimaryKeysOfColumns(droppedColumnSchemas);\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(tableSchema, droppedColumnSchemas);\n        });\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected addNewColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !tableSchema.columns.find(columnSchema => columnSchema.name === columnMetadata.name);\n            });\n            if (newColumnMetadatas.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.name).join(\", \"));\n\n            // create columns in the database\n            const newColumnSchemas = this.metadataColumnsToColumnSchemas(newColumnMetadatas);\n            await this.queryRunner.addColumns(tableSchema, newColumnSchemas);\n            tableSchema.addColumns(newColumnSchemas);\n        });\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected updateExistColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            const updatedColumnSchemas = tableSchema.findChangedColumns(this.queryRunner, metadata.columns);\n            if (updatedColumnSchemas.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`columns changed in ${tableSchema.name}. updating: ` + updatedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // drop all foreign keys that point to this column\n            const dropRelatedForeignKeysPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.name === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedForeignKeys(metadata.table.name, changedColumnSchema.name));\n\n            // wait until all related foreign keys are dropped\n            await Promise.all(dropRelatedForeignKeysPromises);\n\n            // drop all indices that point to this column\n            const dropRelatedIndicesPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.name === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedIndices(metadata.table.name, changedColumnSchema.name));\n\n            // wait until all related indices are dropped\n            await Promise.all(dropRelatedIndicesPromises);\n\n            // generate a map of new/old columns\n            const newAndOldColumnSchemas = updatedColumnSchemas.map(changedColumnSchema => {\n                const columnMetadata = metadata.columns.find(column => column.name === changedColumnSchema.name);\n                const newColumnSchema = ColumnSchema.create(columnMetadata!, this.queryRunner.normalizeType(columnMetadata!));\n                tableSchema.replaceColumn(changedColumnSchema, newColumnSchema);\n\n                return {\n                    newColumn: newColumnSchema,\n                    oldColumn: changedColumnSchema\n                };\n            });\n\n            return this.queryRunner.changeColumns(tableSchema, newAndOldColumnSchemas);\n        });\n    }\n\n    /**\n     * Creates primary keys which does not exist in the table yet.\n     */\n    protected updatePrimaryKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name && !table.justCreated);\n            if (!tableSchema)\n                return;\n\n            const metadataPrimaryColumns = metadata.columns.filter(column => column.isPrimary && !column.isGenerated);\n            const addedKeys = metadataPrimaryColumns\n                .filter(primaryKey => {\n                    return !tableSchema.primaryKeysWithoutGenerated.find(dbPrimaryKey => dbPrimaryKey.columnName === primaryKey.name);\n                })\n                .map(primaryKey => new PrimaryKeySchema(\"\", primaryKey.name));\n\n            const droppedKeys = tableSchema.primaryKeysWithoutGenerated.filter(primaryKeySchema => {\n                return !metadataPrimaryColumns.find(primaryKeyMetadata => primaryKeyMetadata.name === primaryKeySchema.columnName);\n            });\n\n            if (addedKeys.length === 0 && droppedKeys.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`primary keys of ${tableSchema.name} has changed: dropped - ${droppedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}; added - ${addedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}`);\n            tableSchema.addPrimaryKeys(addedKeys);\n            tableSchema.removePrimaryKeys(droppedKeys);\n            await this.queryRunner.updatePrimaryKeys(tableSchema);\n        });\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected createForeignKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\n                return !tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\n            });\n            if (newKeys.length === 0)\n                return;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n            this.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")}`);\n            await this.queryRunner.createForeignKeys(tableSchema, dbForeignKeys);\n            tableSchema.addForeignKeys(dbForeignKeys);\n        });\n    }\n\n    /**\n     * Creates indices which are missing in db yet, and drops indices which exist in the db,\n     * but does not exist in the metadata anymore.\n     */\n    protected createIndices() {\n        // return Promise.all(this.entityMetadatas.map(metadata => this.createIndices(metadata.table, metadata.indices)));\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            // drop all indices that exist in the table, but does not exist in the given composite indices\n            const dropQueries = tableSchema.indices\n                .filter(indexSchema => !metadata.indices.find(indexMetadata => indexMetadata.name === indexSchema.name))\n                .map(async indexSchema => {\n                    this.logger.logSchemaBuild(`dropping an index: ${indexSchema.name}`);\n                    tableSchema.removeIndex(indexSchema);\n                    await this.queryRunner.dropIndex(metadata.table.name, indexSchema.name);\n                });\n\n            // then create table indices for all composite indices we have\n            const addQueries = metadata.indices\n                .filter(indexMetadata => !tableSchema.indices.find(indexSchema => indexSchema.name === indexMetadata.name))\n                .map(async indexMetadata => {\n                    const indexSchema = IndexSchema.create(indexMetadata);\n                    tableSchema.indices.push(indexSchema);\n                    this.logger.logSchemaBuild(`adding new index: ${indexSchema.name}`);\n                    await this.queryRunner.createIndex(indexSchema.tableName, indexSchema);\n                });\n\n            await Promise.all(dropQueries.concat(addQueries));\n        });\n    }\n\n    /**\n     * Drops all indices where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedIndices(tableName: string, columnName: string): Promise<void> {\n\n        const allIndexMetadatas = this.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.indices),\n            [] as IndexMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // console.log(allIndexMetadatas);\n\n        // find depend indices to drop them\n        const dependIndices = allIndexMetadatas.filter(indexMetadata => {\n            return indexMetadata.tableName === tableName && indexMetadata.columns.indexOf(columnName) !== -1;\n        });\n        if (!dependIndices.length)\n            return;\n\n        const dependIndicesInTable = tableSchema.indices.filter(indexSchema => {\n            return !!dependIndices.find(indexMetadata => indexSchema.name === indexMetadata.name);\n        });\n        if (dependIndicesInTable.length === 0)\n            return;\n\n        this.logger.logSchemaBuild(`dropping related indices of ${tableName}#${columnName}: ${dependIndicesInTable.map(index => index.name).join(\", \")}`);\n\n        const dropPromises = dependIndicesInTable.map(index => {\n            tableSchema.removeIndex(index);\n            return this.queryRunner.dropIndex(tableSchema.name, index.name);\n        });\n\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tableName: string, columnName: string): Promise<void> {\n\n        const allForeignKeyMetadatas = this.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.foreignKeys),\n            [] as ForeignKeyMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // find depend foreign keys to drop them\n        const dependForeignKeys = allForeignKeyMetadatas.filter(foreignKey => {\n            if (foreignKey.tableName === tableName) {\n                return !!foreignKey.columns.find(fkColumn => {\n                    return fkColumn.name === columnName;\n                });\n            } else if (foreignKey.referencedTableName === tableName) {\n                return !!foreignKey.referencedColumns.find(fkColumn => {\n                    return fkColumn.name === columnName;\n                });\n            }\n            return false;\n        });\n        if (!dependForeignKeys.length)\n            return;\n\n        const dependForeignKeyInTable = dependForeignKeys.filter(fk => {\n            return !!tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === fk.name);\n        });\n        if (dependForeignKeyInTable.length === 0)\n            return;\n\n        this.logger.logSchemaBuild(`dropping related foreign keys of ${tableName}#${columnName}: ${dependForeignKeyInTable.map(foreignKey => foreignKey.name).join(\", \")}`);\n        const foreignKeySchemas = dependForeignKeyInTable.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n        tableSchema.removeForeignKeys(foreignKeySchemas);\n        await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemas);\n    }\n\n    /**\n     * Creates new column schemas from the given column metadatas.\n     */\n    protected metadataColumnsToColumnSchemas(columns: ColumnMetadata[]): ColumnSchema[] {\n        return columns.map(columnMetadata => {\n            return ColumnSchema.create(columnMetadata, this.queryRunner.normalizeType(columnMetadata));\n        });\n    }\n\n}"],"sourceRoot":".."}