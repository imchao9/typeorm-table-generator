{"version":3,"sources":["build/browser/typeorm/driver/DriverOptions.ts","build/browser/typeorm/metadata/types/ColumnTypes.ts","build/browser/typeorm/decorator/options/ColumnOptions.ts","build/browser/typeorm/metadata-args/ColumnMetadataArgs.ts","build/browser/typeorm/metadata/types/TableTypes.ts","build/browser/typeorm/find-options/OrderByCondition.ts","build/browser/typeorm/metadata-args/TableMetadataArgs.ts","build/browser/typeorm/metadata/error/EntityMetadataAlreadySetError.ts","build/browser/typeorm/metadata/error/EntityMetadataNotSetError.ts","build/browser/typeorm/metadata/TableMetadata.ts","build/browser/typeorm/metadata/types/RelationTypes.ts","build/browser/typeorm/metadata/ForeignKeyMetadata.ts","build/browser/typeorm/decorator/options/JoinColumnOptions.ts","build/browser/typeorm/metadata-args/JoinTableMetadataArgs.ts","build/browser/typeorm/metadata/JoinTableMetadata.ts","build/browser/typeorm/metadata-args/JoinColumnMetadataArgs.ts","build/browser/typeorm/metadata/JoinColumnMetadata.ts","build/browser/typeorm/decorator/options/RelationOptions.ts","build/browser/typeorm/metadata-args/RelationMetadataArgs.ts","build/browser/typeorm/common/ObjectLiteral.ts","build/browser/typeorm/metadata/RelationMetadata.ts","build/browser/typeorm/metadata-args/IndexMetadataArgs.ts","build/browser/typeorm/metadata/IndexMetadata.ts","build/browser/typeorm/naming-strategy/NamingStrategyInterface.ts","build/browser/typeorm/metadata/EmbeddedMetadata.ts","build/browser/typeorm/metadata-args/EntityMetadataArgs.ts","build/browser/typeorm/query-builder/alias/Alias.ts","build/browser/typeorm/query-builder/alias/AliasMap.ts","build/browser/typeorm/util/OrmUtils.ts","build/browser/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.ts","build/browser/typeorm/driver/error/ConnectionIsNotSetError.ts","build/browser/typeorm/driver/DatabaseConnection.ts","build/browser/typeorm/driver/error/DriverPackageNotInstalledError.ts","build/browser/typeorm/driver/DriverUtils.ts","build/browser/typeorm/logger/LoggerOptions.ts","build/browser/typeorm/platform/PlatformTools.ts","build/browser/typeorm/logger/Logger.ts","build/browser/typeorm/driver/error/TransactionAlreadyStartedError.ts","build/browser/typeorm/driver/error/TransactionNotStartedError.ts","build/browser/typeorm/driver/error/DataTypeNotSupportedByDriverError.ts","build/browser/typeorm/schema-builder/schema/IndexSchema.ts","build/browser/typeorm/schema-builder/schema/ForeignKeySchema.ts","build/browser/typeorm/schema-builder/schema/PrimaryKeySchema.ts","build/browser/typeorm/schema-builder/schema/TableSchema.ts","build/browser/typeorm/query-runner/error/QueryRunnerAlreadyReleasedError.ts","build/browser/typeorm/driver/sqlserver/SqlServerQueryRunner.ts","build/browser/typeorm/driver/error/DriverOptionNotSetError.ts","build/browser/typeorm/util/DataTransformationUtils.ts","build/browser/typeorm/driver/sqlserver/SqlServerDriver.ts","build/browser/typeorm/query-builder/JoinOptions.ts","build/browser/typeorm/query-runner/QueryRunnerProvider.ts","build/browser/typeorm/query-builder/QueryBuilder.ts","build/browser/typeorm/lazy-loading/LazyRelationsWrapper.ts","build/browser/typeorm/metadata/EntityMetadata.ts","build/browser/typeorm/metadata/ColumnMetadata.ts","build/browser/typeorm/schema-builder/schema/ColumnSchema.ts","build/browser/typeorm/query-runner/QueryRunner.ts","build/browser/typeorm/driver/Driver.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.ts","build/browser/typeorm/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts","build/browser/typeorm/find-options/FindOptions.ts","build/browser/typeorm/find-options/FindOptionsUtils.ts","build/browser/typeorm/persistence/Subject.ts","build/browser/typeorm/common/ObjectType.ts","build/browser/typeorm/repository/TreeRepository.ts","build/browser/typeorm/repository/SpecificRepository.ts","build/browser/typeorm/repository/RepositoryFactory.ts","build/browser/typeorm/repository/RepositoryAggregator.ts","build/browser/typeorm/connection/error/RepositoryNotTreeError.ts","build/browser/typeorm/entity-manager/error/NoNeedToReleaseEntityManagerError.ts","build/browser/typeorm/query-runner/error/QueryRunnerProviderAlreadyReleasedError.ts","build/browser/typeorm/entity-manager/BaseEntityManager.ts","build/browser/typeorm/entity-manager/EntityManager.ts","build/browser/typeorm/util/PromiseUtils.ts","build/browser/typeorm/persistence/SubjectOperationExecutor.ts","build/browser/typeorm/persistence/SubjectBuilder.ts","build/browser/typeorm/repository/Repository.ts","build/browser/typeorm/subscriber/event/UpdateEvent.ts","build/browser/typeorm/subscriber/event/RemoveEvent.ts","build/browser/typeorm/subscriber/event/InsertEvent.ts","build/browser/typeorm/subscriber/EntitySubscriberInterface.ts","build/browser/typeorm/connection/error/RepositoryNotFoundError.ts","build/browser/typeorm/metadata/types/EventListenerTypes.ts","build/browser/typeorm/metadata-args/EntityListenerMetadataArgs.ts","build/browser/typeorm/metadata/EntityListenerMetadata.ts","build/browser/typeorm/util/DirectoryExportedClassesLoader.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinTableOnlyOnOneSideAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnIsNotAllowedError.ts","build/browser/typeorm/metadata-builder/error/UsingJoinColumnOnlyOnOneSideAllowedError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinColumnError.ts","build/browser/typeorm/metadata-builder/error/MissingJoinTableError.ts","build/browser/typeorm/metadata-builder/error/MissingPrimaryColumnError.ts","build/browser/typeorm/metadata-builder/error/CircularRelationsError.ts","build/browser/typeorm/util/DepGraph.ts","build/browser/typeorm/metadata-builder/EntityMetadataValidator.ts","build/browser/typeorm/metadata-builder/JunctionEntityMetadataBuilder.ts","build/browser/typeorm/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts","build/browser/typeorm/entity-schema/EntitySchema.ts","build/browser/typeorm/metadata-builder/error/MetadataAlreadyExistsError.ts","build/browser/typeorm/metadata-args/collection/TargetMetadataArgsCollection.ts","build/browser/typeorm/metadata-args/collection/PropertyMetadataArgsCollection.ts","build/browser/typeorm/metadata-args/RelationCountMetadataArgs.ts","build/browser/typeorm/metadata-args/NamingStrategyMetadataArgs.ts","build/browser/typeorm/metadata-args/EmbeddedMetadataArgs.ts","build/browser/typeorm/metadata-args/EntitySubscriberMetadataArgs.ts","build/browser/typeorm/metadata-args/RelationIdMetadataArgs.ts","build/browser/typeorm/metadata-args/InheritanceMetadataArgs.ts","build/browser/typeorm/metadata-args/DiscriminatorValueMetadataArgs.ts","build/browser/typeorm/metadata-args/EntityRepositoryMetadataArgs.ts","build/browser/typeorm/metadata-args/TransactionEntityMetadataArgs.ts","build/browser/typeorm/metadata-args/MetadataArgsStorage.ts","build/browser/typeorm/metadata-builder/EntityMetadataBuilder.ts","build/browser/typeorm/util/RandomGenerator.ts","build/browser/typeorm/util/StringUtils.ts","build/browser/typeorm/naming-strategy/DefaultNamingStrategy.ts","build/browser/typeorm/connection/error/CannotImportAlreadyConnectedError.ts","build/browser/typeorm/connection/error/CannotCloseNotConnectedError.ts","build/browser/typeorm/connection/error/CannotConnectAlreadyConnectedError.ts","build/browser/typeorm/connection/error/NamingStrategyNotFoundError.ts","build/browser/typeorm/connection/error/CannotSyncNotConnectedError.ts","build/browser/typeorm/connection/error/CannotUseNamingStrategyNotConnectedError.ts","build/browser/typeorm/subscriber/Broadcaster.ts","build/browser/typeorm/schema-builder/SchemaBuilder.ts","build/browser/typeorm/metadata-args/error/EntityMetadataNotFound.ts","build/browser/typeorm/migration/MigrationInterface.ts","build/browser/typeorm/migration/Migration.ts","build/browser/typeorm/migration/MigrationExecutor.ts","build/browser/typeorm/connection/error/CannotRunMigrationNotConnectedError.ts","build/browser/typeorm/repository/error/CustomRepositoryDoesNotHaveEntityError.ts","build/browser/typeorm/repository/AbstractRepository.ts","build/browser/typeorm/repository/error/CustomRepositoryNotFoundError.ts","build/browser/typeorm/repository/error/CustomRepositoryReusedError.ts","build/browser/typeorm/repository/error/CustomRepositoryCannotInheritRepositoryError.ts","build/browser/typeorm/connection/Connection.ts","build/browser/typeorm/connection/error/ConnectionNotFoundError.ts","build/browser/typeorm/driver/mysql/MysqlQueryRunner.ts","build/browser/typeorm/driver/mysql/MysqlDriver.ts","build/browser/typeorm/connection/ConnectionOptions.ts","build/browser/typeorm/connection/error/MissingDriverError.ts","build/browser/typeorm/driver/postgres/PostgresQueryRunner.ts","build/browser/typeorm/driver/postgres/PostgresDriver.ts","build/browser/typeorm/connection/error/AlreadyHasActiveConnectionError.ts","build/browser/typeorm/driver/sqlite/SqliteQueryRunner.ts","build/browser/typeorm/driver/sqlite/SqliteDriver.ts","build/browser/typeorm/driver/oracle/OracleQueryRunner.ts","build/browser/typeorm/driver/oracle/OracleDriver.ts","build/browser/typeorm/connection/error/CannotDetermineConnectionOptionsError.ts","build/browser/typeorm/driver/websql/WebsqlQueryRunner.ts","build/browser/typeorm/driver/websql/WebsqlDriver.ts","build/browser/typeorm/connection/ConnectionManager.ts","build/browser/typeorm/container.ts","build/browser/typeorm/decorator/error/ColumnTypeUndefinedError.ts","build/browser/typeorm/decorator/error/GeneratedOnlyForPrimaryError.ts","build/browser/typeorm/decorator/columns/Column.ts","build/browser/typeorm/decorator/columns/CreateDateColumn.ts","build/browser/typeorm/decorator/columns/DiscriminatorColumn.ts","build/browser/typeorm/decorator/error/PrimaryColumnCannotBeNullableError.ts","build/browser/typeorm/decorator/columns/PrimaryGeneratedColumn.ts","build/browser/typeorm/decorator/columns/PrimaryColumn.ts","build/browser/typeorm/decorator/columns/UpdateDateColumn.ts","build/browser/typeorm/decorator/columns/VersionColumn.ts","build/browser/typeorm/decorator/listeners/AfterInsert.ts","build/browser/typeorm/decorator/listeners/AfterLoad.ts","build/browser/typeorm/decorator/listeners/AfterRemove.ts","build/browser/typeorm/decorator/listeners/AfterUpdate.ts","build/browser/typeorm/decorator/listeners/BeforeInsert.ts","build/browser/typeorm/decorator/listeners/BeforeRemove.ts","build/browser/typeorm/decorator/listeners/BeforeUpdate.ts","build/browser/typeorm/decorator/listeners/EventSubscriber.ts","build/browser/typeorm/decorator/options/IndexOptions.ts","build/browser/typeorm/decorator/options/JoinTableOptions.ts","build/browser/typeorm/decorator/options/EntityOptions.ts","build/browser/typeorm/decorator/relations/RelationCount.ts","build/browser/typeorm/decorator/relations/JoinColumn.ts","build/browser/typeorm/decorator/relations/JoinTable.ts","build/browser/typeorm/decorator/relations/ManyToMany.ts","build/browser/typeorm/decorator/relations/ManyToOne.ts","build/browser/typeorm/decorator/relations/OneToMany.ts","build/browser/typeorm/decorator/relations/OneToOne.ts","build/browser/typeorm/decorator/relations/RelationId.ts","build/browser/typeorm/decorator/entity/Entity.ts","build/browser/typeorm/decorator/entity/AbstractEntity.ts","build/browser/typeorm/decorator/entity/ClassEntityChild.ts","build/browser/typeorm/decorator/entity/ClosureEntity.ts","build/browser/typeorm/decorator/entity/EmbeddableEntity.ts","build/browser/typeorm/decorator/entity/SingleEntityChild.ts","build/browser/typeorm/decorator/entity/TableInheritance.ts","build/browser/typeorm/decorator/transaction/Transaction.ts","build/browser/typeorm/decorator/transaction/TransactionEntityManager.ts","build/browser/typeorm/decorator/tree/TreeLevelColumn.ts","build/browser/typeorm/decorator/tree/TreeParent.ts","build/browser/typeorm/decorator/tree/TreeChildren.ts","build/browser/typeorm/decorator/Index.ts","build/browser/typeorm/decorator/NamingStrategy.ts","build/browser/typeorm/decorator/Embedded.ts","build/browser/typeorm/decorator/DiscriminatorValue.ts","build/browser/typeorm/decorator/EntityRepository.ts","build/browser/typeorm/decorator/tables/Table.ts","build/browser/typeorm/decorator/tables/AbstractTable.ts","build/browser/typeorm/decorator/tables/ClassTableChild.ts","build/browser/typeorm/decorator/tables/ClosureTable.ts","build/browser/typeorm/decorator/tables/EmbeddableTable.ts","build/browser/typeorm/decorator/tables/SingleTableChild.ts","build/browser/typeorm/index.ts","build/browser/typeorm.ts","build/browser/typeorm/metadata/EntitySubscriberMetadata.ts","build/browser/typeorm/metadata/TargetMetadata.ts","build/browser/typeorm/metadata/PropertyMetadata.ts","build/browser/typeorm/metadata/RelationCountMetadata.ts","build/browser/typeorm/connection/error/CannotGetEntityManagerNotConnectedError.ts","build/browser/typeorm/connection/error/NoConnectionForRepositoryError.ts","build/browser/typeorm/driver/error/DriverPackageLoadError.ts","build/browser/typeorm/driver/error/DriverPoolingNotSupportedError.ts","build/browser/typeorm/metadata-builder/error/MetadataWithSuchNameAlreadyExistsError.ts","build/browser/typeorm/persistence/error/CascadesNotAllowedError.ts","build/browser/typeorm/persistence/error/PersistedEntityNotFoundError.ts"],"names":[],"mappings":"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","file":"typeorm-browser.js","sourcesContent":["/**\n * Driver type.\n */\nexport type DriverType = \"mysql\"|\"postgres\"|\"mariadb\"|\"sqlite\"|\"oracle\"|\"mssql\"|\"websql\";\n\n/**\n * Connectivity options used to connect to the database, and other database-driver-specific options.\n */\nexport interface DriverOptions {\n\n    /**\n     * Database type. This value is required.\n     */\n    readonly type: DriverType;\n\n    /**\n     * Connection url to where perform connection to.\n     */\n    readonly url?: string;\n\n    /**\n     * Database host.\n     */\n    readonly host?: string;\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number;\n\n    /**\n     * Database username.\n     */\n    readonly username?: string;\n\n    /**\n     * Database password.\n     */\n    readonly password?: string;\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string;\n\n    /**\n     * Schema name. (Only used in Postgres)\n     * default: \"public\"\n     */\n    readonly schemaName?: string;\n    \n    /**\n     * Connection SID (used for Oracle databases).\n     */\n    readonly sid?: string;\n\n    /**\n     * Storage type or path to the storage (used for SQLite databases).\n     */\n    readonly storage?: string;\n\n    /**\n     * Indicates if connection pooling should be used or not.\n     * Be default it is enabled if its supported by a platform. Set to false to disable it.\n     */\n    readonly usePool?: boolean;\n\n    /**\n     * Extra connection options to be passed to the driver.\n     */\n    readonly extra?: any;\n\n    /**\n     * Prefix to use on all tables of this connection in the database.\n     */\n    readonly tablesPrefix?: string;\n\n}\n","/**\n * All data types that column can be.\n */\nexport type ColumnType = \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\n                         \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";\n\n/**\n * All data types that column can be.\n */\nexport class ColumnTypes {\n\n    /**\n     * SQL VARCHAR type. Your class's property type should be a \"string\".\n     */\n    static STRING: ColumnType = \"string\";\n\n    /**\n     * SQL CLOB type. Your class's property type should be a \"string\".\n     */\n    static TEXT: ColumnType = \"text\";\n\n    /**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     */\n    static NUMBER: ColumnType = \"number\";\n\n    /**\n     * SQL INT type. Your class's property type should be a \"number\".\n     */\n    static INTEGER: ColumnType = \"integer\";\n\n    /**\n     * SQL INT type. Your class's property type should be a \"number\".\n     */\n    static INT: ColumnType = \"int\";\n\n    /**\n     * SQL SMALLINT type. Your class's property type should be a \"number\".\n     */\n    static SMALLINT: ColumnType = \"smallint\";\n\n    /**\n     * SQL BIGINT type. Your class's property type should be a \"number\".\n     */\n    static BIGINT: ColumnType = \"bigint\";\n\n    /**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     */\n    static FLOAT: ColumnType = \"float\";\n\n    /**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     */\n    static DOUBLE: ColumnType = \"double\";\n\n    /**\n     * SQL DECIMAL type. Your class's property type should be a \"string\".\n     */\n    static DECIMAL: ColumnType = \"decimal\";\n\n    /**\n     * SQL DATETIME type. Your class's property type should be a \"Date\" object.\n     */\n    static DATE: ColumnType = \"date\";\n\n    /**\n     * SQL TIME type. Your class's property type should be a \"Date\" object.\n     */\n    static TIME: ColumnType = \"time\";\n\n    /**\n     * SQL DATETIME/TIMESTAMP type. Your class's property type should be a \"Date\" object.\n     */\n    static DATETIME: ColumnType = \"datetime\";\n\n    /**\n     * SQL BOOLEAN type. Your class's property type should be a \"boolean\".\n     */\n    static BOOLEAN: ColumnType = \"boolean\";\n\n    /**\n     * SQL CLOB type. Your class's property type should be any Object.\n     */\n    static JSON: ColumnType = \"json\";\n\n    /**\n     * Postgres jsonb type. Your class's property type should be any Object.\n     */\n    static JSONB: ColumnType = \"jsonb\";\n\n    /**\n     * SQL CLOB type. Your class's property type should be array of string. Note: value in this column should not contain\n     * a comma (\",\") since this symbol is used to create a string from the array, using .join(\",\") operator.\n     */\n    static SIMPLE_ARRAY: ColumnType = \"simple_array\";\n\n    /**\n     * UUID type. Serialized to a string in typescript or javascript\n     */\n    static UUID: ColumnType = \"uuid\";\n\n    /**\n     * Checks if given type in a string format is supported by ORM.\n     */\n    static isTypeSupported(type: string) {\n        return this.supportedTypes.indexOf(<ColumnType> type) !== -1;\n    }\n\n    /**\n     * Returns list of all supported types by the ORM.\n     */\n    static get supportedTypes() {\n        return [\n            this.STRING,\n            this.TEXT,\n            this.NUMBER,\n            this.INTEGER,\n            this.INT,\n            this.SMALLINT,\n            this.BIGINT,\n            this.FLOAT,\n            this.DOUBLE,\n            this.DECIMAL,\n            this.DATE,\n            this.TIME,\n            this.DATETIME,\n            this.BOOLEAN,\n            this.JSON,\n            this.JSONB,\n            this.SIMPLE_ARRAY,\n            this.UUID\n        ];\n    }\n\n    /**\n     * Tries to guess a column type from the given function.\n     */\n    static determineTypeFromFunction(type: Function): ColumnType {\n        if (type instanceof Date) {\n            return ColumnTypes.DATETIME;\n\n        } else if (type instanceof Function) {\n            const typeName = (<any>type).name.toLowerCase();\n            switch (typeName) {\n                case \"number\":\n                    return ColumnTypes.NUMBER;\n                case \"boolean\":\n                    return ColumnTypes.BOOLEAN;\n                case \"string\":\n                    return ColumnTypes.STRING;\n                case \"date\":\n                    return ColumnTypes.DATETIME;\n                case \"object\":\n                    return ColumnTypes.JSON;\n            }\n\n        } else if (type instanceof Object) {\n            return ColumnTypes.JSON;\n\n        }\n        throw new Error(`Column type of ${type} cannot be determined.`);\n        // return undefined;\n    }\n\n    static typeToString(type: Function): string {\n        return (type as any).name.toLowerCase();\n    }\n\n    /**\n     * Checks if column type is numeric.\n     */\n    static isNumeric(type: ColumnType) {\n        return  type === ColumnTypes.NUMBER ||\n                type === ColumnTypes.INT ||\n                type === ColumnTypes.INTEGER ||\n                type === ColumnTypes.BIGINT ||\n                type === ColumnTypes.SMALLINT ||\n                type === ColumnTypes.DOUBLE ||\n                type === ColumnTypes.FLOAT;\n    }\n\n}","import {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Describes all column's options.\n */\nexport interface ColumnOptions {\n\n    /**\n     * Column type. Must be one of the value from the ColumnTypes class.\n     */\n    readonly type?: ColumnType;\n\n    /**\n     * Column name in the database.\n     */\n    readonly name?: string;\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    readonly length?: string|number;\n\n    /**\n     * Indicates if this column is PRIMARY.\n     * Same can be achieved if @PrimaryColumn decorator will be used.\n     */\n    readonly primary?: boolean;\n\n    /**\n     * Specifies if this column will use auto increment (sequence, generated identity).\n     * Note that only one column in entity can be marked as generated, and it must be a primary column.\n     * (todo: create validation logic for this condition)\n     */\n    readonly generated?: boolean;\n\n    /**\n     * Specifies if column's value must be unique or not.\n     */\n    readonly unique?: boolean;\n\n    /**\n     * Indicates if column's value can be set to NULL.\n     */\n    nullable?: boolean;\n\n    /**\n     * Column comment.\n     */\n    readonly comment?: string;\n\n    /**\n     * Default database value.\n     */\n    readonly default?: any;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    readonly precision?: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    readonly scale?: number;\n\n    /**\n     * Indicates if this date column will contain a timezone.\n     * Used only for date-typed column types.\n     * Note that timezone option is not supported by all databases (only postgres for now).\n     */\n    readonly timezone?: boolean;\n\n    /**\n     * Indicates if date object must be stored in given date's timezone.\n     * By default date is saved in UTC timezone.\n     * Works only with \"datetime\" columns.\n     */\n    readonly localTimezone?: boolean;\n\n}\n","import {ColumnOptions} from \"../decorator/options/ColumnOptions\";\nimport {ColumnMode} from \"../metadata/ColumnMetadata\";\n\n/**\n * Arguments for ColumnMetadata class.\n */\nexport interface ColumnMetadataArgs {\n\n    /**\n     * Class to which column is applied.\n     */\n    readonly target: Function|string|\"__virtual__\";\n\n    /**\n     * Class's property name to which column is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Class's property type (reflected) to which column is applied.\n     *\n     * todo: check when this is not set, because for the entity schemas we don't set it.\n     */\n    // readonly propertyType?: string;\n\n    /**\n     * Column mode in which column will work.\n     *\n     * todo: find name better then \"mode\".\n     */\n    readonly mode: ColumnMode;\n\n    /**\n     * Extra column options.\n     */\n    readonly options: ColumnOptions;\n\n}\n","/**\n * Table type. Tables can be abstract, closure, junction, embedded, etc.\n */\nexport type TableType = \"regular\"|\"abstract\"|\"junction\"|\"closure\"|\"closure-junction\"|\n    \"embeddable\"|\"single-table-child\"|\"class-table-child\";\n\n/**\n * Represents a class with constants - list of all possible table types.\n */\nexport class TableTypes {\n\n    /**\n     * All non-specific tables are just regular tables. Its a default table type.\n     */\n    static REGULAR: TableType = \"regular\";\n\n    /**\n     * This type is for the tables that does not exist in the database,\n     * but provide columns and relations for the tables of the child classes who inherit them.\n     */\n    static ABSTRACT: TableType = \"abstract\";\n\n    /**\n     * Junction table is a table automatically created by many-to-many relationship.\n     */\n    static JUNCTION: TableType = \"junction\";\n\n    /**\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\n     */\n    static CLOSURE: TableType = \"closure\";\n\n    /**\n     * This type is for tables that contain junction metadata of the closure tables.\n     */\n    static CLOSURE_JUNCTION: TableType = \"closure-junction\";\n\n    /**\n     * Embeddable tables are not stored in the database as separate tables.\n     * Instead their columns are embed into tables who owns them.\n     */\n    static EMBEDDABLE: TableType = \"embeddable\";\n\n    /**\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\n     */\n    static SINGLE_TABLE_CHILD: TableType = \"single-table-child\";\n\n    /**\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\n     */\n    static CLASS_TABLE_CHILD: TableType = \"class-table-child\";\n}","export type OrderByCondition = { [columnName: string]: \"ASC\"|\"DESC\" };\n","import {TableType} from \"../metadata/types/TableTypes\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\n\n/**\n * Arguments for TableMetadata class, helps to construct an TableMetadata object.\n */\nexport interface TableMetadataArgs {\n\n    /**\n     * Class to which table is applied.\n     * Function target is a table defined in the class.\n     * String target is a table defined in a json schema.\n     * \"__virtual__\" is a table defined without class (like junction tables).\n     */\n    readonly target: Function|string|\"__virtual__\";\n\n    /**\n     * Table's name. If name is not set then table's name will be generated from target's name.\n     */\n    readonly name?: string;\n\n    /**\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\n     */\n    readonly type: TableType;\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    readonly orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    readonly engine?: string;\n\n    /**\n     * Whether table must be synced during schema build or not\n     */\n    readonly skipSchemaSync?: boolean;\n\n}\n","/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nexport class EntityMetadataAlreadySetError extends Error {\n    name = \"EntityMetadataAlreadySetError\";\n\n    constructor(type: Function, target: Function|string|undefined, tableName: string|undefined) {\n        super();\n        const targetMessage = target ? ` for ${ target instanceof Function ? (target.constructor as any).name : target }` : \"\";\n        const tableNameMessage = tableName ? ` with ${ tableName } table name` : \"\";\n        this.message = \"Entity metadata\" + targetMessage + tableNameMessage + \" has been already set to this \" + (type.constructor as any).name;\n    }\n\n}","/**\n * Thrown when accessed to the class with entity metadata,\n * however on that time entity metadata is not set in the class.\n */\nexport class EntityMetadataNotSetError extends Error {\n    name = \"EntityMetadataNotSetError\";\n\n    constructor(type: Function, target: Function|string|undefined, tableName: string|undefined) {\n        super();\n        const targetMessage = target ? ` for ${ target instanceof Function ? (target.constructor as any).name : target }` : \"\";\n        const tableNameMessage = tableName ? ` with ${ tableName } table name` : \"\";\n        this.message = \"Entity metadata\" + targetMessage + tableNameMessage + \" is not set in \" + (type.constructor as any).name;\n    }\n\n}","import {EntityMetadata} from \"./EntityMetadata\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {TableType, TableTypes} from \"./types/TableTypes\";\nimport {EntityMetadataAlreadySetError} from \"./error/EntityMetadataAlreadySetError\";\nimport {EntityMetadataNotSetError} from \"./error/EntityMetadataNotSetError\";\n\n/**\n * TableMetadata contains all entity's table metadata and information.\n */\nexport class TableMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class to which metadata is applied.\n     * Function target is a table defined in the class.\n     * String target is a table defined in a json schema.\n     * \"__virtual__\" is a table defined without target class (like junction tables).\n     */\n    readonly target: Function|string|\"__virtual__\";\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    readonly _orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    readonly engine?: string;\n\n    /**\n     * Whether table must be synced during schema build or not\n     */\n    readonly skipSchemaSync?: boolean;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\n     */\n    private readonly tableType: TableType = \"regular\";\n\n    /**\n     * Table name in the database. If name is not set then table's name will be generated from target's name.\n     */\n    private readonly _name?: string;\n\n    /**\n     * EntityMetadata of this table metadata, where this table metadata contained.\n     */\n    private _entityMetadata?: EntityMetadata;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new TableMetadata based on the given arguments object.\n     */\n    constructor(args: TableMetadataArgs) {\n        this.target = args.target;\n        this.tableType = args.type;\n        this._name = args.name;\n        this._orderBy = args.orderBy;\n        this.engine = args.engine;\n        this.skipSchemaSync = args.skipSchemaSync;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Sets the entity metadata of this table metadata.\n     * Note that entity metadata can be set only once.\n     * Once you set it, you can't change it anymore.\n     */\n    set entityMetadata(metadata: EntityMetadata) {\n        if (this._entityMetadata)\n            throw new EntityMetadataAlreadySetError(TableMetadata, this.target, this._name);\n\n        this._entityMetadata = metadata;\n    }\n\n    /**\n     * Gets entity metadata of this table metadata.\n     * If entity metadata was not set then exception will be thrown.\n     */\n    get entityMetadata(): EntityMetadata {\n        if (!this._entityMetadata)\n            throw new EntityMetadataNotSetError(TableMetadata, this.target, this._name);\n\n        return this._entityMetadata;\n    }\n\n    /**\n     * Gets the table name without global table prefix.\n     * When querying table you need a table name with prefix, but in some scenarios,\n     * for example when you want to name a junction table that contains names of two other tables,\n     * you may want a table name without prefix.\n     */\n    get nameWithoutPrefix() {\n        if (this.isClosureJunction && this._name)\n            return this.entityMetadata.namingStrategy.closureJunctionTableName(this._name);\n\n        // otherwise generate table name from target's name\n        const name = this.target instanceof Function ? (this.target as any).name : this.target;\n        return this.entityMetadata.namingStrategy.tableName(name, this._name);\n    }\n\n    /**\n     * Table name in the database.\n     * This name includes global table prefix if it was set.\n     */\n    get name(): string {\n        if (this.entityMetadata.tablesPrefix)\n            return this.entityMetadata.namingStrategy.prefixTableName(this.entityMetadata.tablesPrefix, this.nameWithoutPrefix);\n\n        return this.nameWithoutPrefix;\n    }\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     * If default order by was not set, then returns undefined.\n     */\n    get orderBy(): OrderByCondition|undefined {\n        if (this._orderBy instanceof Function)\n            return this._orderBy(this.entityMetadata.createPropertiesMap());\n\n        return this._orderBy;\n    }\n\n    /**\n     * Checks if this table is regular.\n     * All non-specific tables are just regular tables. Its a default table type.\n     */\n    get isRegular() {\n        return this.tableType === TableTypes.REGULAR;\n    }\n\n    /**\n     * Checks if this table is abstract.\n     * This type is for the tables that does not exist in the database,\n     * but provide columns and relations for the tables of the child classes who inherit them.\n     */\n    get isAbstract() {\n        return this.tableType === TableTypes.ABSTRACT;\n    }\n\n    /**\n     * Checks if this table is abstract.\n     * Junction table is a table automatically created by many-to-many relationship.\n     */\n    get isJunction() {\n        return this.tableType === TableTypes.JUNCTION;\n    }\n\n    /**\n     * Checks if this table is a closure table.\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\n     */\n    get isClosure() {\n        return this.tableType === TableTypes.CLOSURE;\n    }\n\n    /**\n     * Checks if this table is a junction table of the closure table.\n     * This type is for tables that contain junction metadata of the closure tables.\n     */\n    get isClosureJunction() {\n        return this.tableType === TableTypes.CLOSURE_JUNCTION;\n    }\n\n    /**\n     * Checks if this table is an embeddable table.\n     * Embeddable tables are not stored in the database as separate tables.\n     * Instead their columns are embed into tables who owns them.\n     */\n    get isEmbeddable() {\n        return this.tableType === TableTypes.EMBEDDABLE;\n    }\n\n    /**\n     * Checks if this table is a single table child.\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\n     */\n    get isSingleTableChild() {\n        return this.tableType === TableTypes.SINGLE_TABLE_CHILD;\n    }\n\n    /**\n     * Checks if this table is a class table child.\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\n     */\n    get isClassTableChild() {\n        return this.tableType === TableTypes.CLASS_TABLE_CHILD;\n    }\n\n}\n","/**\n * All types that relation can be.\n */\nexport type RelationType = \"one-to-one\"|\"one-to-many\"|\"many-to-one\"|\"many-to-many\";\n\n/**\n * Provides a constants for each relation type.\n */\nexport class RelationTypes {\n    static ONE_TO_ONE: RelationType = \"one-to-one\";\n    static ONE_TO_MANY: RelationType = \"one-to-many\";\n    static MANY_TO_ONE: RelationType = \"many-to-one\";\n    static MANY_TO_MANY: RelationType = \"many-to-many\";\n}","import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {TableMetadata} from \"./TableMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\n\n/**\n * ON_DELETE type to be used to specify delete strategy when some relation is being deleted from the database.\n */\nexport type OnDeleteType = \"RESTRICT\"|\"CASCADE\"|\"SET NULL\";\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata;\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    readonly columns: ColumnMetadata[];\n\n    /**\n     * Table to which this foreign key is references.\n     */\n    readonly referencedTable: TableMetadata;\n\n    /**\n     * Array of referenced columns.\n     */\n    readonly referencedColumns: ColumnMetadata[];\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    readonly onDelete: OnDeleteType;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(columns: ColumnMetadata[],\n                referencedTable: TableMetadata,\n                referencedColumns: ColumnMetadata[],\n                onDelete?: OnDeleteType) {\n        this.columns = columns;\n        this.referencedTable = referencedTable;\n        this.referencedColumns = referencedColumns;\n        if (onDelete)\n            this.onDelete = onDelete;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the table name to which this foreign key is applied.\n     */\n    get tableName() {\n        return this.entityMetadata.table.name;\n    }\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    get referencedTableName() {\n        return this.referencedTable.name;\n    }\n\n    /**\n     * Gets foreign key name.\n     */\n    get name() {\n        return this.entityMetadata.namingStrategy.foreignKeyName(this.tableName, this.columnNames, this.referencedTable.name, this.referencedColumnNames);\n    }\n\n    /**\n     * Gets array of column names.\n     */\n    get columnNames(): string[] {\n        return this.columns.map(column => column.name);\n    }\n\n    /**\n     * Gets array of referenced column names.\n     */\n    get referencedColumnNames(): string[] {\n        return this.referencedColumns.map(column => column.name);\n    }\n\n}","/**\n * Describes column options.\n */\nexport interface JoinColumnOptions {\n\n    /**\n     * Name of the column.\n     */\n    readonly name?: string;\n\n    /**\n     * Name of the column in the entity to which this column is referenced.\n     */\n    readonly referencedColumnName?: string;\n\n}","import {JoinColumnOptions} from \"../decorator/options/JoinColumnOptions\";\n\n/**\n * Arguments for JoinTableMetadata class.\n */\nexport interface JoinTableMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Class's property name to which this column is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Name of the table that will be created to store values of the both tables (join table).\n     * By default is auto generated.\n     */\n    readonly name?: string;\n\n    /**\n     * First column of the join table.\n     */\n    readonly joinColumn?: JoinColumnOptions;\n\n    /**\n     * Second (inverse) column of the join table.\n     */\n    readonly inverseJoinColumn?: JoinColumnOptions;\n\n}\n","import {RelationMetadata} from \"./RelationMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\n\n/**\n * JoinTableMetadata contains all information about relation's join table.\n */\nexport class JoinTableMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Relation - owner of this join table metadata.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join table name.\n     */\n    private readonly _name?: string;\n\n    /**\n     * Join column name.\n     */\n    private readonly _joinColumnName: string;\n\n    /**\n     * Join column referenced column name.\n     */\n    private readonly _joinColumnReferencedColumnName: string;\n\n    /**\n     * Join column name of the inverse side.\n     */\n    private readonly _inverseJoinColumnName: string;\n\n    /**\n     * Join column referenced column name of the inverse side.\n     */\n    private readonly _inverseJoinColumnReferencedColumnName: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: JoinTableMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this._name = args.name;\n\n        if (args.joinColumn) {\n            if (args.joinColumn.name)\n                this._joinColumnName = args.joinColumn.name;\n            if (args.joinColumn.referencedColumnName)\n                this._joinColumnReferencedColumnName = args.joinColumn.referencedColumnName;\n        }\n\n        if (args.inverseJoinColumn) {\n            if (args.inverseJoinColumn.name)\n                this._inverseJoinColumnName = args.inverseJoinColumn.name;\n            if (args.inverseJoinColumn.referencedColumnName)\n                this._inverseJoinColumnReferencedColumnName = args.inverseJoinColumn.referencedColumnName;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join table name.\n     */\n    get name() {\n        if (this._name)\n            return this._name;\n\n        return this.relation.entityMetadata.namingStrategy.joinTableName(\n            this.relation.entityMetadata.table.nameWithoutPrefix,\n            this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\n            this.relation.propertyName,\n            this.relation.hasInverseSide ? this.relation.inverseRelation.propertyName : \"\",\n            this.referencedColumn.name,\n            this.inverseReferencedColumn.name\n        );\n    }\n\n    /**\n     * Join column name.\n     */\n    get joinColumnName() {\n        if (this._joinColumnName)\n            return this._joinColumnName;\n\n        return this.relation\n            .entityMetadata\n            .namingStrategy\n            .joinTableColumnName(\n                this.relation.entityMetadata.table.nameWithoutPrefix,\n                this.referencedColumn.name,\n                this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\n                this.inverseReferencedColumn.name\n            );\n    }\n\n    /**\n     * Join column name of the inverse side.\n     */\n    get inverseJoinColumnName() {\n        if (this._inverseJoinColumnName)\n            return this._inverseJoinColumnName;\n\n        return this.relation\n            .entityMetadata\n            .namingStrategy\n            .joinTableInverseColumnName(\n                this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\n                this.inverseReferencedColumn.name,\n                this.relation.entityMetadata.table.nameWithoutPrefix,\n                this.referencedColumn.name\n            );\n    }\n\n    /**\n     * Referenced join column.\n     */\n    get referencedColumn(): ColumnMetadata {\n        if (this._joinColumnReferencedColumnName) {\n            const referencedColumn = this.relation.entityMetadata.columns.find(column => column.name === this._joinColumnReferencedColumnName);\n            if (!referencedColumn)\n                throw new Error(`Referenced column ${this._joinColumnReferencedColumnName} was not found in entity ${this.name}`);\n\n            return referencedColumn;\n        }\n\n        if (this.relation.entityMetadata.primaryColumns.length > 1)\n            throw new Error(`Cannot automatically determine a referenced column of the \"${this.relation.entityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\n\n        return this.relation.entityMetadata.firstPrimaryColumn;\n    }\n\n    /**\n     * Referenced join column of the inverse side.\n     */\n    get inverseReferencedColumn(): ColumnMetadata {\n        if (this._inverseJoinColumnReferencedColumnName) {\n            const referencedColumn = this.relation.inverseEntityMetadata.columns.find(column => column.name === this._inverseJoinColumnReferencedColumnName);\n            if (!referencedColumn)\n                throw new Error(`Referenced column ${this._inverseJoinColumnReferencedColumnName} was not found in entity ${this.name}`);\n\n            return referencedColumn;\n        }\n\n        if (this.relation.inverseEntityMetadata.primaryColumns.length > 1)\n            throw new Error(`Cannot automatically determine inverse referenced column of the \"${this.relation.inverseEntityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\n\n        return this.relation.inverseEntityMetadata.firstPrimaryColumn;\n    }\n\n}","/**\n * Arguments for JoinColumnMetadata class.\n */\nexport interface JoinColumnMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Class's property name to which this column is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Name of the column.\n     */\n    readonly name?: string;\n\n    /**\n     * Name of the column in the entity to which this column is referenced.\n     */\n    readonly referencedColumnName?: string;\n\n}\n","import {RelationMetadata} from \"./RelationMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumnMetadata contains all information about relation's join column.\n */\nexport class JoinColumnMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Relation - owner of this join column metadata.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join column name.\n     */\n    private readonly _name: string|undefined;\n\n    /**\n     * Join column referenced column name.\n     */\n    private readonly referencedColumnName: string|undefined;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: JoinColumnMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this._name = args.name;\n        this.referencedColumnName = args.referencedColumnName;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join column name.\n     */\n    get name() {\n        return this.relation.entityMetadata.namingStrategy.joinColumnInverseSideName(this._name, this.relation.propertyName);\n    }\n\n    /**\n     * Referenced join column.\n     */\n    get referencedColumn(): ColumnMetadata {\n        if (this.referencedColumnName) {\n            const referencedColumn = this.relation.inverseEntityMetadata.allColumns.find(column => column.name === this.referencedColumnName);\n            if (!referencedColumn)\n                throw new Error(`Referenced column ${this.referencedColumnName} was not found in entity ${this.name}`);\n\n            return referencedColumn;\n        }\n\n        const inverseEntityMetadata = this.relation.inverseEntityMetadata;\n        const primaryColumns = inverseEntityMetadata.primaryColumnsWithParentIdColumns;\n\n        if (primaryColumns.length > 1)\n            throw new Error(`Cannot automatically determine a referenced column of the \"${inverseEntityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\n\n        return primaryColumns[0];\n    }\n\n}","import {OnDeleteType} from \"../../metadata/ForeignKeyMetadata\";\n\n// todo: add ON_UPDATE\n\n/**\n * Describes all relation's options.\n */\nexport interface RelationOptions {\n\n    /**\n     * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\n     * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\n     */\n    readonly cascadeAll?: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be inserted to the db.\n     */\n    readonly cascadeInsert?: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be updated in the db.\n     */\n    readonly cascadeUpdate?: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be remove from the db.\n     */\n    readonly cascadeRemove?: boolean;\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    readonly nullable?: boolean;\n\n    /**\n     * Database cascade action on delete.\n     */\n    readonly onDelete?: OnDeleteType;\n\n    /**\n     * Indicates if this relation will be a primary key.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     */\n    readonly primary?: boolean;\n\n    /**\n     * Set this relation to be lazy. Note: lazy relations are promises. When you call them they return promise\n     * which resolve relation result then. If your property's type is Promise then this relation is set to lazy automatically.\n     */\n    readonly lazy?: boolean;\n\n}","import {RelationType} from \"../metadata/types/RelationTypes\";\nimport {RelationOptions} from \"../decorator/options/RelationOptions\";\nimport {PropertyTypeInFunction, RelationTypeInFunction} from \"../metadata/RelationMetadata\";\n\n/**\n * Arguments for RelationMetadata class.\n */\nexport interface RelationMetadataArgs {\n\n    /**\n     * Class to which this relation is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * In the case if this relation is without a target, targetId must be specified.\n     * This is used for entity schemas without classes.\n     */\n    // readonly targetId?: string;\n\n    /**\n     * Class's property name to which this relation is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Indicates if this relation will be lazily loaded.\n     */\n    readonly isLazy: boolean;\n\n    /**\n     * Original (reflected) class's property type.\n     *\n     * todo: this can be empty for relations from entity schemas.\n     */\n    // readonly propertyType?: any;\n\n    /**\n     * Type of relation. Can be one of the value of the RelationTypes class.\n     */\n    readonly relationType: RelationType;\n\n    /**\n     * Type of the relation. This type is in function because of language specifics and problems with recursive\n     * referenced classes.\n     */\n    readonly type: RelationTypeInFunction;\n\n    /**\n     * Inverse side of the relation.\n     */\n    readonly inverseSideProperty?: PropertyTypeInFunction<any>;\n\n    /**\n     * Additional relation options.\n     */\n    readonly options: RelationOptions;\n\n    /**\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n     */\n    readonly isTreeParent?: boolean;\n\n    /**\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n     */\n    readonly isTreeChildren?: boolean;\n\n}","/**\n * Interface of the simple literal object with any string keys.\n */\nexport interface ObjectLiteral {\n    [key: string]: any;\n}\n","import {RelationTypes, RelationType} from \"./types/RelationTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {OnDeleteType} from \"./ForeignKeyMetadata\";\nimport {JoinTableMetadata} from \"./JoinTableMetadata\";\nimport {JoinColumnMetadata} from \"./JoinColumnMetadata\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Function that returns a type of the field. Returned value must be a class used on the relation.\n */\nexport type RelationTypeInFunction = ((type?: any) => Function)|Function|string; // todo: |string ?\n\n\n/**\n * Contains the name of the property of the object, or the function that returns this name.\n */\nexport type PropertyTypeInFunction<T> = string|((t: T) => string|any);\n\n\n/**\n * Contains all information about some entity's relation.\n */\nexport class RelationMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Its own entity metadata.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Related entity metadata.\n     */\n    inverseEntityMetadata: EntityMetadata;\n\n    /**\n     * Junction entity metadata.\n     */\n    junctionEntityMetadata: EntityMetadata;\n\n    /**\n     * Join table metadata.\n     */\n    joinTable: JoinTableMetadata;\n\n    /**\n     * Join column metadata.\n     */\n    joinColumn: JoinColumnMetadata;\n\n    /**\n     * The name of the field that will contain id or ids of this relation. This is used in the case if user\n     * wants to save relation without having to load related object, or in the cases if user wants to have id\n     * of the object it relates with, but don't want to load that object because of it. Also its used in the\n     * cases when user wants to add / remove / load in the many-to-many junction tables.\n     */\n    idField: string|undefined;\n\n    /**\n     * The name of the field that will contain count of the rows of the relation.\n     */\n    countField: string|undefined;\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n     */\n    readonly isTreeParent: boolean = false;\n\n    /**\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n     */\n    readonly isTreeChildren: boolean = false;\n\n    /**\n     * Relation type.\n     */\n    readonly relationType: RelationType;\n\n    /**\n     * Indicates if this relation will be a primary key.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     */\n    readonly isPrimary: boolean;\n\n    /**\n     * Indicates if this relation will be lazily loaded.\n     */\n    readonly isLazy: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be inserted to the db.\n     */\n    readonly isCascadeInsert: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be updated in the db.\n     */\n    readonly isCascadeUpdate: boolean;\n\n    /**\n     * If set to true then it means that related object can be allowed to be remove from the db.\n     */\n    readonly isCascadeRemove: boolean;\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    readonly isNullable: boolean = true;\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    readonly onDelete: OnDeleteType;\n\n    /**\n     * The real reflected property type.\n     */\n    // readonly propertyType: any;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * The type of the field.\n     */\n    private _type: RelationTypeInFunction;\n\n    /**\n     * Inverse side of the relation.\n     */\n    private _inverseSideProperty: PropertyTypeInFunction<any>;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: RelationMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n\n        if (args.inverseSideProperty)\n            this._inverseSideProperty = args.inverseSideProperty;\n        // if (args.propertyType)\n        //     this.propertyType = args.propertyType;\n        if (args.isLazy !== undefined)\n            this.isLazy = args.isLazy;\n        if (args.options.cascadeInsert || args.options.cascadeAll)\n            this.isCascadeInsert = true;\n        if (args.options.cascadeUpdate || args.options.cascadeAll)\n            this.isCascadeUpdate = true;\n        if (args.options.cascadeRemove || args.options.cascadeAll)\n            this.isCascadeRemove = true;\n        if (args.options.nullable !== undefined)\n            this.isNullable = args.options.nullable;\n        if (args.options.onDelete)\n            this.onDelete = args.options.onDelete;\n        if (args.options.primary !== undefined)\n            this.isPrimary = args.options.primary;\n        if (args.isTreeParent)\n            this.isTreeParent = true;\n        if (args.isTreeChildren)\n            this.isTreeChildren = true;\n\n        if (!this._type)\n            this._type = args.type;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Gets relation's entity target.\n     * Original target returns target of the class where relation is.\n     * This class can be an abstract class, but relation even is from that class,\n     * but its more related to a specific entity. That's why we need this field.\n     */\n    get entityTarget(): Function|string {\n        return this.entityMetadata.target;\n    }\n\n    /**\n     * Gets the name of column in the database.\n     * //Cannot be used with many-to-many relations since they don't have a column in the database.\n     * //Also only owning sides of the relations have this property.\n     */\n    get name(): string {\n        // if (!this.isOwning || this.isManyToMany)\n\n        if (this.isOwning) {\n            if (this.joinTable) {\n                return this.joinTable.joinColumnName;\n            } else if (this.joinColumn) {\n                return this.joinColumn.name;\n            }\n\n        } else if (this.hasInverseSide) {\n            if (this.inverseRelation.joinTable) {\n                return this.inverseRelation.joinTable.inverseJoinColumnName;\n            } else if (this.inverseRelation.joinColumn && this.inverseRelation.joinColumn.referencedColumn) {\n                return this.inverseRelation.joinColumn.referencedColumn.name;\n            }\n        }\n\n        throw new Error(`Relation name cannot be retrieved.`);\n    }\n\n    /**\n     * Gets the name of column to which this relation is referenced.\n     * //Cannot be used with many-to-many relations since all referenced are in the junction table.\n     * //Also only owning sides of the relations have this property.\n     */\n    get referencedColumnName(): string {\n        // if (!this.isOwning)\n        //     throw new Error(`Only owning side of the relations can have information about referenced column names.`);\n\n        // for many-to-one and owner one-to-one relations we get referenced column from join column\n        /*if (this.joinColumn && this.joinColumn.referencedColumn && this.joinColumn.referencedColumn.name)\n            return this.joinColumn.referencedColumn.name;\n\n        // for many-to-many relation we give referenced column depend of owner side\n        if (this.joinTable) { // need to check if this algorithm works correctly\n            if (this.isOwning) {\n                return this.joinTable.referencedColumn.name;\n            } else {\n                return this.joinTable.inverseReferencedColumn.name;\n            }\n        }*/\n\n        if (this.isOwning) {\n            if (this.joinTable) {\n                return this.joinTable.referencedColumn.name;\n\n            } else if (this.joinColumn) {\n                return this.joinColumn.referencedColumn.name;\n            }\n\n        } else if (this.hasInverseSide) {\n            if (this.inverseRelation.joinTable) {\n                return this.inverseRelation.joinTable.inverseReferencedColumn.name;\n            } else if (this.inverseRelation.joinColumn) {\n                return this.inverseRelation.joinColumn.name; // todo: didn't get this logic here\n            }\n        }\n\n        // this should not be possible, but anyway throw error\n        throw new Error(`Cannot get referenced column name of the relation ${this.entityMetadata.name}#${this.name}`);\n    }\n\n    /**\n     * Gets the column to which this relation is referenced.\n     */\n    get referencedColumn(): ColumnMetadata {\n        if (this.isOwning) {\n            if (this.joinTable) {\n                return this.joinTable.referencedColumn;\n\n            } else if (this.joinColumn) {\n                return this.joinColumn.referencedColumn;\n            }\n\n        } else if (this.hasInverseSide) {\n            if (this.inverseRelation.joinTable) {\n                return this.inverseRelation.joinTable.inverseReferencedColumn;\n            } else if (this.inverseRelation.joinColumn) {\n                return this.inverseRelation.joinColumn.referencedColumn;\n            }\n        }\n\n        // this should not be possible, but anyway throw error\n        throw new Error(`Cannot get referenced column of the relation ${this.entityMetadata.name}#${this.name}`);\n    }\n\n    /**\n     * Gets the property's type to which this relation is applied.\n     */\n    get type(): Function|string { // todo: when this can be a string?\n        return this._type instanceof Function ? (this._type as () => any)() : this._type;\n    }\n\n    /**\n     * Indicates if this side is an owner of this relation.\n     */\n    get isOwning() {\n        return  !!(this.isManyToOne ||\n                (this.isManyToMany && this.joinTable) ||\n                (this.isOneToOne && this.joinColumn));\n    }\n\n    /**\n     * Checks if this relation's type is \"one-to-one\".\n     */\n    get isOneToOne(): boolean {\n        return this.relationType === RelationTypes.ONE_TO_ONE;\n    }\n\n    /**\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\n     * Owner side means this side of relation has a join column in the table.\n     */\n    get isOneToOneOwner(): boolean {\n        return this.isOneToOne && this.isOwning;\n    }\n\n    /**\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n     * NOT owner side means this side of relation does not have a join column in the table.\n     */\n    get isOneToOneNotOwner(): boolean {\n        return this.isOneToOne && !this.isOwning;\n    }\n\n    /**\n     * Checks if this relation's type is \"one-to-many\".\n     */\n    get isOneToMany(): boolean {\n        return this.relationType === RelationTypes.ONE_TO_MANY;\n    }\n\n    /**\n     * Checks if this relation's type is \"many-to-one\".\n     */\n    get isManyToOne(): boolean {\n        return this.relationType === RelationTypes.MANY_TO_ONE;\n    }\n\n    /**\n     * Checks if this relation's type is \"many-to-many\".\n     */\n    get isManyToMany(): boolean {\n        return this.relationType === RelationTypes.MANY_TO_MANY;\n    }\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n     * Owner side means this side of relation has a join table.\n     */\n    get isManyToManyOwner(): boolean {\n        return this.isManyToMany && this.isOwning;\n    }\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n     * Not owner side means this side of relation does not have a join table.\n     */\n    get isManyToManyNotOwner(): boolean {\n        return this.isManyToMany && !this.isOwning;\n    }\n\n    /**\n     * Checks if inverse side is specified by a relation.\n     */\n    get hasInverseSide(): boolean {\n        return this.inverseEntityMetadata && this.inverseEntityMetadata.hasRelationWithPropertyName(this.inverseSideProperty);\n    }\n\n    /**\n     * Gets the property name of the inverse side of the relation.\n     */\n    get inverseSideProperty(): string { // todo: should be called inverseSidePropertyName ?\n\n        if (this._inverseSideProperty) {\n            return this.computeInverseSide(this._inverseSideProperty);\n\n        } else if (this.isTreeParent && this.entityMetadata.hasTreeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n\n        } else if (this.isTreeChildren && this.entityMetadata.hasTreeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Gets the relation metadata of the inverse side of this relation.\n     */\n    get inverseRelation(): RelationMetadata {\n        const relation = this.inverseEntityMetadata.findRelationWithPropertyName(this.inverseSideProperty);\n        if (!relation)\n            throw new Error(`Inverse side was not found in the relation ${this.entityMetadata.name}#${this.inverseSideProperty}`);\n\n        return relation;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Gets given entity's relation's value.\n     * Using of this method helps to access value of the lazy loaded relation.\n     */\n    getEntityValue(entity: ObjectLiteral): any {\n        return this.isLazy ? entity[\"__\" + this.propertyName + \"__\"] : entity[this.propertyName];\n    }\n\n    /**\n     * Checks if given entity has a value in a relation.\n     */\n    hasEntityValue(entity: ObjectLiteral): boolean {\n        return this.isLazy ? entity[\"__\" + this.propertyName + \"__\"] : entity[this.propertyName];\n    }\n\n    /**\n     * todo: lazy relations are not supported here? implement logic?\n     *\n     * examples:\n     *\n     * - isOneToOneNotOwner or isOneToMany:\n     *  Post has a Category.\n     *  Post is owner side.\n     *  Category is inverse side.\n     *  Post.category is mapped to Category.id\n     *\n     *  if from Post relation we are passing Category here,\n     *  it should return a post.category\n     */\n    getOwnEntityRelationId(ownEntity: ObjectLiteral): any {\n        if (this.isManyToManyOwner) {\n            return ownEntity[this.joinTable.referencedColumn.propertyName];\n\n        } else if (this.isManyToManyNotOwner) {\n            return ownEntity[this.inverseRelation.joinTable.inverseReferencedColumn.propertyName];\n\n        } else if (this.isOneToOneOwner || this.isManyToOne) {\n            return ownEntity[this.joinColumn.propertyName];\n\n        } else if (this.isOneToOneNotOwner || this.isOneToMany) {\n            return ownEntity[this.inverseRelation.joinColumn.referencedColumn.propertyName];\n        }\n    }\n\n    /**\n     *\n     * examples:\n     *\n     * - isOneToOneNotOwner or isOneToMany:\n     *  Post has a Category.\n     *  Post is owner side.\n     *  Category is inverse side.\n     *  Post.category is mapped to Category.id\n     *\n     *  if from Post relation we are passing Category here,\n     *  it should return a category.id\n     *\n     *  @deprecated Looks like this method does not make sence and does same as getOwnEntityRelationId ?\n     */\n    getInverseEntityRelationId(inverseEntity: ObjectLiteral): any {\n        if (this.isManyToManyOwner) {\n            return inverseEntity[this.joinTable.inverseReferencedColumn.propertyName];\n\n        } else if (this.isManyToManyNotOwner) {\n            return inverseEntity[this.inverseRelation.joinTable.referencedColumn.propertyName];\n\n        } else if (this.isOneToOneOwner || this.isManyToOne) {\n            return inverseEntity[this.joinColumn.referencedColumn.propertyName];\n\n        } else if (this.isOneToOneNotOwner || this.isOneToMany) {\n            return inverseEntity[this.inverseRelation.joinColumn.propertyName];\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Private Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\n     * either can be a function that accepts a map of properties with the object and returns one of them.\n     * Second approach is used to achieve type-safety.\n     */\n    private computeInverseSide(inverseSide: PropertyTypeInFunction<any>): string {\n        const ownerEntityPropertiesMap = this.inverseEntityMetadata.createPropertiesMap();\n        if (typeof inverseSide === \"function\")\n            return (<Function> inverseSide)(ownerEntityPropertiesMap);\n        if (typeof inverseSide === \"string\")\n            return <string> inverseSide;\n\n        // throw new Error(\"Cannot compute inverse side of the relation\");\n        return \"\";\n    }\n}","/**\n * Arguments for IndexMetadata class.\n */\nexport interface IndexMetadataArgs {\n\n    /**\n     * Class to which index is applied.\n     */\n    readonly target?: Function|string;\n\n    /**\n     * Index name.\n     */\n    readonly name?: string;\n\n    /**\n     * Columns combination to be used as index.\n     */\n    readonly columns: ((object: any) => any[])|string[];\n\n    /**\n     * Indicates if index must be unique or not.\n     */\n    readonly unique: boolean;\n\n}\n","import {EntityMetadata} from \"./EntityMetadata\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    readonly isUnique: boolean;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target?: Function|string;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Composite index name.\n     */\n    private readonly _name: string|undefined;\n\n    /**\n     * Columns combination to be used as index.\n     */\n    private readonly _columns: ((object: any) => any[])|string[];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: IndexMetadataArgs) {\n        this.target = args.target;\n        this._columns = args.columns;\n        this._name = args.name;\n        this.isUnique = args.unique;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Gets index's name.\n     */\n    get name() {\n        return this.entityMetadata.namingStrategy.indexName(this._name, this.entityMetadata.table.name, this.columns);\n    }\n\n    /**\n     * Gets the table name on which index is applied.\n     */\n    get tableName() {\n        return this.entityMetadata.table.name;\n    }\n\n    /**\n     * Gets the column names which are in this index.\n     */\n    get columns(): string[] {\n\n        // if columns already an array of string then simply return it\n        let columnPropertyNames: string[] = [];\n        if (this._columns instanceof Array) {\n            columnPropertyNames = this._columns;\n        } else {\n            // if columns is a function that returns array of field names then execute it and get columns names from it\n            const propertiesMap = this.entityMetadata.createPropertiesMap();\n            columnPropertyNames = this._columns(propertiesMap).map((i: any) => String(i));\n        }\n\n        const columns = this.entityMetadata.columns.filter(column => columnPropertyNames.indexOf(column.propertyName) !== -1);\n        const missingColumnNames = columnPropertyNames.filter(columnPropertyName => !this.entityMetadata.columns.find(column => column.propertyName === columnPropertyName));\n        if (missingColumnNames.length > 0) {\n            // console.log(this.entityMetadata.columns);\n            throw new Error(`Index ${this._name ? \"\\\"\" + this._name + \"\\\" \" : \"\"}contains columns that are missing in the entity: ` + missingColumnNames.join(\", \"));\n        }\n\n        return columns.map(column => column.name);\n    }\n\n}","/**\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\n * generated.\n */\nexport interface NamingStrategyInterface {\n\n    /**\n     * Naming strategy name.\n     */\n    name?: string;\n\n    /**\n     * Gets the table name from the given class name.\n     */\n    tableName(className: string, customName?: string): string;\n\n    /**\n     * Gets the table's column name from the given property name.\n     */\n    columnName(propertyName: string, customName?: string): string;\n\n    /**\n     * Gets the embedded's column name from the given property name.\n     */\n    embeddedColumnName(embeddedPropertyName: string, columnPropertyName: string, columnCustomName?: string): string;\n\n    /**\n     * Gets the table's relation name from the given property name.\n     */\n    relationName(propertyName: string): string;\n\n    /**\n     * Gets the name of the index - simple and compose index.\n     */\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string;\n\n    /**\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\n     */\n    joinColumnInverseSideName(joinColumnName: string|undefined, propertyName: string): string;\n\n    /**\n     * Gets the name of the join table used in the many-to-many relations.\n     */\n    joinTableName(firstTableName: string,\n                  secondTableName: string,\n                  firstPropertyName: string,\n                  secondPropertyName: string,\n                  firstColumnName: string,\n                  secondColumnName: string): string;\n\n    /**\n     * Gets the name of the column used for columns in the junction tables.\n     */\n    joinTableColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string;\n\n    /**\n     * Gets the name of the column used for second column name in the junction tables.\n     */\n    joinTableInverseColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string;\n\n    /**\n     * Gets the name for the closure junction table.\n     */\n    closureJunctionTableName(tableName: string): string;\n\n    /**\n     * Gets the name of the foreign key.\n     */\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string;\n\n    /**\n     * Gets the column name of the column with foreign key to the parent table used in the class table inheritance.\n     */\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string;\n\n    /**\n     * Adds prefix to the table.\n     */\n    prefixTableName(prefix: string, originalTableName: string): string;\n\n}","import {EntityMetadata} from \"./EntityMetadata\";\nimport {TableMetadata} from \"./TableMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\n\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Its own entity metadata.\n     */\n    entityMetadata: EntityMetadata;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Property name on which this embedded is attached.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Embeddable table.\n     */\n    readonly table: TableMetadata;\n\n    /**\n     * Embeddable table's columns.\n     */\n    readonly columns: ColumnMetadata[];\n\n    /**\n     * Embedded type.\n     */\n    readonly type: Function;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(type: Function, propertyName: string, table: TableMetadata, columns: ColumnMetadata[]) {\n        this.type = type;\n        this.propertyName = propertyName;\n        this.table = table;\n        this.columns = columns;\n        this.columns.forEach(column => {\n            column.embeddedMetadata = this;\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new embedded object.\n     */\n    create() {\n        return new (this.type as any);\n    }\n\n}","import {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {TableMetadata} from \"../metadata/TableMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\n\n/**\n * Arguments for EntityMetadata class.\n */\nexport interface EntityMetadataArgs {\n\n    readonly junction: boolean;\n    readonly target: Function|string;\n    readonly tablesPrefix?: string;\n    readonly inheritanceType?: \"single-table\"|\"class-table\";\n    readonly discriminatorValue?: string;\n    readonly namingStrategy: NamingStrategyInterface;\n    readonly tableMetadata: TableMetadata;\n    readonly columnMetadatas?: ColumnMetadata[];\n    readonly relationMetadatas?: RelationMetadata[];\n    readonly indexMetadatas?: IndexMetadata[];\n    readonly foreignKeyMetadatas?: ForeignKeyMetadata[];\n    readonly embeddedMetadatas?: EmbeddedMetadata[];\n\n}\n","/**\n */\nexport class Alias {\n    isMain: boolean;\n    name: string;\n    target: Function|string;\n    parentPropertyName: string;\n    parentAliasName: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    get selection() {\n        return this.parentAliasName + \".\" + this.parentPropertyName;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {Alias} from \"./Alias\";\nimport {Connection} from \"../../connection/Connection\";\n\n/**\n */\nexport class AliasMap {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    aliases: Alias[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    addMainAlias(alias: Alias) {\n        if (this.hasMainAlias)\n            this.aliases.splice(this.aliases.indexOf(this.mainAlias), 1);\n\n        alias.isMain = true;\n        this.aliases.push(alias);\n    }\n\n    addAlias(alias: Alias) {\n        this.aliases.push(alias);\n    }\n\n    get hasMainAlias() {\n        return !!this.aliases.find(alias => alias.isMain);\n    }\n\n    get mainAlias() {\n        const alias = this.aliases.find(alias => alias.isMain);\n        if (!alias)\n            throw new Error(`Main alias is not set.`);\n\n        return alias;\n    }\n\n    findAliasByName(name: string) {\n        return this.aliases.find(alias => alias.name === name);\n    }\n\n    findAliasByParent(parentAliasName: string, parentPropertyName: string) {\n        return this.aliases.find(alias => {\n            return alias.parentAliasName === parentAliasName && alias.parentPropertyName === parentPropertyName;\n        });\n    }\n\n    getEntityMetadataByAlias(alias: Alias): EntityMetadata|undefined {\n        if (alias.target) {\n            // todo: use connection.getMetadata instead?\n            return this.connection.getMetadata(alias.target);\n\n        } else if (alias.parentAliasName && alias.parentPropertyName) {\n\n            const parentAlias = this.findAliasByName(alias.parentAliasName);\n            if (!parentAlias)\n                throw new Error(`Alias \"${alias.parentAliasName}\" was not found`);\n\n            const parentEntityMetadata = this.getEntityMetadataByAlias(parentAlias);\n            if (!parentEntityMetadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + alias.name);\n\n            if (!parentEntityMetadata.hasRelationWithPropertyName(alias.parentPropertyName))\n                throw new Error(\"Relation metadata for \" + alias.parentAliasName + \"#\" + alias.parentPropertyName + \" was not found.\");\n\n            const relation = parentEntityMetadata.findRelationWithPropertyName(alias.parentPropertyName);\n            return relation.inverseEntityMetadata;\n        }\n\n        return undefined;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\n\nexport class OrmUtils {\n\n    static groupBy<T, R>(array: T[], propertyCallback: (item: T) => R): { id: R, items: T[] }[] {\n        return array.reduce((groupedArray, value) => {\n            const key = propertyCallback(value);\n            let grouped = groupedArray.find(i => i.id === key);\n            if (!grouped) {\n                grouped = { id: key, items: [] };\n                groupedArray.push(grouped);\n            }\n            grouped.items.push(value);\n            return groupedArray;\n        }, [] as Array<{ id: R, items: T[] }>);\n    }\n\n    /**\n     * Transforms given value into boolean value.\n     */\n    static toBoolean(value: any): boolean {\n        if (typeof value === \"boolean\")\n            return value;\n\n        if (typeof value === \"string\")\n            return value === \"true\" || value === \"1\";\n\n        if (typeof value === \"number\")\n            return value > 0;\n\n        return false;\n    }\n\n    /**\n     * Composes an object from the given array of keys and values.\n     */\n    static zipObject(keys: any[], values: any[]): ObjectLiteral {\n        return keys.reduce((object, column, index) => {\n            object[column] = values[index];\n            return object;\n        }, {} as ObjectLiteral);\n    }\n\n}","import {AliasMap} from \"../alias/AliasMap\";\nimport {Alias} from \"../alias/Alias\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Driver} from \"../../driver/Driver\";\nimport {JoinMapping, RelationCountMeta} from \"../QueryBuilder\";\n\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nexport class RawSqlResultsToEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private driver: Driver,\n                private aliasMap: AliasMap,\n                private joinMappings: JoinMapping[],\n                private relationCountMetas: RelationCountMeta[],\n                private enableRelationIdValues: boolean) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform(rawSqlResults: any[]): any[] {\n        // console.log(\"rawSqlResults: \", rawSqlResults);\n        return this.groupAndTransform(rawSqlResults, this.aliasMap.mainAlias);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    private groupAndTransform(rawSqlResults: any[], alias: Alias) {\n\n        const metadata = this.aliasMap.getEntityMetadataByAlias(alias);\n        if (!metadata)\n            throw new Error(\"Cannot get entity metadata for the given alias \" + alias.name);\n\n        const groupedResults = OrmUtils.groupBy(rawSqlResults, result => {\n            if (!metadata) return;\n            return metadata.primaryColumnsWithParentIdColumns.map(column => result[alias.name + \"_\" + column.name]).join(\"_\"); // todo: check it\n        });\n        // console.log(\"groupedResults: \", groupedResults);\n        return groupedResults\n            .map(group => {\n                if (!metadata) return;\n                return this.transformIntoSingleResult(group.items, alias, metadata);\n            })\n            .filter(res => !!res);\n    }\n\n\n    /**\n     * Transforms set of data results into single entity.\n     */\n    private transformIntoSingleResult(rawSqlResults: any[], alias: Alias, metadata: EntityMetadata) {\n        const entity: any = metadata.create();\n        let hasData = false;\n\n        // console.log(rawSqlResults);\n\n        // add special columns that contains relation ids\n        if (this.enableRelationIdValues) {\n            metadata.columns\n                .filter(column => !!column.relationMetadata)\n                .forEach(column => {\n                    const valueInObject = rawSqlResults[0][alias.name + \"_\" + column.name]; // we use zero index since its grouped data\n                    if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {\n                        const value = this.driver.prepareHydratedValue(valueInObject, column);\n                        entity[column.propertyName] = value;\n                        hasData = true;\n                    }\n                });\n        } // */\n\n        this.joinMappings\n            .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.parentAliasName && joinMapping.alias.target)\n            .map(joinMapping => {\n                const relatedEntities = this.groupAndTransform(rawSqlResults, joinMapping.alias);\n                const isResultArray = joinMapping.isMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result && (!isResultArray || result.length > 0)) {\n                    entity[joinMapping.propertyName] = result;\n                    hasData = true;\n                }\n            });\n\n        // get value from columns selections and put them into object\n        metadata.columns.forEach(column => {\n            const columnName = column.name;\n            const valueInObject = rawSqlResults[0][alias.name + \"_\" + columnName]; // we use zero index since its grouped data\n            if (valueInObject !== undefined && valueInObject !== null && column.propertyName && !column.isVirtual && !column.isParentId && !column.isDiscriminator) {\n                const value = this.driver.prepareHydratedValue(valueInObject, column);\n\n                if (column.isInEmbedded) {\n                    if (!entity[column.embeddedProperty])\n                        entity[column.embeddedProperty] = column.embeddedMetadata.create();\n\n                    entity[column.embeddedProperty][column.propertyName] = value;\n                } else {\n                    entity[column.propertyName] = value;\n                }\n                hasData = true;\n            }\n        });\n\n        // add parent tables metadata\n        // console.log(rawSqlResults);\n        if (metadata.parentEntityMetadata) {\n            metadata.parentEntityMetadata.columns.forEach(column => {\n                const columnName = column.name;\n                const valueInObject = rawSqlResults[0][\"parentIdColumn_\" + metadata.parentEntityMetadata.table.name + \"_\" + columnName]; // we use zero index since its grouped data\n                if (valueInObject !== undefined && valueInObject !== null && column.propertyName && !column.isVirtual && !column.isParentId && !column.isDiscriminator) {\n                    const value = this.driver.prepareHydratedValue(valueInObject, column);\n\n                    if (column.isInEmbedded) {\n                        if (!entity[column.embeddedProperty])\n                            entity[column.embeddedProperty] = column.embeddedMetadata.create();\n\n                        entity[column.embeddedProperty][column.propertyName] = value;\n                    } else {\n                        entity[column.propertyName] = value;\n                    }\n                    hasData = true;\n                }\n            });\n        }\n\n        // if relation is loaded then go into it recursively and transform its values too\n        metadata.relations.forEach(relation => {\n            const relationAlias = this.aliasMap.findAliasByParent(alias.name, relation.propertyName);\n            if (relationAlias) {\n                const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"join\" && joinMapping.alias === relationAlias);\n                const relatedEntities = this.groupAndTransform(rawSqlResults, relationAlias);\n                const isResultArray = relation.isManyToMany || relation.isOneToMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result) {\n                    let propertyName = relation.propertyName;\n                    if (joinMapping) {\n                        propertyName = joinMapping.propertyName;\n                    }\n\n                    if (relation.isLazy) {\n                        entity[\"__\" + propertyName + \"__\"] = result;\n                    } else {\n                        entity[propertyName] = result;\n                    }\n\n                    if (!isResultArray || result.length > 0)\n                        hasData = true;\n                }\n            }\n\n            // if relation has id field then relation id/ids to that field.\n            if (relation.isManyToMany) {\n                if (relationAlias) {\n                    const ids: any[] = [];\n                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"relationId\" && joinMapping.alias === relationAlias);\n\n                    if (relation.idField || joinMapping) {\n                        const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;\n                        const junctionMetadata = relation.junctionEntityMetadata;\n                        const columnName = relation.isOwning ? junctionMetadata.columns[1].name : junctionMetadata.columns[0].name;\n\n                        rawSqlResults.forEach(results => {\n                            if (relationAlias) {\n                                const resultsKey = relationAlias.name + \"_\" + columnName;\n                                const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);\n                                if (value !== undefined && value !== null)\n                                    ids.push(value);\n                            }\n                        });\n\n                        if (ids && ids.length)\n                            entity[propertyName] = ids;\n                    }\n                }\n            } else if (relation.idField) {\n                const relationName = relation.name;\n                entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + \"_\" + relationName], relation.referencedColumn);\n            }\n\n            // if relation counter\n            this.relationCountMetas.forEach(joinMeta => {\n                if (joinMeta.alias === relationAlias) {\n                    // console.log(\"relation count was found for relation: \", relation);\n                    // joinMeta.entity = entity;\n                    joinMeta.entities.push({ entity: entity, metadata: metadata });\n                    // console.log(joinMeta);\n                    // console.log(\"---------------------\");\n                }\n            });\n        });\n\n        return hasData ? entity : null;\n    }\n\n}","/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nexport class ConnectionIsNotSetError extends Error {\n    name = \"ConnectionIsNotSetError\";\n\n    constructor(dbType: string) {\n        super();\n        this.message = `Connection with ${dbType} database is not established. Check connection configuration.`;\n    }\n\n}","/**\n * Represents a single connection to a database.\n */\nexport interface DatabaseConnection {\n\n    /**\n     * Id of the connection.\n     */\n    readonly id: number;\n\n    /**\n     * Native driver's connection object.\n     */\n    readonly connection: any;\n\n    /**\n     * Connection's transaction instance.\n     */\n    transaction?: any;\n\n    /**\n     * Indicates if transaction is active for this connection.\n     */\n    isTransactionActive: boolean;\n\n    /**\n     * Special function that holds a connection release logic.\n     * Releases connection when its called.\n     * After releasing connection cannot be used anymore.\n     */\n    releaseCallback?: () => Promise<void>;\n\n}","/**\n * Thrown when required driver's package is not installed.\n */\nexport class DriverPackageNotInstalledError extends Error {\n    name = \"DriverPackageNotInstalledError\";\n\n    constructor(driverName: string, packageName: string) {\n        super();\n        this.message = `${driverName} package has not been found installed. Try to install it: npm install ${packageName} --save`;\n    }\n\n}","import {DriverOptions} from \"./DriverOptions\";\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: DriverOptions, buildOptions?: { useSid: boolean }): DriverOptions {\n        if (options.url) {\n            const parsedUrl = this.parseConnectionUrl(options.url);\n            if (buildOptions && buildOptions.useSid) {\n                const urlDriverOptions: DriverOptions = {\n                    type: options.type,\n                    host: parsedUrl.host,\n                    username: parsedUrl.username,\n                    password: parsedUrl.password,\n                    port: parsedUrl.port,\n                    sid: parsedUrl.database\n                };\n                return Object.assign(urlDriverOptions, options);\n\n            } else {\n                const urlDriverOptions: DriverOptions = {\n                    type: options.type,\n                    host: parsedUrl.host,\n                    username: parsedUrl.username,\n                    password: parsedUrl.password,\n                    port: parsedUrl.port,\n                    database: parsedUrl.database\n                };\n                return Object.assign(urlDriverOptions, options);\n            }\n        }\n        return Object.assign({}, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        const [usernameAndPassword, hostAndPort] = base.split(\"@\");\n        const [username, password] = usernameAndPassword.split(\":\");\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            host: host,\n            username: username,\n            password: password,\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n\n}","/**\n * Logging options.\n */\nexport interface LoggerOptions {\n\n    /**\n     * Some specific logger to be used. By default it is a console.\n     */\n    readonly logger?: (level: string, message: any) => void;\n\n    /**\n     * Set to true if you want to log every executed query.\n     */\n    readonly logQueries?: boolean;\n\n    /**\n     * Set to true if you want to log only failed query.\n     */\n    readonly logOnlyFailedQueries?: boolean;\n\n    /**\n     * Set to true if you want to log error of the failed query.\n     */\n    readonly logFailedQueryError?: boolean;\n\n    /**\n     * If set to true then schema creation logs will be logged.\n     */\n    readonly logSchemaCreation?: boolean;\n\n}","/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        return window;\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormilize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n}","import {LoggerOptions} from \"./LoggerOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\n\n/**\n * Performs logging of the events in TypeORM.\n */\nexport class Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[]) {\n        if (this.options.logQueries ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"log\", `executing query: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\n    }\n\n    /**\n     * Logs query that failed.\n     */\n    logFailedQuery(query: string, parameters?: any[]) {\n        if (this.options.logQueries ||\n            this.options.logOnlyFailedQueries ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"error\", `query failed: ${query}${parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\"}`);\n    }\n\n    /**\n     * Logs failed query's error.\n     */\n    logQueryError(error: any) {\n        if (this.options.logFailedQueryError ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"error\", \"error during executing query:\" + error);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string) {\n        if (this.options.logSchemaCreation ||\n            PlatformTools.getEnvVariable(\"LOGGER_CLI_SCHEMA_SYNC\"))\n            this.log(\"info\", message);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\"|\"error\", message: any) {\n        if (!this.options) return;\n\n        if (this.options.logger) {\n            this.options.logger(level, message);\n        } else {\n            switch (level) {\n                case \"log\":\n                    console.log(message);\n                    break;\n                case \"info\":\n                    console.info(message);\n                    break;\n                case \"warn\":\n                    console.warn(message);\n                    break;\n                case \"error\":\n                    console.error(message);\n                    break;\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}","/**\n * Thrown when transaction is already started and user tries to run it again.\n */\nexport class TransactionAlreadyStartedError extends Error {\n    name = \"TransactionAlreadyStartedError\";\n\n    constructor() {\n        super();\n        this.message = `Transaction already started for the given connection, commit current transaction before starting a new one.`;\n    }\n\n}","/**\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\n */\nexport class TransactionNotStartedError extends Error {\n    name = \"TransactionNotStartedError\";\n\n    constructor() {\n        super();\n        this.message = `Transaction is not started yet, start transaction before committing or rolling it back.`;\n    }\n\n}","/**\n * Thrown if some data type is not supported by a driver.\n */\nexport class DataTypeNotSupportedByDriverError extends Error {\n    name = \"DataTypeNotSupportedByDriverError\";\n\n    constructor(dataType: string, driverName: string) {\n        super();\n        this.message = `Specified type (${dataType}) is not supported by ${driverName} driver.`;\n    }\n\n}","import {IndexMetadata} from \"../../metadata/IndexMetadata\";\n\n/**\n * Database's table index stored in this class.\n */\nexport class IndexSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table name that contains this unique index.\n     */\n    tableName: string;\n\n    /**\n     * Index name.\n     */\n    name: string;\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[];\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(tableName: string, name: string, columnNames: string[], isUnique: boolean) {\n        this.tableName = tableName;\n        this.name = name;\n        this.columnNames = columnNames;\n        this.isUnique = isUnique;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone() {\n        return new IndexSchema(this.tableName, this.name, this.columnNames.map(name => name), this.isUnique);\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata: IndexMetadata): IndexSchema {\n        return new IndexSchema(\n            indexMetadata.entityMetadata.table.name,\n            indexMetadata.name,\n            indexMetadata.columns,\n            indexMetadata.isUnique\n        );\n    }\n\n}","import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class ForeignKeySchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the table which contains this foreign key.\n     */\n    name: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[];\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[];\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string,\n                columnNames: string[],\n                referencedColumnNames: string[],\n                referencedTable: string,\n                onDelete?: string) {\n\n        this.name = name;\n        this.columnNames = columnNames;\n        this.referencedColumnNames = referencedColumnNames;\n        this.referencedTableName = referencedTable;\n        this.onDelete = onDelete;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone() {\n        return new ForeignKeySchema(\n            this.name,\n            this.columnNames,\n            this.referencedColumnNames,\n            this.referencedTableName\n        );\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new foreign schema from the given foreign key metadata.\n     */\n    static create(metadata: ForeignKeyMetadata) {\n        return new ForeignKeySchema(\n            metadata.name,\n            metadata.columnNames,\n            metadata.referencedColumnNames,\n            metadata.referencedTableName,\n            metadata.onDelete\n        );\n    }\n\n}","/**\n * Primary key from the database stored in this class.\n */\nexport class PrimaryKeySchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Key name.\n     */\n    name: string;\n\n    /**\n     * Column to which this primary key is bind.\n     */\n    columnName: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string, columnName: string) {\n        this.name = name;\n        this.columnName = columnName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this primary key with exactly same properties.\n     */\n    clone() {\n        return new PrimaryKeySchema(this.name, this.columnName);\n    }\n\n}","import {ColumnSchema} from \"./ColumnSchema\";\nimport {IndexSchema} from \"./IndexSchema\";\nimport {ForeignKeySchema} from \"./ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"./PrimaryKeySchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Table schema in the database represented in this class.\n */\nexport class TableSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table name.\n     */\n    name: string;\n\n    /**\n     * Table columns.\n     */\n    columns: ColumnSchema[] = [];\n\n    /**\n     * Table indices.\n     */\n    indices: IndexSchema[] = [];\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: ForeignKeySchema[] = [];\n\n    /**\n     * Table primary keys.\n     */\n    primaryKeys: PrimaryKeySchema[] = [];\n\n    /**\n     * Indicates if table schema was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new table schemas.\n     */\n    justCreated: boolean = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string, columns?: ColumnSchema[]|ObjectLiteral[], justCreated?: boolean) {\n        this.name = name;\n        if (columns) {\n            this.columns = (columns as any[]).map(column => {\n                if (column instanceof ColumnSchema) {\n                    return column;\n                } else {\n                    return new ColumnSchema(column);\n                }\n            });\n        }\n\n        if (justCreated !== undefined)\n            this.justCreated = justCreated;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets only those primary keys that does not\n     */\n    get primaryKeysWithoutGenerated(): PrimaryKeySchema[] {\n        const generatedColumn = this.columns.find(column => column.isGenerated);\n        if (!generatedColumn)\n            return this.primaryKeys;\n\n        return this.primaryKeys.filter(primaryKey => {\n            return primaryKey.columnName !== generatedColumn.name;\n        });\n    }\n\n    get hasGeneratedColumn(): boolean {\n        return !!this.columns.find(column => column.isGenerated);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table schema to a new table schema with all properties cloned.\n     */\n    clone(): TableSchema {\n        const cloned = new TableSchema(this.name);\n        cloned.columns = this.columns.map(column => column.clone());\n        cloned.indices = this.indices.map(index => index.clone());\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\n        return cloned;\n    }\n\n    /**\n     * Adds column schemas.\n     */\n    addColumns(columns: ColumnSchema[]) {\n        this.columns = this.columns.concat(columns);\n    }\n\n    /**\n     * Replaces given column.\n     */\n    replaceColumn(oldColumn: ColumnSchema, newColumn: ColumnSchema) {\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\n    }\n\n    /**\n     * Removes a column schema from this table schema.\n     */\n    removeColumn(columnToRemove: ColumnSchema) {\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n\n    /**\n     * Remove all column schemas from this table schema.\n     */\n    removeColumns(columns: ColumnSchema[]) {\n        columns.forEach(column => this.removeColumn(column));\n    }\n\n    /**\n     * Adds all given primary keys.\n     */\n    addPrimaryKeys(addedKeys: PrimaryKeySchema[]) {\n        addedKeys.forEach(key => this.primaryKeys.push(key));\n    }\n\n    /**\n     * Removes all given primary keys.\n     */\n    removePrimaryKeys(droppedKeys: PrimaryKeySchema[]) {\n        droppedKeys.forEach(key => {\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\n        });\n    }\n\n    /**\n     * Removes primary keys of the given columns.\n     */\n    removePrimaryKeysOfColumns(columns: ColumnSchema[]) {\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\n            return !columns.find(column => column.name === primaryKey.columnName);\n        });\n    }\n\n    /**\n     * Adds foreign key schemas.\n     */\n    addForeignKeys(foreignKeys: ForeignKeySchema[]) {\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\n    }\n\n    /**\n     * Removes foreign key from this table schema.\n     */\n    removeForeignKey(removedForeignKey: ForeignKeySchema) {\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n\n    /**\n     * Removes all foreign keys from this table schema.\n     */\n    removeForeignKeys(dbForeignKeys: ForeignKeySchema[]) {\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\n    }\n\n    /**\n     * Removes index schema from this table schema.\n     */\n    removeIndex(indexSchema: IndexSchema) {\n        const index = this.indices.find(index => index.name === indexSchema.name);\n        if (index)\n            this.indices.splice(this.indices.indexOf(index), 1);\n    }\n\n    /**\n     * Differentiate columns of this table schema and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(queryRunner: QueryRunner, columnMetadatas: ColumnMetadata[]): ColumnSchema[] {\n        return this.columns.filter(columnSchema => {\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.name === columnSchema.name);\n            if (!columnMetadata)\n                return false; // we don't need new columns, we only need exist and changed\n\n            return  columnSchema.name !== columnMetadata.name ||\n                    columnSchema.type !== queryRunner.normalizeType(columnMetadata) ||\n                    columnSchema.comment !== columnMetadata.comment ||\n                    (!columnSchema.isGenerated && !queryRunner.compareDefaultValues(columnMetadata.default, columnSchema.default)) || // we included check for generated here, because generated columns already can have default values\n                    columnSchema.isNullable !== columnMetadata.isNullable ||\n                    columnSchema.isUnique !== columnMetadata.isUnique ||\n                    // columnSchema.isPrimary !== columnMetadata.isPrimary ||\n                    columnSchema.isGenerated !== columnMetadata.isGenerated;\n        });\n    }\n\n}","/**\n */\nexport class QueryRunnerAlreadyReleasedError extends Error {\n    name = \"QueryRunnerAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        this.message = `Query runner already released. Cannot run queries anymore.`;\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {Logger} from \"../../logger/Logger\";\nimport {SqlServerDriver} from \"./SqlServerDriver\";\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class SqlServerQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    protected isReleased = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected databaseConnection: DatabaseConnection,\n                protected driver: SqlServerDriver,\n                protected logger: Logger) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     * You cannot use this class's methods after its released.\n     */\n    release(): Promise<void> {\n        if (this.databaseConnection.releaseCallback) {\n            this.isReleased = true;\n            return this.databaseConnection.releaseCallback();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        await this.beginTransaction();\n        try {\n            const allTablesSql = `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`;\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\n            const tableNames = allTablesResults.map(result => result[\"TABLE_NAME\"]);\n            await Promise.all(tableNames.map(async tableName => {\n                const dropForeignKeySql = `SELECT 'ALTER TABLE ' +  OBJECT_SCHEMA_NAME(parent_object_id) + '.[' + OBJECT_NAME(parent_object_id) + '] DROP CONSTRAINT ' + name as query FROM sys.foreign_keys WHERE referenced_object_id = object_id('${tableName}')`;\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => {\n                    return this.query(dropQuery);\n                }));\n            }));\n            await Promise.all(tableNames.map(tableName => {\n                const dropTableSql = `DROP TABLE \"${tableName}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            await this.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.release();\n        }\n\n        // const selectDropsQuery = `SELECT 'DROP TABLE \"' + TABLE_NAME + '\"' as query FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';`;\n        // const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n        // const allQueries = [`EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\"`]\n        //     .concat(dropQueries.map(q => this.query(q[\"query\"])).join(\"; \"));\n        //\n        // return new Promise<void>((ok, fail) => {\n        //\n        //     const request = new this.driver.mssql.Request(this.isTransactionActive() ? this.databaseConnection.transaction : this.databaseConnection.connection);\n        //     request.multiple = true;\n        //     request.query(allQueries, (err: any, result: any) => {\n        //         if (err) {\n        //             this.logger.logFailedQuery(allQueries);\n        //             this.logger.logQueryError(err);\n        //             return fail(err);\n        //         }\n        //\n        //         ok();\n        //     });\n        // });\n\n        // const selectDropsQuery = `SELECT 'DROP TABLE \"' + TABLE_NAME + '\";' as query FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';`;\n        // const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n        // await this.query(`EXEC sp_msforeachtable \"ALTER TABLE ? NOCHECK CONSTRAINT all\"`);\n        // await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n        // await this.query(`EXEC sp_msforeachtable 'drop table [?]'`);\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async beginTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.databaseConnection.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.isTransactionActive = true;\n            this.databaseConnection.transaction = this.databaseConnection.connection.transaction();\n            this.databaseConnection.transaction.begin((err: any) => {\n                if (err) {\n                    this.databaseConnection.isTransactionActive = false;\n                    return fail(err);\n                }\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.transaction.commit((err: any) => {\n                if (err) return fail(err);\n                this.databaseConnection.isTransactionActive = false;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.transaction.rollback((err: any) => {\n                if (err) return fail(err);\n                this.databaseConnection.isTransactionActive = false;\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean {\n        return this.databaseConnection.isTransactionActive;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise((ok, fail) => {\n\n            this.logger.logQuery(query, parameters);\n            const request = new this.driver.mssql.Request(this.isTransactionActive() ? this.databaseConnection.transaction : this.databaseConnection.connection);\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    request.input(index, parameters![index]);\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n                if (err) {\n                    this.logger.logFailedQuery(query, parameters);\n                    this.logger.logQueryError(err);\n                    return fail(err);\n                }\n\n                ok(result);\n            });\n        });\n    }\n\n    /**\n     * Insert a new row with given values into given table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\n        const values = keys.map((key, index) => \"@\" + index).join(\",\");\n        const parameters = keys.map(key => keyValues[key]);\n\n        const sql = columns.length > 0\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.name + \" \" : \"\" }VALUES (${values})`\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} ${ generatedColumn ? \"OUTPUT INSERTED.\" + generatedColumn.name + \" \" : \"\" }DEFAULT VALUES `;\n\n        const result = await this.query(sql, parameters);\n        return generatedColumn ? result instanceof Array ? result[0][generatedColumn.name] : result[generatedColumn.name] : undefined;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, updateParams.length).join(\" AND \");\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let sql = \"\";\n        if (hasLevel) {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // if no tables given then no need to proceed\n\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n        const tablesSql          = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql         = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}'`;\n        const constraintsSql     = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages ` +\n`LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME ` +\n`WHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\n        const identityColumnsSql = `SELECT COLUMN_NAME, TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = '${this.dbName}' AND COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1;`;\n        const indicesSql         = `SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, COLUMN_NAME = col.name, ind.*, ic.*, col.* ` +\n`FROM sys.indexes ind INNER JOIN sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id INNER JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id ` +\n`INNER JOIN sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 AND ind.is_unique = 0 AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0 ORDER BY t.name, ind.name, ind.index_id, ic.index_column_id`;\n        const [dbTables, dbColumns, dbConstraints, dbIdentityColumns, dbIndices]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(identityColumnsSql),\n            this.query(indicesSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n\n                    const isPrimary = !!dbConstraints.find(dbConstraint => {\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\n                    });\n                    const isGenerated = !!dbIdentityColumns.find(column => {\n                        return  column[\"TABLE_NAME\"] === tableSchema.name &&\n                                column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n                    const isUnique = !!dbConstraints.find(dbConstraint => {\n                        return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n                    });\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = dbColumn[\"DATA_TYPE\"].toLowerCase() + (dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] ? \"(\" + dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] + \")\" : \"\"); // todo: use normalize type?\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    columnSchema.isPrimary = isPrimary;\n                    columnSchema.isGenerated = isGenerated;\n                    columnSchema.isUnique = isUnique;\n                    columnSchema.comment = \"\"; // todo: less priority, implement this later\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = dbConstraints\n                .filter(dbConstraint => {\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\n                })\n                .map(keyColumnUsage => {\n                    return new PrimaryKeySchema(keyColumnUsage[\"CONSTRAINT_NAME\"], keyColumnUsage[\"COLUMN_NAME\"]);\n                });\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbConstraints\n                .filter(dbConstraint => {\n                    return  dbConstraint[\"TABLE_NAME\"] === tableSchema.name &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"FOREIGN KEY\";\n                })\n                .map(dbConstraint => new ForeignKeySchema(dbConstraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return  dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                            (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                            (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const columnNames = dbIndices\n                        .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\n                        .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness? */);\n                });\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        sql += table.columns\n            .filter(column => column.isUnique)\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\n            .join(\" \");\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // to update an identy column we have to drop column and recreate it again\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`);\n            await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`);\n        }\n\n        const sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN ${this.buildCreateColumnSql(newColumn, true)}`; // todo: CHANGE OR MODIFY COLUMN ????\n        await this.query(sql);\n\n        if (newColumn.isUnique !== oldColumn.isUnique) {\n            if (newColumn.isUnique === true) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\n\n            } else if (newColumn.isUnique === false) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\n\n            }\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const oldPrimaryKeySql = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\nLEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\nWHERE columnUsages.TABLE_CATALOG = '${this.dbName}' AND tableConstraints.TABLE_CATALOG = '${this.dbName}'`;\n        const oldPrimaryKey = await this.query(oldPrimaryKeySql);\n        if (oldPrimaryKey.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${oldPrimaryKey[0][\"CONSTRAINT_NAME\"]}\"`);\n\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"` + primaryKey.columnName + `\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const sql = `DROP INDEX \"${tableName}\".\"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }) {\n        switch (typeOptions.type) {\n            case \"string\":\n                return \"nvarchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\n            case \"text\":\n                return \"ntext\";\n            case \"boolean\":\n                return \"bit\";\n            case \"integer\":\n            case \"int\":\n                return \"int\";\n            case \"smallint\":\n                return \"smallint\";\n            case \"bigint\":\n                return \"bigint\";\n            case \"float\":\n                return \"float\";\n            case \"double\":\n            case \"number\":\n                return \"real\";\n            case \"decimal\":\n                // if (column.precision && column.scale) {\n                //     return `decimal(${column.precision},${column.scale})`;\n                //\n                // } else if (column.scale) {\n                //     return `decimal(${column.scale})`;\n                //\n                // } else if (column.precision) {\n                //     return `decimal(${column.precision})`;\n                //\n                // } else {\n                    return \"decimal\";\n                // }\n            case \"date\":\n                return \"date\";\n            case \"time\":\n                return \"time\";\n            case \"datetime\":\n                return \"datetime\";\n            case \"json\":\n                return \"text\";\n            case \"simple_array\":\n                return typeOptions.length ? \"nvarchar(\" + typeOptions.length + \")\" : \"text\";\n        }\n\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"SQLServer\");\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\n\n        if (typeof columnMetadataValue === \"number\")\n            return columnMetadataValue === parseInt(databaseValue);\n        if (typeof columnMetadataValue === \"boolean\")\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        if (typeof columnMetadataValue === \"function\")\n            return columnMetadataValue() === databaseValue;\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startFrom: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => {\n            return this.driver.escapeColumnName(key) + \"=@\" + (startFrom + index);\n        });\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipIdentity: boolean = false) {\n        let c = `\"${column.name}\" ${column.type}`;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n        // if (column.isPrimary === true && !skipPrimary)\n        //     c += \" PRIMARY KEY\";\n        if (column.comment)\n            c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            if (typeof column.default === \"number\") {\n                c += \" DEFAULT \" + column.default + \"\";\n            } else if (typeof column.default === \"boolean\") {\n                c += \" DEFAULT \" + (column.default === true ? \"1\" : \"0\") + \"\";\n            } else if (typeof column.default === \"function\") {\n                c += \" DEFAULT \" + column.default() + \"\";\n            } else if (typeof column.default === \"string\") {\n                c += \" DEFAULT '\" + column.default + \"'\";\n            } else {\n                c += \" DEFAULT \" + column.default + \"\";\n            }\n        }\n        return c;\n    }\n\n\n}","/**\n * Thrown if some required driver's option is not set.\n */\nexport class DriverOptionNotSetError extends Error {\n    name = \"DriverOptionNotSetError\";\n\n    constructor(optionName: string) {\n        super();\n        this.message = `Driver option (${optionName}) is not set. Please set it to perform connection to the database.`;\n    }\n\n}","/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DataTransformationUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(mixedDate: Date|string|undefined, storedInLocal: boolean): Date|string|undefined {\n        if (!mixedDate)\n            return mixedDate;\n\n        const date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\n        if (!storedInLocal) {\n\n            // else if it was not stored in local timezone, means it was stored in UTC\n            // because driver hydrates it with timezone applied why we need to add timezone hours to match a local timezone\n\n            const correctedDate = new Date();\n            correctedDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n            correctedDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n            return correctedDate;\n        }\n        return date;\n    }\n\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value: Date|any): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n\n        return value;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(value: Date|any): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + \":\" + this.formatZerolessValue(value.getSeconds());\n\n        return value;\n    }\n\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(value: string|any): string|any {\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + \":\" + value.getSeconds()) : value;\n        if (typeof value === \"string\") {\n            return value.split(\":\")\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\n                .join(\":\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getDate()) + \" \" +\n                this.formatZerolessValue(value.getHours()) + \":\" +\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\n                this.formatZerolessValue(value.getSeconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\n                this.formatZerolessValue(value.getUTCSeconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value: any[]|any): string[]|any {\n        if (value instanceof Array) {\n            return (value as any[])\n                .map(i => String(i))\n                .join(\",\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value: string|any): string|any {\n        if (value instanceof String || typeof value === \"string\") {\n            return value.split(\",\");\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatZerolessValue(value: number): string {\n        if (value < 10)\n            return \"0\" + value;\n\n        return String(value);\n    }\n\n}\n","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {Logger} from \"../../logger/Logger\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Organizes communication with SQL Server DBMS.\n */\nexport class SqlServerDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    /**\n     * SQL Server library.\n     */\n    public mssql: any;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection to mssql database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * SQL Server pool.\n     */\n    protected connection: any;\n\n    /**\n     * Pool of database connections.\n     */\n    protected databaseConnectionPool: DatabaseConnection[] = [];\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DriverOptions, logger: Logger, mssql?: any) {\n\n        this.options = DriverUtils.buildDriverOptions(options);\n        this.logger = logger;\n        this.mssql = mssql;\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // if mssql package instance was not set explicitly then try to load it\n        if (!mssql)\n            this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            server: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        // set default useUTC option if it hasn't been set\n        if (!options.options) options.options = { useUTC: false };\n        else if (!options.options.useUTC) options.options.useUTC = false; \n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            const connection = new this.mssql.Connection(options).connect((err: any) => {\n                if (err) return fail(err);\n                this.connection = connection;\n                if (this.options.usePool === false) {\n                    this.databaseConnection = {\n                        id: 1,\n                        connection: new this.mssql.Request(connection),\n                        isTransactionActive: false\n                    };\n                }\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.connection)\n            throw new ConnectionIsNotSetError(\"mssql\");\n\n        this.connection.close();\n        this.connection = undefined;\n        this.databaseConnection = undefined;\n        this.databaseConnectionPool = [];\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.connection)\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new SqlServerQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            driver: this.mssql,\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\n            pool: this.connection\n        };\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    escapedParameters.push(v);\n                    return \"@\" + (escapedParameters.length - 1);\n                }).join(\", \");\n            } else {\n                escapedParameters.push(value);\n            }\n            return \"@\" + (escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return `\"${aliasName}\"`;\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return `\"${tableName}\"`;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (columnMetadata.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n                return JSON.parse(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n\n        if (!this.connection)\n            throw new ConnectionIsNotSetError(\"mssql\");\n\n        return new Promise((ok, fail) => {\n            if (this.databaseConnection)\n                return ok(this.databaseConnection);\n            // let dbConnection: DatabaseConnection|undefined;\n            // const connection = this.pool.connect((err: any) => {\n            //     if (err)\n            //         return fail(err);\n            //     ok(dbConnection);\n            // });\n            //\n            // console.log(connection);\n            // console.log(this.pool);\n            // console.log(this.pool === connection);\n\n            // const request = new this.mssql.Request(this.connection);\n            // console.log(\"request:\", request);\n            // let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\n            // if (!dbConnection) {\n            let dbConnection: DatabaseConnection = {\n                id: this.databaseConnectionPool.length,\n                connection: this.connection,\n                isTransactionActive: false\n            };\n            dbConnection.releaseCallback = () => {\n                // }\n                // if (this.connection && dbConnection) {\n                // request.release();\n                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\n                return Promise.resolve();\n            };\n            this.databaseConnectionPool.push(dbConnection);\n            ok(dbConnection);\n            // }\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mssql = PlatformTools.load(\"mssql\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\n        }\n    }\n\n}\n","export interface JoinOptions {\n    limit?: number;\n}","import {QueryRunner} from \"./QueryRunner\";\nimport {Driver} from \"../driver/Driver\";\n\n/**\n * Represents functionality to provide a new query runners, and release old ones.\n * Also can provide always same query runner.\n */\nexport class QueryRunnerProvider {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    protected reusableQueryRunner: QueryRunner;\n\n    protected reusableQueryRunnerPromise: Promise<QueryRunner>;\n\n    /**\n     * Indicates if this entity manager is released.\n     * Entity manager can be released only if custom queryRunnerProvider is provided.\n     * Once entity manager is released, its repositories and some other methods can't be used anymore.\n     */\n    protected _isReleased: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected driver: Driver,\n                protected useSingleQueryRunner: boolean = false) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get isReleased() {\n        return this._isReleased;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Provides a new query runner used to run repository queries.\n     * If use useSingleQueryRunner mode is enabled then reusable query runner will be provided instead.\n     */\n    provide(): Promise<QueryRunner> {\n        if (this.useSingleQueryRunner) {\n            if (!this.reusableQueryRunner) {\n                if (!this.reusableQueryRunnerPromise) {\n                    // we do this because this method can be created multiple times\n                    // this will lead to multiple query runner creations\n                    this.reusableQueryRunnerPromise = this.driver\n                        .createQueryRunner()\n                        .then(reusableQueryRunner => {\n                            this.reusableQueryRunner = reusableQueryRunner;\n                            return reusableQueryRunner;\n                        });\n                }\n                return this.reusableQueryRunnerPromise;\n            }\n            return Promise.resolve(this.reusableQueryRunner);\n        }\n        return this.driver.createQueryRunner();\n    }\n\n    /**\n     * Query runner release logic extracted into separated methods intently,\n     * to make possible to create a subclass with its own release query runner logic.\n     * Note: release only query runners that provided by a provide() method.\n     * This is important and by design.\n     */\n    async release(queryRunner: QueryRunner): Promise<void> {\n        if (queryRunner === this.reusableQueryRunner)\n            return;\n\n        return queryRunner.release();\n    }\n\n    /**\n     * Releases reused query runner.\n     */\n    async releaseReused(): Promise<void> {\n        this._isReleased = true;\n        if (this.reusableQueryRunner)\n            return this.reusableQueryRunner.release();\n    }\n\n}","import {Alias} from \"./alias/Alias\";\nimport {AliasMap} from \"./alias/AliasMap\";\nimport {RawSqlResultsToEntityTransformer} from \"./transformer/RawSqlResultsToEntityTransformer\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {Connection} from \"../connection/Connection\";\nimport {JoinOptions} from \"./JoinOptions\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\n\n/**\n */\nexport interface Join {\n    alias: Alias;\n    type: \"LEFT\"|\"INNER\";\n    condition?: string;\n    tableName: string;\n    mapToProperty?: string;\n    isMappingMany: boolean;\n    options?: JoinOptions;\n}\n\nexport interface JoinRelationId {\n\n    alias: Alias;\n    type: \"LEFT\"|\"INNER\";\n    condition?: string;\n    mapToProperty?: string;\n}\n\nexport interface RelationCountMeta {\n\n    alias: Alias;\n    // property: string;\n    condition?: string;\n    mapToProperty?: string;\n    entities: { entity: any, metadata: EntityMetadata }[];\n    // entity?: any;\n}\n\n/**\n */\nexport interface JoinMapping {\n    type: \"join\"|\"relationId\";\n    alias: Alias;\n    parentName: string;\n    propertyName: string;\n    isMany: boolean;\n}\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class QueryBuilder<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Protected properties\n    // -------------------------------------------------------------------------\n\n    protected aliasMap: AliasMap;\n    protected type: \"select\"|\"update\"|\"delete\" = \"select\";\n    protected selects: string[] = [];\n    protected fromEntity: { alias: Alias };\n    protected fromTableName: string;\n    protected fromTableAlias: string;\n    protected updateQuerySet: Object;\n    protected joins: Join[] = [];\n    protected joinRelationIds: JoinRelationId[] = [];\n    protected relationCountMetas: RelationCountMeta[] = [];\n    protected groupBys: string[] = [];\n    protected wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n    protected havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\n    protected orderBys: OrderByCondition = {};\n    protected parameters: ObjectLiteral = {};\n    protected limit: number;\n    protected offset: number;\n    protected firstResult: number;\n    protected maxResults: number;\n    protected ignoreParentTablesJoins: boolean = false;\n\n    /**\n     * Indicates if virtual columns should be included in entity result.\n     */\n    protected enableRelationIdValues: boolean = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunnerProvider?: QueryRunnerProvider) {\n        this.aliasMap = new AliasMap(connection);\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        return this.aliasMap.mainAlias.name;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): this {\n        this.type = \"delete\";\n        return this;\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(updateSet: ObjectLiteral): this;\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update(entity: Function, updateSet: ObjectLiteral): this;\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(tableName: string, updateSet: ObjectLiteral): this;\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(tableNameOrEntityOrUpdateSet?: string|Function|ObjectLiteral, maybeUpdateSet?: ObjectLiteral): this {\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : <ObjectLiteral> tableNameOrEntityOrUpdateSet;\n\n        if (tableNameOrEntityOrUpdateSet instanceof Function) {\n            const aliasName = (<any> tableNameOrEntityOrUpdateSet).name;\n            const aliasObj = new Alias(aliasName);\n            aliasObj.target = <Function> tableNameOrEntityOrUpdateSet;\n            this.aliasMap.addMainAlias(aliasObj);\n            this.fromEntity = { alias: aliasObj };\n\n        } else if (typeof tableNameOrEntityOrUpdateSet === \"string\") {\n            this.fromTableName = <string> tableNameOrEntityOrUpdateSet;\n        }\n\n        this.type = \"update\";\n        this.updateQuerySet = updateSet;\n        return this;\n    }\n\n    /**\n     * Creates SELECT query.\n     * Replaces all old selections if they exist.\n     */\n    select(): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all old selections if they exist.\n     */\n    select(selection: string): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all old selections if they exist.\n     */\n    select(selection: string[]): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all old selections if they exist.\n     */\n    select(...selection: string[]): this;\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all old selections if they exist.\n     */\n    select(selection?: string|string[]): this {\n        this.type = \"select\";\n        if (selection) {\n            if (selection instanceof Array) {\n                this.selects = selection;\n            } else {\n                this.selects = [selection];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string[]): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(...selection: string[]): this;\n\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    addSelect(selection: string|string[]): this {\n        if (selection instanceof Array)\n            this.selects = this.selects.concat(selection);\n        else\n            this.selects.push(selection);\n\n        return this;\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from(entityTarget: Function|string, alias: string): this {\n        const aliasObj = new Alias(alias);\n        aliasObj.target = entityTarget;\n        this.aliasMap.addMainAlias(aliasObj);\n        this.fromEntity = {alias: aliasObj};\n        return this;\n    }\n\n    /**\n     * Specifies FROM which table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    fromTable(tableName: string, alias: string) {\n        this.fromTableName = <string> tableName;\n        this.fromTableAlias = alias;\n        return this;\n    }\n\n    /**\n     * INNER JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs (without selection) given entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoin(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options);\n    }\n\n    /**\n     * LEFT JOINs (without selection) entity's property.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs (without selection) entity's table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs (without selection) given table.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoin(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options);\n    }\n\n    /**\n     * INNER JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndSelect(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(alias);\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options);\n    }\n\n    /**\n     * LEFT JOINs entity's property and adds all selection properties to SELECT.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs entity and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs table and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndSelect(entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(alias);\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options);\n    }\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(alias);\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options, mapToProperty, true);\n    }\n\n    /**\n     * INNER JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    innerJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(alias);\n        return this.join(\"INNER\", entityOrProperty, alias, condition, options, mapToProperty, false);\n    }\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapMany(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(alias);\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options, mapToProperty, true);\n    }\n\n    /**\n     * LEFT JOINs entity's property, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * Given entity property should be a relation.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, property: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs entity's table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entity: Function|string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs table, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, tableName: string, alias: string, condition?: string, options?: JoinOptions): this;\n\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    leftJoinAndMapOne(mapToProperty: string, entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions): this {\n        this.addSelect(alias);\n        return this.join(\"LEFT\", entityOrProperty, alias, condition, options, mapToProperty, false);\n    }\n\n    /**\n     * LEFT JOINs relation id.\n     * Optionally, you can add condition and parameters used in condition.\n     *\n     * @experimental\n     */\n    leftJoinRelationId(property: string, condition?: string): this {\n        return this.joinRelationId(\"LEFT\", undefined, property, condition);\n    }\n\n    /**\n     * INNER JOINs relation id.\n     * Optionally, you can add condition and parameters used in condition.\n     *\n     * @experimental\n     */\n    innerJoinRelationId(property: string, condition?: string): this {\n        return this.joinRelationId(\"INNER\", undefined, property, condition);\n    }\n\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     *\n     * @experimental\n     */\n    leftJoinRelationIdAndMap(mapToProperty: string, property: string, condition: string = \"\"): this {\n        return this.joinRelationId(\"INNER\", mapToProperty, property, condition);\n    }\n\n    /**\n     * INNER JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     *\n     * @experimental\n     */\n    innerJoinRelationIdAndMap(mapToProperty: string, property: string, condition: string = \"\"): this {\n        return this.joinRelationId(\"INNER\", mapToProperty, property, condition);\n    }\n\n    /**\n     * Counts number of entities of entity's relation.\n     * Optionally, you can add condition and parameters used in condition.\n     *\n     * @experimental\n     */\n    countRelation(property: string, condition: string = \"\"): this {\n\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_count\";\n\n        const aliasObj = new Alias(alias);\n        this.aliasMap.addAlias(aliasObj);\n        aliasObj.parentAliasName = parentAliasName;\n        aliasObj.parentPropertyName = parentPropertyName;\n\n        const relationCountMeta: RelationCountMeta = {\n            condition: condition,\n            alias: aliasObj,\n            entities: []\n        };\n        this.relationCountMetas.push(relationCountMeta);\n        return this;\n    }\n\n    /**\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     *\n     * @experimental\n     */\n    countRelationAndMap(mapProperty: string, property: string, condition: string = \"\"): this {\n\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_count\";\n        const aliasObj = new Alias(alias);\n        this.aliasMap.addAlias(aliasObj);\n        aliasObj.parentAliasName = parentAliasName;\n        aliasObj.parentPropertyName = parentPropertyName;\n\n        const relationCountMeta: RelationCountMeta = {\n            mapToProperty: mapProperty,\n            condition: condition,\n            alias: aliasObj,\n            entities: []\n        };\n        this.relationCountMetas.push(relationCountMeta);\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string, parameters?: ObjectLiteral): this {\n        this.wheres.push({ type: \"simple\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string, parameters?: ObjectLiteral): this {\n        this.wheres.push({ type: \"and\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * @experimental Maybe this method should be moved to repository?\n     */\n    andWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.andWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string, parameters?: ObjectLiteral): this {\n        this.wheres.push({ type: \"or\", condition: where });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     *\n     * @experimental Maybe this method should be moved to repository?\n     */\n    orWhereInIds(ids: any[]): this {\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\n        this.orWhere(whereExpression, parameters);\n        return this;\n    }\n\n    /**\n     * Sets HAVING condition in the query builder.\n     * If you had previously HAVING expression defined,\n     * calling this function will override previously set HAVING conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    having(having: string, parameters?: ObjectLiteral): this {\n        this.havings.push({ type: \"simple\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andHaving(having: string, parameters?: ObjectLiteral): this {\n        this.havings.push({ type: \"and\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orHaving(having: string, parameters?: ObjectLiteral): this {\n        this.havings.push({ type: \"or\", condition: having });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    groupBy(groupBy: string): this {\n        this.groupBys = [groupBy];\n        return this;\n    }\n\n    /**\n     * Adds GROUP BY condition in the query builder.\n     */\n    addGroupBy(groupBy: string): this {\n        this.groupBys.push(groupBy);\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\n        this.orderBys = { [sort]: order };\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\"): this {\n        this.orderBys[sort] = order;\n        return this;\n    }\n\n    /**\n     * Set's LIMIT - maximum number of rows to be selected.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead setMaxResults instead.\n     */\n    setLimit(limit: number): this {\n        this.limit = limit;\n        return this;\n    }\n\n    /**\n     * Set's OFFSET - selection offset.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead setFirstResult instead.\n     */\n    setOffset(offset: number): this {\n        this.offset = offset;\n        return this;\n    }\n\n    /**\n     * Set's maximum number of entities to be selected.\n     */\n    setMaxResults(maxResults: number): this {\n        this.maxResults = maxResults;\n        return this;\n    }\n\n    /**\n     * Set's offset of entities to be selected.\n     */\n    setFirstResult(firstResult: number): this {\n        this.firstResult = firstResult;\n        return this;\n    }\n\n    /**\n     * Sets given parameter's value.\n     */\n    setParameter(key: string, value: any): this {\n        this.parameters[key] = value;\n        return this;\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     * Unlike setParameters method it does not clear all previously set parameters.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n        Object.keys(parameters).forEach(key => {\n            this.parameters[key] = parameters[key];\n        });\n        return this;\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     * Unlike setParameters method it does not clear all previously set parameters.\n     *\n     * @deprecated use setParameters instead\n     */\n    addParameters(parameters: ObjectLiteral): this {\n        Object.keys(parameters).forEach(key => {\n            this.parameters[key] = parameters[key];\n        });\n        return this;\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign({}, this.parameters);\n\n        // add discriminator column parameter if it exist\n        if (!this.fromTableName) {\n            const mainMetadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\n            if (mainMetadata.hasDiscriminatorColumn)\n                parameters[\"discriminatorColumnValue\"] = mainMetadata.discriminatorValue;\n        }\n\n        return parameters;\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        let sql = this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createJoinRelationIdsExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        sql += this.createOffsetExpression();\n        [sql] = this.connection.driver.escapeQueryWithParameters(sql, this.parameters);\n        return sql;\n    }\n\n    /**\n     * Gets generated sql without parameters being replaced.\n     *\n     * @experimental\n     */\n    getGeneratedQuery(): string {\n        let sql = this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createJoinRelationIdsExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        sql += this.createOffsetExpression();\n        return sql;\n    }\n\n    /**\n     * Gets sql to be executed with all parameters used in it.\n     *\n     * @experimental\n     */\n    getSqlWithParameters(options?: { skipOrderBy?: boolean }): [string, any[]] {\n        let sql = this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createJoinRelationIdsExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        if (!options || !options.skipOrderBy)\n            sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        sql += this.createOffsetExpression();\n        return this.connection.driver.escapeQueryWithParameters(sql, this.getParameters());\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const queryRunner = await this.getQueryRunner();\n        const [sql, parameters] = this.getSqlWithParameters();\n        try {\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    async getEntitiesAndRawResults(): Promise<{ entities: Entity[], rawResults: any[] }> {\n        if (!this.aliasMap.hasMainAlias)\n            throw new Error(`Alias is not set. Looks like nothing is selected. Use select*, delete, update method to set an alias.`);\n\n        const queryRunner = await this.getQueryRunner();\n\n        const mainAliasName = this.fromTableName ? this.fromTableName : this.aliasMap.mainAlias.name;\n        let rawResults: any[];\n        if (this.firstResult || this.maxResults) {\n            // we are skipping order by here because its not working in subqueries anyway\n            // to make order by working we need to apply it on a distinct query\n            const [sql, parameters] = this.getSqlWithParameters({ skipOrderBy: true });\n            const [selects, orderBys] = this.createOrderByCombinedWithSelectExpression(\"distinctAlias\");\n\n            const distinctAlias = this.connection.driver.escapeTableName(\"distinctAlias\");\n            const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\n            let idsQuery = `SELECT `;\n            idsQuery += metadata.primaryColumns.map((primaryColumn, index) => {\n                const propertyName = this.connection.driver.escapeAliasName(mainAliasName + \"_\" + primaryColumn.name);\n                if (index === 0) {\n                    return `DISTINCT(${distinctAlias}.${propertyName}) as ids_${primaryColumn.name}`;\n                } else {\n                    return `${distinctAlias}.${propertyName}) as ids_${primaryColumn.name}`;\n                }\n            }).join(\", \");\n            if (selects.length > 0)\n                idsQuery += \", \" + selects;\n\n            idsQuery += ` FROM (${sql}) ${distinctAlias}`; // TODO: WHAT TO DO WITH PARAMETERS HERE? DO THEY WORK?\n\n            if (orderBys.length > 0) {\n                idsQuery += \" ORDER BY \" + orderBys;\n            } else {\n                idsQuery += ` ORDER BY \"ids_${metadata.firstPrimaryColumn.name}\"`; // this is required for mssql driver if firstResult is used. Other drivers don't care about it\n            }\n\n            if (this.connection.driver instanceof SqlServerDriver) { // todo: temporary. need to refactor and make a proper abstraction\n\n                if (this.firstResult || this.maxResults) {\n                    idsQuery += ` OFFSET ${this.firstResult || 0} ROWS`;\n                    if (this.maxResults)\n                        idsQuery += \" FETCH NEXT \" + this.maxResults + \" ROWS ONLY\";\n                }\n            } else {\n\n                if (this.maxResults)\n                    idsQuery += \" LIMIT \" + this.maxResults;\n                if (this.firstResult)\n                    idsQuery += \" OFFSET \" + this.firstResult;\n            }\n\n            try {\n                return await queryRunner.query(idsQuery, parameters)\n                    .then((results: any[]) => {\n                        rawResults = results;\n                        if (results.length === 0)\n                            return [];\n\n                        let condition = \"\";\n                        const parameters: ObjectLiteral = {};\n                        if (metadata.hasMultiplePrimaryKeys) {\n                            condition = results.map(result => {\n                                return metadata.primaryColumns.map(primaryColumn => {\n                                    parameters[\"ids_\" + primaryColumn.propertyName] = result[\"ids_\" + primaryColumn.propertyName];\n                                    return mainAliasName + \".\" + primaryColumn.propertyName + \"=:ids_\" + primaryColumn.propertyName;\n                                }).join(\" AND \");\n                            }).join(\" OR \");\n                        } else {\n                            const ids = results.map(result => result[\"ids_\" + metadata.firstPrimaryColumn.propertyName]);\n                            const areAllNumbers = ids.map((id: any) => typeof id === \"number\");\n                            if (areAllNumbers) {\n                                // fixes #190. if all numbers then its safe to perform query without parameter\n                                condition = `${mainAliasName}.${metadata.firstPrimaryColumn.propertyName} IN (${ids.join(\", \")})`;\n                            } else {\n                                parameters[\"ids\"] = ids;\n                                condition = mainAliasName + \".\" + metadata.firstPrimaryColumn.propertyName + \" IN (:ids)\";\n                            }\n                        }\n                        const [queryWithIdsSql, queryWithIdsParameters] = this.clone({queryRunnerProvider: this.queryRunnerProvider})\n                            .andWhere(condition, parameters)\n                            .getSqlWithParameters();\n                        return (queryRunner as QueryRunner).query(queryWithIdsSql, queryWithIdsParameters);\n                    })\n                    .then(results => {\n                        return this.rawResultsToEntities(results);\n                    })\n                    .then(results => {\n\n                        return this.loadRelationCounts(queryRunner as QueryRunner, results)\n                            .then(counts => {\n                                // console.log(\"counts: \", counts);\n                                return results;\n                            });\n                    })\n                    .then(results => {\n                        if (!this.fromTableName)\n                            return this.connection.broadcaster.broadcastLoadEventsForAll(this.aliasMap.mainAlias.target, results).then(() => results);\n\n                        return results;\n                    })\n                    .then(results => {\n                        return {\n                            entities: results,\n                            rawResults: rawResults\n                        };\n                    });\n\n            } finally {\n                if (this.hasOwnQueryRunner()) // means we created our own query runner\n                    await queryRunner.release();\n            }\n\n        } else {\n\n            const [sql, parameters] = this.getSqlWithParameters();\n\n            try {\n                // console.log(sql);\n                return await queryRunner.query(sql, parameters)\n                    .then(results => {\n                        rawResults = results;\n                        return this.rawResultsToEntities(results);\n                    })\n                    .then(results => {\n\n                        return this.loadRelationCounts(queryRunner as QueryRunner, results)\n                            .then(counts => {\n                                // console.log(\"counts: \", counts);\n                                return results;\n                            });\n                    })\n                    .then(results => {\n                        if (!this.fromTableName) {\n                            return this.connection.broadcaster\n                                .broadcastLoadEventsForAll(this.aliasMap.mainAlias.target, results)\n                                .then(() => results);\n                        }\n                        return results;\n                    })\n                    .then(results => {\n                        return {\n                            entities: results,\n                            rawResults: rawResults\n                        };\n                    });\n\n            } finally {\n                if (this.hasOwnQueryRunner()) // means we created our own query runner\n                    await queryRunner.release();\n            }\n        }\n    }\n\n    /**\n     * Gets count - number of entities selected by sql generated by this query builder.\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\n     */\n    async getCount(): Promise<number> {\n\n        const queryRunner = await this.getQueryRunner();\n\n        const mainAlias = this.fromTableName ? this.fromTableName : this.aliasMap.mainAlias.name; // todo: will this work with \"fromTableName\"?\n        const metadata = this.connection.getMetadata(this.fromEntity.alias.target);\n\n        const distinctAlias = this.connection.driver.escapeAliasName(mainAlias);\n        let countSql = `COUNT(` + metadata.primaryColumnsWithParentIdColumns.map((primaryColumn, index) => {\n                const propertyName = this.connection.driver.escapeColumnName(primaryColumn.name);\n                if (index === 0) {\n                    return `DISTINCT(${distinctAlias}.${propertyName})`;\n                } else {\n                    return `${distinctAlias}.${propertyName})`;\n                }\n            }).join(\", \") + \") as cnt\";\n\n        const countQuery = this\n            .clone({\n                queryRunnerProvider: this.queryRunnerProvider,\n                skipOrderBys: true,\n                ignoreParentTablesJoins: true,\n                skipLimit: true,\n                skipOffset: true\n            })\n            .select(countSql);\n\n        const [countQuerySql, countQueryParameters] = countQuery.getSqlWithParameters();\n\n        try {\n            const results = await queryRunner.query(countQuerySql, countQueryParameters);\n            if (!results || !results[0] || !results[0][\"cnt\"])\n                return 0;\n\n            return parseInt(results[0][\"cnt\"]);\n\n        } finally {\n            if (this.hasOwnQueryRunner()) // means we created our own query runner\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Gets all raw results returned by execution of generated query builder sql.\n     */\n    getRawMany(): Promise<any[]> { // todo: rename to getRawMany\n        return this.execute();\n    }\n\n    /**\n     * Gets first raw result returned by execution of generated query builder sql.\n     */\n    getRawOne(): Promise<any> { // todo: rename to getRawOne\n        return this.getRawMany().then(results => results[0]);\n\n    }\n\n    /**\n     * Gets entities and count returned by execution of generated query builder sql.\n     */\n    getManyAndCount(): Promise<[Entity[], number]> {\n        // todo: share database connection and counter\n        return Promise.all<any>([\n            this.getMany(),\n            this.getCount()\n        ]);\n    }\n\n    /**\n     * Gets entities returned by execution of generated query builder sql.\n     */\n    getMany(): Promise<Entity[]> {\n        return this.getEntitiesAndRawResults().then(results => {\n            return results.entities;\n        });\n    }\n\n    /**\n     * Gets single entity returned by execution of generated query builder sql.\n     */\n    getOne(): Promise<Entity|undefined> {\n        return this.getMany().then(entities => entities[0]);\n    }\n\n    /**\n     * Clones query builder as it is.\n     */\n    clone(options?: { queryRunnerProvider?: QueryRunnerProvider, skipOrderBys?: boolean, skipLimit?: boolean, skipOffset?: boolean, ignoreParentTablesJoins?: boolean }): QueryBuilder<Entity> {\n        const qb = new QueryBuilder(this.connection, options ? options.queryRunnerProvider : undefined);\n        if (options && options.ignoreParentTablesJoins)\n            qb.ignoreParentTablesJoins = options.ignoreParentTablesJoins;\n\n        switch (this.type) {\n            case \"select\":\n                qb.select(this.selects);\n                break;\n            case \"update\":\n                qb.update(this.updateQuerySet);\n                break;\n            case \"delete\":\n                qb.delete();\n                break;\n        }\n\n        if (this.fromEntity && this.fromEntity.alias && this.fromEntity.alias.target) {\n            qb.from(this.fromEntity.alias.target, this.fromEntity.alias.name);\n\n        } else if (this.fromTableName) {\n            qb.fromTable(this.fromTableName, this.fromTableAlias);\n        }\n\n        this.joins.forEach(join => {\n            const property = join.tableName || join.alias.target || (join.alias.parentAliasName + \".\" + join.alias.parentPropertyName);\n            qb.join(join.type, property, join.alias.name, join.condition || \"\", undefined, join.mapToProperty, join.isMappingMany);\n        });\n\n        this.groupBys.forEach(groupBy => qb.addGroupBy(groupBy));\n\n        this.wheres.forEach(where => {\n            switch (where.type) {\n                case \"simple\":\n                    qb.where(where.condition);\n                    break;\n                case \"and\":\n                    qb.andWhere(where.condition);\n                    break;\n                case \"or\":\n                    qb.orWhere(where.condition);\n                    break;\n            }\n        });\n\n        this.havings.forEach(having => {\n            switch (having.type) {\n                case \"simple\":\n                    qb.having(having.condition);\n                    break;\n                case \"and\":\n                    qb.andHaving(having.condition);\n                    break;\n                case \"or\":\n                    qb.orHaving(having.condition);\n                    break;\n            }\n        });\n\n        if (!options || !options.skipOrderBys)\n            Object.keys(this.orderBys).forEach(columnName => qb.addOrderBy(columnName, this.orderBys[columnName]));\n\n        Object.keys(this.parameters).forEach(key => qb.setParameter(key, this.parameters[key]));\n\n        if (!options || !options.skipLimit)\n            qb.setLimit(this.limit);\n\n        if (!options || !options.skipOffset)\n            qb.setOffset(this.offset);\n\n        qb.setFirstResult(this.firstResult)\n            .setMaxResults(this.maxResults);\n\n        return qb;\n    }\n\n    /**\n     * Enables special query builder options.\n     */\n    enableOption(option: \"RELATION_ID_VALUES\"): this {\n        switch (option) {\n            case \"RELATION_ID_VALUES\":\n                this.enableRelationIdValues = true;\n        }\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected loadRelationCounts(queryRunner: QueryRunner, results: Entity[]): Promise<{}> {\n\n        const promises = this.relationCountMetas.map(relationCountMeta => {\n            const parentAlias = relationCountMeta.alias.parentAliasName;\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\n            if (!foundAlias)\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\n\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\n            if (!parentMetadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\n\n            const relation = parentMetadata.findRelationWithPropertyName(relationCountMeta.alias.parentPropertyName);\n\n            const queryBuilder = new QueryBuilder(this.connection, this.queryRunnerProvider);\n            let condition = \"\";\n\n            const metadata = this.aliasMap.getEntityMetadataByAlias(relationCountMeta.alias);\n            if (!metadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + relationCountMeta.alias.name);\n\n            let joinTableName: string = metadata.table.name;\n\n            const junctionMetadata = relation.junctionEntityMetadata;\n            const appendedCondition = relationCountMeta.condition ? \" AND \" + this.replacePropertyNames(relationCountMeta.condition) : \"\";\n\n            /*if (relation.isManyToMany) {\n             const junctionTable = junctionMetadata.table.name;\n             const junctionAlias = relationCountMeta.alias.parentAliasName + \"_\" + relationCountMeta.alias.name;\n             const joinAlias = relationCountMeta.alias.name;\n             const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\n             const joinTableColumn = joinTable.referencedColumn.name; // not sure if this is correct\n             const inverseJoinColumnName = joinTable.inverseReferencedColumn.name; // not sure if this is correct\n\n             let condition1 = \"\", condition2 = \"\";\n             if (relation.isOwning) {\n             condition1 = junctionAlias + \".\" + junctionMetadata.columns[0].name + \"=\" + parentAlias + \".\" + joinTableColumn;\n             condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[1].name;\n             } else {\n             condition1 = junctionAlias + \".\" + junctionMetadata.columns[1].name + \"=\" + parentAlias + \".\" + joinTableColumn;\n             condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[0].name;\n             }\n\n             condition = \" LEFT JOIN \" + junctionTable + \" \" + junctionAlias + \" \" + relationCountMeta.conditionType + \" \" + condition1 +\n             \" LEFT JOIN \" + joinTableName + \" \" + joinAlias + \" \" + relationCountMeta.conditionType + \" \" + condition2 + appendedCondition;\n\n             } else if (relation.isManyToOne || (relation.isOneToOne && relation.isOwning)) {\n             const joinTableColumn = relation.joinColumn.referencedColumn.name;\n             const condition2 = relationCountMeta.alias.name + \".\" + joinTableColumn + \"=\" + parentAlias + \".\" + relation.name;\n             condition = \" LEFT JOIN \" + joinTableName + \" \" + relationCountMeta.alias.name + \" \" + relationCountMeta.conditionType + \" \" + condition2 + appendedCondition;\n\n             } else {\n             throw new Error(`Relation count can be applied only `); // this should be done on entity build\n             }*/\n\n            // if (relationCountMeta.condition)\n            //     condition += relationCountMeta.condition;\n            // relationCountMeta.alias.target;\n            // todo: FIX primaryColumn usages\n\n            const ids = relationCountMeta.entities\n                .map(entityWithMetadata => entityWithMetadata.metadata.getEntityIdMap(entityWithMetadata.entity))\n                .filter(idMap => idMap !== undefined)\n                .map(idMap => idMap![parentMetadata.primaryColumn.propertyName]);\n            if (!ids || !ids.length)\n                return Promise.resolve(); // todo: need to set zero to relationCount column in this case?\n\n            return queryBuilder\n                .select(`${parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName} AS id`)\n                .addSelect(`COUNT(${ this.connection.driver.escapeAliasName(relation.propertyName) + \".\" + this.connection.driver.escapeColumnName(relation.inverseEntityMetadata.primaryColumn.name) }) as cnt`)\n                .from(parentMetadata.target, parentMetadata.name)\n                .leftJoin(parentMetadata.name + \".\" + relation.propertyName, relation.propertyName, relationCountMeta.condition)\n                .setParameters(this.parameters)\n                .where(`${parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName} IN (:relationCountIds)`, {relationCountIds: ids})\n                .groupBy(parentMetadata.name + \".\" + parentMetadata.primaryColumn.propertyName)\n                .getRawMany()\n                .then((results: { id: any, cnt: any }[]) => {\n                    // console.log(relationCountMeta.entities);\n                    relationCountMeta.entities.forEach(entityWithMetadata => {\n                        const entityId = entityWithMetadata.entity[entityWithMetadata.metadata.primaryColumn.propertyName];\n                        const entityResult = results.find(result => {\n                            return entityId === this.connection.driver.prepareHydratedValue(result.id, entityWithMetadata.metadata.primaryColumn);\n                        });\n                        if (entityResult) {\n\n                            if (relationCountMeta.mapToProperty) {\n                                const [parentName, propertyName] = (relationCountMeta.mapToProperty as string).split(\".\");\n                                // todo: right now mapping is working only on the currently countRelation class, but\n                                // different properties are working. make different classes to work too\n                                entityWithMetadata.entity[propertyName] = parseInt(entityResult.cnt);\n\n                            } else if (relation.countField) {\n                                entityWithMetadata.entity[relation.countField] = parseInt(entityResult.cnt);\n                            }\n                        }\n                    });\n                });\n        });\n\n        return Promise.all(promises);\n    }\n\n    protected rawResultsToEntities(results: any[]) {\n        const transformer = new RawSqlResultsToEntityTransformer(this.connection.driver, this.aliasMap, this.extractJoinMappings(), this.relationCountMetas, this.enableRelationIdValues);\n        return transformer.transform(results);\n    }\n\n    protected createSelectExpression() {\n        // todo throw exception if selects or from is missing\n\n        let alias: string = \"\", tableName: string;\n        const allSelects: string[] = [];\n\n        if (this.fromTableName) {\n            tableName = this.fromTableName;\n            alias = this.fromTableAlias;\n            // console.log(\"ALIAS F:\", alias);\n\n        } else if (this.fromEntity) {\n            const metadata = this.aliasMap.getEntityMetadataByAlias(this.fromEntity.alias);\n            if (!metadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.fromEntity.alias.name);\n            tableName = metadata.table.name;\n            alias = this.fromEntity.alias.name;\n            // console.log(\"ALIAS N:\", this.fromEntity.alias);\n            // console.log(\"ALIAS N:\", alias);\n\n            // add select from the main table\n            if (this.selects.indexOf(alias) !== -1) {\n                metadata.columns.forEach(column => {\n                    allSelects.push(this.connection.driver.escapeAliasName(alias) + \".\" + this.connection.driver.escapeColumnName(column.name) + \" AS \" + this.connection.driver.escapeAliasName(alias + \"_\" + column.name));\n                });\n            }\n\n        } else {\n            throw new Error(\"No from given\");\n        }\n\n        // add selects from joins\n        this.joins\n            .filter(join => this.selects.indexOf(join.alias.name) !== -1)\n            .forEach(join => {\n                const joinMetadata = this.aliasMap.getEntityMetadataByAlias(join.alias);\n                if (joinMetadata) {\n                    joinMetadata.columns.forEach(column => {\n                        allSelects.push(this.connection.driver.escapeAliasName(join.alias.name) + \".\" + this.connection.driver.escapeColumnName(column.name) + \" AS \" + this.connection.driver.escapeAliasName(join.alias.name + \"_\" + column.name));\n                    });\n                } else {\n                    allSelects.push(this.connection.driver.escapeAliasName(join.alias.name));\n                }\n            });\n\n        if (!this.ignoreParentTablesJoins && !this.fromTableName) {\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\n            if (metadata.parentEntityMetadata && metadata.parentIdColumns) {\n                const alias = \"parentIdColumn_\" + this.connection.driver.escapeAliasName(metadata.parentEntityMetadata.table.name);\n                metadata.parentEntityMetadata.columns.forEach(column => {\n                    allSelects.push(alias + \".\" + this.connection.driver.escapeColumnName(column.name) + \" AS \" + alias + \"_\" + this.connection.driver.escapeAliasName(column.name));\n                });\n            }\n        }\n\n        // add selects from relation id joins\n        this.joinRelationIds.forEach(join => {\n            // const joinMetadata = this.aliasMap.getEntityMetadataByAlias(join.alias);\n\n            const parentAlias = join.alias.parentAliasName;\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\n            if (!foundAlias)\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\n\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\n            if (!parentMetadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\n            const relation = parentMetadata.findRelationWithPropertyName(join.alias.parentPropertyName);\n            const junctionMetadata = relation.junctionEntityMetadata;\n            // const junctionTable = junctionMetadata.table.name;\n\n            junctionMetadata.columns.forEach(column => {\n                allSelects.push(this.connection.driver.escapeAliasName(join.alias.name) + \".\" + this.connection.driver.escapeColumnName(column.name) + \" AS \" + this.connection.driver.escapeAliasName(join.alias.name + \"_\" + column.name));\n            });\n        });\n\n        //\n        /*if (this.enableRelationIdValues) {\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\n            if (!parentMetadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\n\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\n            metadata.manyToManyRelations.forEach(relation => {\n\n                const junctionMetadata = relation.junctionEntityMetadata;\n                junctionMetadata.columns.forEach(column => {\n                    const select = this.connection.driver.escapeAliasName(this.aliasMap.mainAlias.name + \"_\" + junctionMetadata.table.name + \"_ids\") + \".\" +\n                        this.connection.driver.escapeColumnName(column.name) + \" AS \" +\n                        this.connection.driver.escapeAliasName(this.aliasMap.mainAlias.name + \"_\" + relation.name + \"_ids_\" + column.name);\n                    allSelects.push(select);\n                });\n            });\n        }*/\n\n        // add all other selects\n        this.selects.filter(select => {\n            return select !== alias && !this.joins.find(join => join.alias.name === select);\n        }).forEach(select => allSelects.push(this.replacePropertyNames(select)));\n\n        // if still selection is empty, then simply set it to all (*)\n        if (allSelects.length === 0)\n            allSelects.push(\"*\");\n\n        // create a selection query\n        switch (this.type) {\n            case \"select\":\n                return \"SELECT \" + allSelects.join(\", \") + \" FROM \" + this.connection.driver.escapeTableName(tableName) + \" \" + this.connection.driver.escapeAliasName(alias);\n            case \"delete\":\n                return \"DELETE FROM \" + this.connection.driver.escapeTableName(tableName);\n                // return \"DELETE \" + (alias ? this.connection.driver.escapeAliasName(alias) : \"\") + \" FROM \" + this.connection.driver.escapeTableName(tableName) + \" \" + (alias ? this.connection.driver.escapeAliasName(alias) : \"\"); // TODO: only mysql supports aliasing, so what to do with aliases in DELETE queries? right now aliases are used however we are relaying that they will always match a table names\n            case \"update\":\n                const updateSet = Object.keys(this.updateQuerySet).map(key => key + \"=:updateQuerySet_\" + key);\n                const params = Object.keys(this.updateQuerySet).reduce((object, key) => {\n                    // todo: map propertyNames to names ?\n                    (<any> object)[\"updateQuerySet_\" + key] = (<any> this.updateQuerySet)[key];\n                    return object;\n                }, {});\n                this.setParameters(params);\n                return \"UPDATE \" + tableName + \" \" + (alias ? this.connection.driver.escapeAliasName(alias) : \"\") + \" SET \" + updateSet;\n        }\n\n        throw new Error(\"No query builder type is specified.\");\n    }\n\n    protected createWhereExpression() {\n\n        const conditions = this.wheres.map((where, index) => {\n            switch (where.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\n                default:\n                    return this.replacePropertyNames(where.condition);\n            }\n        }).join(\" \");\n\n        if (!this.fromTableName) {\n            const mainMetadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\n            if (mainMetadata.hasDiscriminatorColumn)\n                return ` WHERE ${ conditions.length ? \"(\" + conditions + \") AND\" : \"\" } ${mainMetadata.discriminatorColumn.name}=:discriminatorColumnValue`;\n\n        }\n\n        if (!conditions.length) return \"\";\n        return \" WHERE \" + conditions;\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given statement.\n     */\n    private replacePropertyNames(statement: string) {\n        this.aliasMap.aliases.forEach(alias => {\n            const metadata = this.aliasMap.getEntityMetadataByAlias(alias);\n            if (!metadata) return;\n            metadata.embeddeds.forEach(embedded => {\n                embedded.columns.forEach(column => {\n                    const expression = alias.name + \"\\\\.\" + embedded.propertyName + \"\\\\.\" + column.propertyName + \"([ =]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), this.connection.driver.escapeAliasName(alias.name) + \".\" + this.connection.driver.escapeColumnName(column.name) + \"$1\");\n                });\n                // todo: what about embedded relations here?\n            });\n            metadata.columns.filter(column => !column.isInEmbedded).forEach(column => {\n                const expression = alias.name + \"\\\\.\" + column.propertyName + \"([ =]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression, \"gm\"), this.connection.driver.escapeAliasName(alias.name) + \".\" + this.connection.driver.escapeColumnName(column.name) + \"$1\");\n            });\n            metadata.relationsWithJoinColumns/*.filter(relation => !relation.isInEmbedded)*/.forEach(relation => {\n                const expression = alias.name + \"\\\\.\" + relation.propertyName + \"([ =]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression, \"gm\"), this.connection.driver.escapeAliasName(alias.name) + \".\" + this.connection.driver.escapeColumnName(relation.name) + \"$1\");\n            });\n        });\n        return statement;\n    }\n\n    protected createJoinRelationIdsExpression() {\n        return this.joinRelationIds.map(join => {\n            const parentAlias = join.alias.parentAliasName;\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\n            if (!foundAlias)\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\n\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\n            if (!parentMetadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\n\n            const relation = parentMetadata.findRelationWithPropertyName(join.alias.parentPropertyName);\n            const junctionMetadata = relation.junctionEntityMetadata;\n            const junctionTable = junctionMetadata.table.name;\n            const junctionAlias = join.alias.name;\n            const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\n            const joinTableColumn = joinTable.referencedColumn.name; // not sure if this is correct\n\n            let condition1 = \"\";\n            if (relation.isOwning) {\n                condition1 = this.connection.driver.escapeAliasName(junctionAlias) + \".\" + this.connection.driver.escapeColumnName(junctionMetadata.columns[0].name) + \"=\" + this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(joinTableColumn);\n                // condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[1].name;\n            } else {\n                condition1 = this.connection.driver.escapeAliasName(junctionAlias) + \".\" + this.connection.driver.escapeColumnName(junctionMetadata.columns[1].name) + \"=\" + this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(joinTableColumn);\n                // condition2 = joinAlias + \".\" + inverseJoinColumnName + \"=\" + junctionAlias + \".\" + junctionMetadata.columns[0].name;\n            }\n\n            return \" \" + join.type + \" JOIN \" + junctionTable + \" \" + this.connection.driver.escapeAliasName(junctionAlias) + \" ON \" + condition1;\n            // \" \" + joinType + \" JOIN \" + joinTableName + \" \" + joinAlias + \" \" + join.conditionType + \" \" + condition2 + appendedCondition;\n            // console.log(join);\n            // return \" \" + join.type + \" JOIN \" + joinTableName + \" \" + join.alias.name + \" \" + (join.condition ? (join.conditionType + \" \" + join.condition) : \"\");\n        });\n    }\n\n    protected createJoinExpression() {\n        let joins = this.joins.map(join => {\n            const joinType = join.type; // === \"INNER\" ? \"INNER\" : \"LEFT\";\n            let joinTableName: string = join.tableName;\n            if (!joinTableName) {\n                const metadata = this.aliasMap.getEntityMetadataByAlias(join.alias);\n                if (!metadata)\n                    throw new Error(\"Cannot get entity metadata for the given alias \" + join.alias.name);\n\n                joinTableName = metadata.table.name;\n            }\n\n            const parentAlias = join.alias.parentAliasName;\n            if (!parentAlias) {\n                return \" \" + joinType + \" JOIN \" + this.connection.driver.escapeTableName(joinTableName) + \" \" + this.connection.driver.escapeAliasName(join.alias.name) + \" \" + (join.condition ? ( \"ON \" + this.replacePropertyNames(join.condition) ) : \"\");\n            }\n\n            const foundAlias = this.aliasMap.findAliasByName(parentAlias);\n            if (!foundAlias)\n                throw new Error(`Alias \"${parentAlias}\" was not found`);\n\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(foundAlias);\n            if (!parentMetadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + foundAlias.name);\n\n            const relation = parentMetadata.findRelationWithPropertyName(join.alias.parentPropertyName);\n            const junctionMetadata = relation.junctionEntityMetadata;\n            const appendedCondition = join.condition ? \" AND \" + this.replacePropertyNames(join.condition) : \"\";\n\n            if (relation.isManyToMany) {\n                const junctionTable = junctionMetadata.table.name;\n                const junctionAlias = join.alias.parentAliasName + \"_\" + join.alias.name;\n                const joinAlias = join.alias.name;\n                const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable;\n                const joinTableColumn = relation.isOwning ? joinTable.referencedColumn.name : joinTable.inverseReferencedColumn.name;\n                const inverseJoinColumnName = relation.isOwning ? joinTable.inverseReferencedColumn.name : joinTable.referencedColumn.name;\n\n                let condition1 = \"\", condition2 = \"\";\n                if (relation.isOwning) {\n                    condition1 = this.connection.driver.escapeAliasName(junctionAlias) + \".\" + this.connection.driver.escapeColumnName(junctionMetadata.columns[0].name) + \"=\" + this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(joinTableColumn);\n                    condition2 = this.connection.driver.escapeAliasName(joinAlias) + \".\" + this.connection.driver.escapeColumnName(inverseJoinColumnName) + \"=\" + this.connection.driver.escapeAliasName(junctionAlias) + \".\" + this.connection.driver.escapeColumnName(junctionMetadata.columns[1].name);\n                } else {\n                    condition1 = this.connection.driver.escapeAliasName(junctionAlias) + \".\" + this.connection.driver.escapeColumnName(junctionMetadata.columns[1].name) + \"=\" + this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(joinTableColumn);\n                    condition2 = this.connection.driver.escapeAliasName(joinAlias) + \".\" + this.connection.driver.escapeColumnName(inverseJoinColumnName) + \"=\" + this.connection.driver.escapeAliasName(junctionAlias) + \".\" + this.connection.driver.escapeColumnName(junctionMetadata.columns[0].name);\n                }\n\n                return \" \" + joinType + \" JOIN \" + this.connection.driver.escapeTableName(junctionTable) + \" \" + this.connection.driver.escapeAliasName(junctionAlias) + \" ON \" + condition1 +\n                       \" \" + joinType + \" JOIN \" + this.connection.driver.escapeTableName(joinTableName) + \" \" + this.connection.driver.escapeAliasName(joinAlias) + \" ON \" + condition2 + appendedCondition;\n\n            } else if (relation.isManyToOne || (relation.isOneToOne && relation.isOwning)) {\n                const joinTableColumn = relation.joinColumn.referencedColumn.name;\n                const condition = this.connection.driver.escapeAliasName(join.alias.name) + \".\" + this.connection.driver.escapeColumnName(joinTableColumn) + \"=\" + this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(relation.name);\n                return \" \" + joinType + \" JOIN \" + this.connection.driver.escapeTableName(joinTableName) + \" \" + this.connection.driver.escapeAliasName(join.alias.name) + \" ON \" + condition + appendedCondition;\n\n            } else if (relation.isOneToMany || (relation.isOneToOne && !relation.isOwning)) {\n                const joinTableColumn = relation.inverseRelation.joinColumn.referencedColumn.name;\n                const condition = this.connection.driver.escapeAliasName(join.alias.name) + \".\" + this.connection.driver.escapeColumnName(relation.inverseRelation.name) + \"=\" + this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(joinTableColumn);\n                return \" \" + joinType + \" JOIN \" + this.connection.driver.escapeTableName(joinTableName) + \" \" + this.connection.driver.escapeAliasName(join.alias.name) + \" ON \" + condition + appendedCondition;\n\n            } else {\n                throw new Error(\"Unexpected relation type\"); // this should not be possible\n            }\n        }).join(\" \");\n\n        if (!this.ignoreParentTablesJoins && !this.fromTableName) {\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\n            if (metadata.parentEntityMetadata && metadata.parentIdColumns) {\n                const alias = this.connection.driver.escapeAliasName(\"parentIdColumn_\" + metadata.parentEntityMetadata.table.name);\n                joins += \" JOIN \" + this.connection.driver.escapeTableName(metadata.parentEntityMetadata.table.name)\n                    + \" \" + alias + \" ON \";\n                joins += metadata.parentIdColumns.map(parentIdColumn => {\n                    return this.aliasMap.mainAlias.name + \".\" + parentIdColumn.name + \"=\" + alias + \".\" + parentIdColumn.propertyName;\n                });\n            }\n        }\n\n        /*if (this.enableRelationIdValues) {\n            const parentMetadata = this.aliasMap.getEntityMetadataByAlias(this.aliasMap.mainAlias);\n            if (!parentMetadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \" + this.aliasMap.mainAlias.name);\n\n            const metadata = this.connection.entityMetadatas.findByTarget(this.aliasMap.mainAlias.target);\n            joins += metadata.manyToManyRelations.map(relation => {\n\n                const junctionMetadata = relation.junctionEntityMetadata;\n                const junctionTable = junctionMetadata.table.name;\n                const junctionAlias = this.aliasMap.mainAlias.name + \"_\" + junctionTable + \"_ids\";\n                const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable; // not sure if this is correct\n                const joinTableColumn = joinTable.referencedColumn.name; // not sure if this is correct\n\n                let condition1 = \"\";\n                if (relation.isOwning) {\n                    condition1 = this.connection.driver.escapeAliasName(junctionAlias) + \".\" +\n                        this.connection.driver.escapeColumnName(junctionMetadata.columns[0].name) + \"=\" +\n                        this.connection.driver.escapeAliasName(this.aliasMap.mainAlias.name) + \".\" +\n                        this.connection.driver.escapeColumnName(joinTableColumn);\n                } else {\n                    condition1 = this.connection.driver.escapeAliasName(junctionAlias) + \".\" +\n                        this.connection.driver.escapeColumnName(junctionMetadata.columns[1].name) + \"=\" +\n                        this.connection.driver.escapeAliasName(this.aliasMap.mainAlias.name) + \".\" +\n                        this.connection.driver.escapeColumnName(joinTableColumn);\n                }\n\n                return \" LEFT JOIN \" + junctionTable + \" \" + this.connection.driver.escapeAliasName(junctionAlias) + \" ON \" + condition1;\n            }).join(\" \");\n        }*/\n\n        return joins;\n    }\n\n    protected createGroupByExpression() {\n        if (!this.groupBys || !this.groupBys.length) return \"\";\n        return \" GROUP BY \" + this.replacePropertyNames(this.groupBys.join(\", \"));\n    }\n\n    protected createHavingExpression() {\n        if (!this.havings || !this.havings.length) return \"\";\n        return \" HAVING \" + this.havings.map(having => {\n                switch (having.type) {\n                    case \"and\":\n                        return \" AND \" + this.replacePropertyNames(having.condition);\n                    case \"or\":\n                        return \" OR \" + this.replacePropertyNames(having.condition);\n                    default:\n                        return \" \" + this.replacePropertyNames(having.condition);\n                }\n            }).join(\" \");\n    }\n\n    protected createOrderByCombinedWithSelectExpression(parentAlias: string) {\n\n        // if table has a default order then apply it\n        let orderBys = this.orderBys;\n        if (!Object.keys(orderBys).length && !this.fromTableName) {\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\n            orderBys = metadata.table.orderBy || {};\n        }\n\n        const selectString = Object.keys(orderBys)\n            .map(columnName => {\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\n                return this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(alias + \"_\" + column + embeddedProperties.join(\"_\"));\n            })\n            .join(\", \");\n\n        const orderByString = Object.keys(orderBys)\n            .map(columnName => {\n                const [alias, column, ...embeddedProperties] = columnName.split(\".\");\n                return this.connection.driver.escapeAliasName(parentAlias) + \".\" + this.connection.driver.escapeColumnName(alias + \"_\" + column + embeddedProperties.join(\"_\")) + \" \" + this.orderBys[columnName];\n            })\n            .join(\", \");\n\n        return [selectString, orderByString];\n    }\n\n    protected createOrderByExpression() {\n\n        let orderBys = this.orderBys;\n\n        // if table has a default order then apply it\n        if (!Object.keys(orderBys).length && !this.fromTableName) {\n            const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\n            orderBys = metadata.table.orderBy || {};\n        }\n\n        // if user specified a custom order then apply it\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        return this.replacePropertyNames(columnName) + \" \" + this.orderBys[columnName];\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    protected createLimitExpression() {\n        if (!this.limit) return \"\";\n        return \" LIMIT \" + this.limit;\n    }\n\n    protected createOffsetExpression() {\n        if (!this.offset) return \"\";\n        return \" OFFSET \" + this.offset;\n    }\n\n    private extractJoinMappings(): JoinMapping[] {\n        const mappings: JoinMapping[] = [];\n        this.joins\n            .filter(join => !!join.mapToProperty)\n            .forEach(join => {\n                const [parentName, propertyName] = (join.mapToProperty as string).split(\".\");\n                mappings.push({\n                    type: \"join\",\n                    alias: join.alias,\n                    parentName: parentName,\n                    propertyName: propertyName,\n                    isMany: join.isMappingMany\n                } as JoinMapping);\n            });\n\n        this.joinRelationIds\n            .filter(join => !!join.mapToProperty)\n            .forEach(join => {\n                const [parentName, propertyName] = (join.mapToProperty as string).split(\".\");\n                mappings.push({\n                    type: \"relationId\",\n                    alias: join.alias,\n                    parentName: parentName,\n                    propertyName: propertyName,\n                    isMany: false\n                });\n            });\n\n        return mappings;\n    }\n\n    protected join(joinType: \"INNER\"|\"LEFT\", property: string, alias: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\n    protected join(joinType: \"INNER\"|\"LEFT\", entity: Function, alias: string, condition?: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\n    protected join(joinType: \"INNER\"|\"LEFT\", entityOrProperty: Function|string, alias: string, condition: string, options?: JoinOptions, mapToProperty?: string, isMappingMany?: boolean): this;\n    protected join(joinType: \"INNER\"|\"LEFT\", entityOrProperty: Function|string, alias: string, condition: string = \"\", options?: JoinOptions, mapToProperty?: string, isMappingMany: boolean = false): this {\n\n        // todo: entityOrProperty can be a table name. implement if its a table\n        // todo: entityOrProperty can be target name. implement proper behaviour if it is.\n\n        let tableName = \"\";\n        const aliasObj = new Alias(alias);\n        this.aliasMap.addAlias(aliasObj);\n        if (entityOrProperty instanceof Function) {\n            aliasObj.target = entityOrProperty;\n\n        } else if (this.isPropertyAlias(entityOrProperty)) {\n            [aliasObj.parentAliasName, aliasObj.parentPropertyName] = entityOrProperty.split(\".\");\n\n        } else if (typeof entityOrProperty === \"string\") {\n            tableName = entityOrProperty;\n            if (!mapToProperty)\n                mapToProperty = entityOrProperty;\n        }\n\n        const join: Join = {\n            type: joinType,\n            alias: aliasObj,\n            tableName: tableName,\n            condition: condition,\n            options: options,\n            mapToProperty: mapToProperty,\n            isMappingMany: isMappingMany\n        };\n        this.joins.push(join);\n        return this;\n    }\n\n    protected joinRelationId(joinType: \"LEFT\"|\"INNER\", mapToProperty: string|undefined, property: string, condition?: string): this {\n\n        if (!this.isPropertyAlias(property))\n            throw new Error(\"Only entity relations are allowed in the leftJoinRelationId operation\"); // todo: also check if that relation really has entityId\n\n        const [parentAliasName, parentPropertyName] = property.split(\".\");\n        const alias = parentAliasName + \"_\" + parentPropertyName + \"_relation_id\";\n\n        const aliasObj = new Alias(alias);\n        this.aliasMap.addAlias(aliasObj);\n        aliasObj.parentAliasName = parentAliasName;\n        aliasObj.parentPropertyName = parentPropertyName;\n\n        this.joinRelationIds.push({\n            type: joinType,\n            mapToProperty: mapToProperty,\n            alias: aliasObj,\n            condition: condition\n        });\n\n        return this;\n    }\n\n    private isValueSimpleString(str: any) {\n        return /^[A-Za-z0-9_-]+$/.test(str);\n    }\n\n    private isPropertyAlias(str: any): str is string {\n        if (!(typeof str === \"string\"))\n            return false;\n        if (str.indexOf(\".\") === -1)\n            return false;\n\n        const aliasName = str.split(\".\")[0];\n        const propertyName = str.split(\".\")[1];\n\n        if (!aliasName || !propertyName)\n            return false;\n\n        const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        const propertyNameRegexp = aliasNameRegexp;\n        if (!aliasNameRegexp.test(aliasName) || !propertyNameRegexp.test(propertyName))\n            return false;\n\n        return true;\n    }\n\n    /**\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\n     */\n    protected createWhereIdsExpression(ids: any[]): [string, ObjectLiteral] {\n        const metadata = this.connection.getMetadata(this.aliasMap.mainAlias.target);\n\n        // create shortcuts for better readability\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\n\n        const alias = this.aliasMap.mainAlias.name;\n        const parameters: ObjectLiteral = {};\n        const whereStrings = ids.map((id, index) => {\n            const whereSubStrings: string[] = [];\n            if (metadata.hasMultiplePrimaryKeys) {\n                metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(primaryColumn.name) + \"=:id_\" + index + \"_\" + secondIndex);\n                    parameters[\"id_\" + index + \"_\" + secondIndex] = id[primaryColumn.name];\n                });\n                metadata.parentIdColumns.forEach((primaryColumn, secondIndex) => {\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(id[primaryColumn.name]) + \"=:parentId_\" + index + \"_\" + secondIndex);\n                    parameters[\"parentId_\" + index + \"_\" + secondIndex] = id[primaryColumn.propertyName];\n                });\n            } else {\n                if (metadata.primaryColumns.length > 0) {\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(metadata.firstPrimaryColumn.name) + \"=:id_\" + index);\n                    parameters[\"id_\" + index] = id;\n\n                } else if (metadata.parentIdColumns.length > 0) {\n                    whereSubStrings.push(escapeAlias(alias) + \".\" + escapeColumn(metadata.parentIdColumns[0].name) + \"=:parentId_\" + index);\n                    parameters[\"parentId_\" + index] = id;\n                }\n            }\n            return whereSubStrings.join(\" AND \");\n        });\n\n        const whereString = whereStrings.length > 1 ? \"(\" + whereStrings.join(\" OR \") + \")\" : whereStrings[0];\n        return [whereString, parameters];\n    }\n\n    protected async getQueryRunner(): Promise<QueryRunner> {\n\n        if (this.queryRunnerProvider instanceof QueryRunnerProvider) {\n            return this.queryRunnerProvider.provide();\n\n        } else { // means its empty\n            return this.connection.driver.createQueryRunner();\n        }\n    }\n\n    protected hasOwnQueryRunner(): boolean {\n        return !this.queryRunnerProvider;\n    }\n\n}\n","import {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * This class wraps entities and provides functions there to lazily load its relations.\n */\nexport class LazyRelationsWrapper {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    wrap(object: Object, relation: RelationMetadata) {\n        const connection = this.connection;\n        const index = \"__\" + relation.propertyName + \"__\";\n        const promiseIndex = \"__promise__\" + relation.propertyName + \"__\";\n        const resolveIndex = \"__has__\" + relation.propertyName + \"__\";\n\n        Object.defineProperty(object, relation.propertyName, {\n            get: function() {\n                if (this[resolveIndex] === true)\n                    return Promise.resolve(this[index]);\n                if (this[promiseIndex])\n                    return this[promiseIndex];\n\n                // create shortcuts for better readability\n                const escapeAlias = (alias: string) => connection.driver.escapeAliasName(alias);\n                const escapeColumn = (column: string) => connection.driver.escapeColumnName(column);\n\n                const qb = new QueryBuilder(connection);\n                if (relation.isManyToMany) {\n\n                    if (relation.isManyToManyOwner) {\n                        qb.select(relation.propertyName)\n                            .from(relation.type, relation.propertyName)\n                            .innerJoin(relation.junctionEntityMetadata.table.name, relation.junctionEntityMetadata.table.name,\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.joinTable.joinColumnName)}=:${relation.propertyName}Id AND ` +\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.joinTable.inverseJoinColumnName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.joinTable.referencedColumn.propertyName)}`)\n                            .setParameter(relation.propertyName + \"Id\", this[relation.referencedColumn.propertyName]);\n\n                    } else { // non-owner\n                        qb.select(relation.propertyName)\n                            .from(relation.type, relation.propertyName)\n                            .innerJoin(relation.junctionEntityMetadata.table.name, relation.junctionEntityMetadata.table.name,\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.inverseRelation.joinTable.inverseJoinColumnName)}=:${relation.propertyName}Id AND ` +\n                                `${escapeAlias(relation.junctionEntityMetadata.table.name)}.${escapeColumn(relation.inverseRelation.joinTable.joinColumnName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.inverseRelation.joinTable.referencedColumn.propertyName)}`)\n                            .setParameter(relation.propertyName + \"Id\", this[relation.inverseRelation.referencedColumn.propertyName]);\n                    }\n\n                    this[promiseIndex] = qb.getMany().then(results => {\n                        this[index] = results;\n                        this[resolveIndex] = true;\n                        delete this[promiseIndex];\n                        return this[index];\n                    }).catch(err => {\n                        throw err;\n                    });\n                    return this[promiseIndex];\n\n                } else if (relation.isOneToMany) {\n\n                    qb.select(relation.propertyName)\n                        .from(relation.inverseRelation.entityMetadata.target, relation.propertyName)\n                        .innerJoin(`${relation.propertyName}.${relation.inverseRelation.propertyName}`, relation.entityMetadata.targetName)\n                        .where(relation.entityMetadata.targetName + \".\" + relation.inverseEntityMetadata.firstPrimaryColumn.propertyName + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) });\n\n                    this[promiseIndex] = qb.getMany().then(results => {\n                        this[index] = results;\n                        this[resolveIndex] = true;\n                        delete this[promiseIndex];\n                        return this[index];\n\n                    }).catch(err => {\n                        throw err;\n                    });\n                    return this[promiseIndex];\n\n                } else {\n\n                    if (relation.hasInverseSide) {\n                        qb.select(relation.propertyName)\n                            .from(relation.inverseRelation.entityMetadata.target, relation.propertyName)\n                            .innerJoin(`${relation.propertyName}.${relation.inverseRelation.propertyName}`, relation.entityMetadata.targetName)\n                            .where(relation.entityMetadata.targetName + \".\" + relation.joinColumn.referencedColumn.name + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) }); // is referenced column usage is correct here?\n\n                    } else {\n                        // (ow) post.category<=>category.post\n                        // loaded: category from post\n                        // example: SELECT category.id AS category_id, category.name AS category_name FROM category category\n                        //              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\n                        qb.select(relation.propertyName) // category\n                            .from(relation.type, relation.propertyName) // Category, category\n                            .innerJoin(relation.entityMetadata.target as Function, relation.entityMetadata.name,\n                                `${escapeAlias(relation.entityMetadata.name)}.${escapeColumn(relation.propertyName)}=${escapeAlias(relation.propertyName)}.${escapeColumn(relation.referencedColumn.propertyName)}`)\n                            .where(relation.entityMetadata.name + \".\" + relation.joinColumn.referencedColumn.name + \"=:id\", { id: relation.entityMetadata.getEntityIdMixedMap(this) }); // is referenced column usage is correct here?\n                    }\n\n                    this[promiseIndex] = qb.getOne().then(result => {\n                        this[index] = result;\n                        this[resolveIndex] = true;\n                        delete this[promiseIndex];\n                        return this[index];\n\n                    }).catch(err => {\n                        throw err;\n                    });\n                    return this[promiseIndex];\n                }\n            },\n            set: function(promise: Promise<any>) {\n                if (promise instanceof Promise) {\n                    promise.then(result => {\n                        this[index] = result;\n                        this[resolveIndex] = true;\n                    });\n                } else {\n                    this[index] = promise;\n                    this[resolveIndex] = true;\n                }\n            },\n            configurable: true\n        });\n    }\n\n}","import {TableMetadata} from \"./TableMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {RelationMetadata, PropertyTypeInFunction} from \"./RelationMetadata\";\nimport {IndexMetadata} from \"./IndexMetadata\";\nimport {RelationTypes} from \"./types/RelationTypes\";\nimport {ForeignKeyMetadata} from \"./ForeignKeyMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {EntityMetadataArgs} from \"../metadata-args/EntityMetadataArgs\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\n\n// todo: IDEA. store all entity metadata in the EntityMetadata too? (this will open more features for metadata objects + no need to access connection in lot of places)\n\n/**\n * Contains all entity metadata.\n */\nexport class EntityMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * If entity's table is a closure-typed table, then this entity will have a closure junction table metadata.\n     */\n    closureJunctionTable: EntityMetadata;\n\n    /**\n     * Parent's entity metadata. Used in inheritance patterns.\n     */\n    parentEntityMetadata: EntityMetadata;\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used to generate and normalize names.\n     */\n    readonly namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Target class to which this entity metadata is bind.\n     * Note, that when using table inheritance patterns target can be different rather then table's target.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Indicates if this entity metadata of a junction table, or not.\n     */\n    readonly junction: boolean;\n\n    /**\n     * Entity's table metadata.\n     */\n    readonly table: TableMetadata;\n\n    /**\n     * Entity's relation metadatas.\n     */\n    readonly relations: RelationMetadata[];\n\n    /**\n     * Entity's index metadatas.\n     */\n    readonly indices: IndexMetadata[];\n\n    /**\n     * Entity's foreign key metadatas.\n     */\n    readonly foreignKeys: ForeignKeyMetadata[] = [];\n\n    /**\n     * Entity's embedded metadatas.\n     */\n    readonly embeddeds: EmbeddedMetadata[];\n\n    /**\n     * If this entity metadata's table using one of the inheritance patterns,\n     * then this will contain what pattern it uses.\n     */\n    readonly inheritanceType?: \"single-table\"|\"class-table\";\n\n    /**\n     * If this entity metadata is a child table of some table, it should have a discriminator value.\n     * Used to store a value in a discriminator column.\n     */\n    readonly discriminatorValue?: string;\n\n    /**\n     * Global tables prefix. Customer can set a global table prefix for all tables in the database.\n     */\n    readonly tablesPrefix?: string;\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity's column metadatas.\n     */\n    private readonly _columns: ColumnMetadata[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(args: EntityMetadataArgs,\n                private lazyRelationsWrapper: LazyRelationsWrapper) {\n        this.target = args.target;\n        this.junction = args.junction;\n        this.tablesPrefix = args.tablesPrefix;\n        this.namingStrategy = args.namingStrategy;\n        this.table = args.tableMetadata;\n        this._columns = args.columnMetadatas || [];\n        this.relations = args.relationMetadatas || [];\n        this.indices = args.indexMetadatas || [];\n        this.foreignKeys = args.foreignKeyMetadatas || [];\n        this.embeddeds = args.embeddedMetadatas || [];\n        this.discriminatorValue = args.discriminatorValue;\n        this.inheritanceType = args.inheritanceType;\n\n        this.table.entityMetadata = this;\n        this._columns.forEach(column => column.entityMetadata = this);\n        this.relations.forEach(relation => relation.entityMetadata = this);\n        this.foreignKeys.forEach(foreignKey => foreignKey.entityMetadata = this);\n        this.indices.forEach(index => index.entityMetadata = this);\n        this.embeddeds.forEach(embedded => {\n            embedded.entityMetadata = this;\n            embedded.columns.forEach(column => column.entityMetadata = this);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity's name. Equal to entity target class's name if target is set to table, or equals to table name if its set.\n     */\n    get name(): string {\n        if (!this.table)\n            throw new Error(\"No table target set to the entity metadata.\");\n\n        return this.targetName ? this.targetName : this.table.name;\n    }\n\n    /**\n     * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n     */\n    get columns(): ColumnMetadata[] {\n        let allColumns: ColumnMetadata[] = ([] as ColumnMetadata[]).concat(this._columns);\n        this.embeddeds.forEach(embedded => {\n            allColumns = allColumns.concat(embedded.columns);\n        });\n        return allColumns;\n    }\n\n    /**\n     * All columns of the entity, including columns that are coming from the embeddeds of this entity,\n     * and including columns from the parent entities.\n     */\n    get allColumns(): ColumnMetadata[] {\n        let columns = this.columns;\n        if (this.parentEntityMetadata)\n            columns = columns.concat(this.parentEntityMetadata.columns);\n\n        return columns;\n    }\n\n    /**\n     * All relations of the entity, including relations from the parent entities.\n     */\n    get allRelations(): RelationMetadata[] {\n        let relations = this.relations;\n        if (this.parentEntityMetadata)\n            relations = relations.concat(this.parentEntityMetadata.relations);\n\n        return relations;\n    }\n\n    /**\n     * Gets the name of the target.\n     */\n    get targetName(): string {\n        if (typeof this.target === \"string\")\n            return this.target;\n\n        if (this.target instanceof Function)\n            return (<any> this.target).name;\n\n        return \"\";\n    }\n\n    /**\n     * Checks if entity's table has multiple primary columns.\n     */\n    get hasMultiplePrimaryKeys() {\n        return this.primaryColumns.length > 1;\n    }\n\n    /**\n     * Gets the primary column.\n     *\n     * @deprecated\n     */\n    get primaryColumn(): ColumnMetadata {\n        const primaryKey = this.primaryColumns[0];\n        if (!primaryKey)\n            throw new Error(`Primary key is not set for the ${this.name} entity.`);\n\n        return primaryKey;\n    }\n\n    /**\n     * Checks if table has generated column.\n     */\n    get hasGeneratedColumn(): boolean {\n        return !!this.generatedColumnIfExist;\n    }\n\n    /**\n     * Gets the column with generated flag.\n     */\n    get generatedColumn(): ColumnMetadata {\n        const generatedColumn = this.generatedColumnIfExist;\n        if (!generatedColumn)\n            throw new Error(`Generated column was not found`);\n\n        return generatedColumn;\n    }\n\n    /**\n     * Gets the generated column if it exists, or returns undefined if it does not.\n     */\n    get generatedColumnIfExist(): ColumnMetadata|undefined {\n        return this._columns.find(column => column.isGenerated);\n    }\n\n    /**\n     * Gets first primary column. In the case if table contains multiple primary columns it\n     * throws error.\n     */\n    get firstPrimaryColumn(): ColumnMetadata {\n        if (this.hasMultiplePrimaryKeys)\n            throw new Error(`Entity ${this.name} has multiple primary keys. This operation is not supported on entities with multiple primary keys`);\n\n        return this.primaryColumns[0];\n    }\n\n    /**\n     * Gets the primary columns.\n     */\n    get primaryColumns(): ColumnMetadata[] {\n        // const originalPrimaryColumns = this._columns.filter(column => column.isPrimary);\n        // const parentEntityPrimaryColumns = this.hasParentIdColumn ? [this.parentIdColumn] : [];\n        // return originalPrimaryColumns.concat(parentEntityPrimaryColumns);\n        return this._columns.filter(column => column.isPrimary);\n        // const originalPrimaryColumns = this._columns.filter(column => column.isPrimary);\n        // const parentEntityPrimaryColumns = this.parentEntityMetadata ? this.parentEntityMetadata.primaryColumns : [];\n        // return originalPrimaryColumns.concat(parentEntityPrimaryColumns);\n    }\n\n    get primaryColumnsWithParentIdColumns(): ColumnMetadata[] {\n        return this.primaryColumns.concat(this.parentIdColumns);\n    }\n\n    /**\n     * Gets all primary columns including columns from the parent entities.\n     */\n    get allPrimaryColumns(): ColumnMetadata[] {\n        return this.primaryColumns.concat(this.parentPrimaryColumns);\n    }\n\n    /**\n     * Gets the primary columns of the parent entity metadata.\n     * If parent entity metadata does not exist then it simply returns empty array.\n     */\n    get parentPrimaryColumns(): ColumnMetadata[] {\n        if (this.parentEntityMetadata)\n            return this.parentEntityMetadata.primaryColumns;\n\n        return [];\n    }\n\n    /**\n     * Gets only primary columns owned by this entity.\n     */\n    get ownPimaryColumns(): ColumnMetadata[] {\n        return this._columns.filter(column => column.isPrimary);\n    }\n\n    /**\n     * Checks if entity has a create date column.\n     */\n    get hasCreateDateColumn(): boolean {\n        return !!this._columns.find(column => column.mode === \"createDate\");\n    }\n\n    /**\n     * Gets entity column which contains a create date value.\n     */\n    get createDateColumn(): ColumnMetadata {\n        const column = this._columns.find(column => column.mode === \"createDate\");\n        if (!column)\n            throw new Error(`CreateDateColumn was not found in entity ${this.name}`);\n\n        return column;\n    }\n\n    /**\n     * Checks if entity has an update date column.\n     */\n    get hasUpdateDateColumn(): boolean {\n        return !!this._columns.find(column => column.mode === \"updateDate\");\n    }\n\n    /**\n     * Gets entity column which contains an update date value.\n     */\n    get updateDateColumn(): ColumnMetadata {\n        const column = this._columns.find(column => column.mode === \"updateDate\");\n        if (!column)\n            throw new Error(`UpdateDateColumn was not found in entity ${this.name}`);\n\n        return column;\n    }\n\n    /**\n     * Checks if entity has a version column.\n     */\n    get hasVersionColumn(): boolean {\n        return !!this._columns.find(column => column.mode === \"version\");\n    }\n\n    /**\n     * Gets entity column which contains an entity version.\n     */\n    get versionColumn(): ColumnMetadata {\n        const column = this._columns.find(column => column.mode === \"version\");\n        if (!column)\n            throw new Error(`VersionColumn was not found in entity ${this.name}`);\n\n        return column;\n    }\n\n    /**\n     * Checks if entity has a discriminator column.\n     */\n    get hasDiscriminatorColumn(): boolean {\n        return !!this._columns.find(column => column.mode === \"discriminator\");\n    }\n\n    /**\n     * Gets the discriminator column used to store entity identificator in single-table inheritance tables.\n     */\n    get discriminatorColumn(): ColumnMetadata {\n        const column = this._columns.find(column => column.mode === \"discriminator\");\n        if (!column)\n            throw new Error(`DiscriminatorColumn was not found in entity ${this.name}`);\n\n        return column;\n    }\n\n    /**\n     * Checks if entity has a tree level column.\n     */\n    get hasTreeLevelColumn(): boolean {\n        return !!this._columns.find(column => column.mode === \"treeLevel\");\n    }\n\n    get treeLevelColumn(): ColumnMetadata {\n        const column = this._columns.find(column => column.mode === \"treeLevel\");\n        if (!column)\n            throw new Error(`TreeLevelColumn was not found in entity ${this.name}`);\n\n        return column;\n    }\n\n    /**\n     * Checks if entity has a tree level column.\n     */\n    get hasParentIdColumn(): boolean {\n        return !!this._columns.find(column => column.mode === \"parentId\");\n    }\n\n    get parentIdColumn(): ColumnMetadata {\n        const column = this._columns.find(column => column.mode === \"parentId\");\n        if (!column)\n            throw new Error(`Parent id column was not found in entity ${this.name}`);\n\n        return column;\n    }\n\n    get parentIdColumns(): ColumnMetadata[] {\n        return this._columns.filter(column => column.mode === \"parentId\");\n    }\n\n    /**\n     * Gets single (values of which does not contain arrays) relations.\n     */\n    get singleValueRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => {\n            return relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.ONE_TO_MANY;\n        });\n    }\n\n    /**\n     * Gets single (values of which does not contain arrays) relations.\n     */\n    get multiValueRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => {\n            return relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.ONE_TO_MANY;\n        });\n    }\n\n    /**\n     * Gets only one-to-one relations of the entity.\n     */\n    get oneToOneRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => relation.relationType === RelationTypes.ONE_TO_ONE);\n    }\n\n    /**\n     * Gets only owner one-to-one relations of the entity.\n     */\n    get ownerOneToOneRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => relation.relationType === RelationTypes.ONE_TO_ONE && relation.isOwning);\n    }\n\n    /**\n     * Gets only one-to-many relations of the entity.\n     */\n    get oneToManyRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => relation.relationType === RelationTypes.ONE_TO_MANY);\n    }\n\n    /**\n     * Gets only many-to-one relations of the entity.\n     */\n    get manyToOneRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => relation.relationType === RelationTypes.MANY_TO_ONE);\n    }\n\n    /**\n     * Gets only many-to-many relations of the entity.\n     */\n    get manyToManyRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => relation.relationType === RelationTypes.MANY_TO_MANY);\n    }\n\n    /**\n     * Gets only owner many-to-many relations of the entity.\n     */\n    get ownerManyToManyRelations(): RelationMetadata[] {\n        return this.relations.filter(relation => relation.relationType === RelationTypes.MANY_TO_MANY && relation.isOwning);\n    }\n\n    /**\n     * Gets only owner one-to-one and many-to-one relations.\n     */\n    get relationsWithJoinColumns() {\n        return this.ownerOneToOneRelations.concat(this.manyToOneRelations);\n    }\n\n    /**\n     * Checks if there is a tree parent relation. Used only in tree-tables.\n     */\n    get hasTreeParentRelation() {\n        return !!this.relations.find(relation => relation.isTreeParent);\n    }\n\n    /**\n     * Tree parent relation. Used only in tree-tables.\n     */\n    get treeParentRelation() {\n        const relation = this.relations.find(relation => relation.isTreeParent);\n        if (!relation)\n            throw new Error(`TreeParent relation was not found in entity ${this.name}`);\n\n        return relation;\n    }\n\n    /**\n     * Checks if there is a tree children relation. Used only in tree-tables.\n     */\n    get hasTreeChildrenRelation() {\n        return !!this.relations.find(relation => relation.isTreeChildren);\n    }\n\n    /**\n     * Tree children relation. Used only in tree-tables.\n     */\n    get treeChildrenRelation() {\n        const relation = this.relations.find(relation => relation.isTreeChildren);\n        if (!relation)\n            throw new Error(`TreeParent relation was not found in entity ${this.name}`);\n\n        return relation;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new entity.\n     */\n    create(): any {\n\n        // if target is set to a function (e.g. class) that can be created then create it\n        if (this.target instanceof Function)\n            return new (<any> this.target)();\n\n        // otherwise simply return a new empty object\n        const newObject = {};\n        this.relations\n            .filter(relation => relation.isLazy)\n            .forEach(relation => this.lazyRelationsWrapper.wrap(newObject, relation));\n\n        return newObject;\n    }\n\n    /**\n     * Creates an object - map of columns and relations of the entity.\n     */\n    createPropertiesMap(): { [name: string]: string|any } {\n        const entity: { [name: string]: string|any } = {};\n        this._columns.forEach(column => entity[column.propertyName] = column.propertyName);\n        this.relations.forEach(relation => entity[relation.propertyName] = relation.propertyName);\n        return entity;\n    }\n\n    /**\n     * Computes property name of the entity using given PropertyTypeInFunction.\n     */\n    computePropertyName(nameOrFn: PropertyTypeInFunction<any>) {\n        return typeof nameOrFn === \"string\" ? nameOrFn : nameOrFn(this.createPropertiesMap());\n    }\n\n    /**\n     * todo: undefined entities should not go there\n     */\n    getEntityIdMap(entity: any): ObjectLiteral|undefined {\n        if (!entity)\n            return undefined;\n\n        const map: ObjectLiteral = {};\n        if (this.parentEntityMetadata) {\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\n                const entityValue = entity[column.propertyName];\n                if (entityValue === null || entityValue === undefined)\n                    return;\n\n                // if entity id is a relation, then extract referenced column from that relation\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\n\n                if (columnRelation && columnRelation.joinColumn) {\n                    map[column.propertyName] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\n                    map[column.propertyName] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\n                } else {\n                    map[column.propertyName] = entityValue;\n                }\n            });\n\n        } else {\n            this.primaryColumns.forEach(column => {\n                const entityValue = entity[column.propertyName];\n                if (entityValue === null || entityValue === undefined)\n                    return;\n\n                // if entity id is a relation, then extract referenced column from that relation\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\n\n                if (columnRelation && columnRelation.joinColumn) {\n                    map[column.propertyName] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\n                    map[column.propertyName] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\n                } else {\n                    map[column.propertyName] = entityValue;\n                }\n            });\n        }\n        return Object.keys(map).length > 0 ? map : undefined;\n    }\n\n    /**\n     * Same as getEntityIdMap, but instead of id column property names it returns database column names.\n     */\n    getDatabaseEntityIdMap(entity: ObjectLiteral): ObjectLiteral|undefined {\n        const map: ObjectLiteral = {};\n        if (this.parentEntityMetadata) {\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\n                const entityValue = entity[column.propertyName];\n                if (entityValue === null || entityValue === undefined)\n                    return;\n\n                // if entity id is a relation, then extract referenced column from that relation\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\n\n                if (columnRelation && columnRelation.joinColumn) {\n                    map[column.name] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\n                    map[column.name] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\n                } else {\n                    map[column.name] = entityValue;\n                }\n            });\n\n        } else {\n            this.primaryColumns.forEach(column => {\n                const entityValue = entity[column.propertyName];\n                if (entityValue === null || entityValue === undefined)\n                    return;\n\n                // if entity id is a relation, then extract referenced column from that relation\n                const columnRelation = this.relations.find(relation => relation.propertyName === column.propertyName);\n\n                if (columnRelation && columnRelation.joinColumn) {\n                    map[column.name] = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\n                } else if (columnRelation && columnRelation.inverseRelation.joinColumn) {\n                    map[column.name] = entityValue[columnRelation.inverseRelation.joinColumn.referencedColumn.propertyName];\n                } else {\n                    map[column.name] = entityValue;\n                }\n            });\n        }\n        const hasAllIds = Object.keys(map).every(key => {\n            return map[key] !== undefined && map[key] !== null;\n        });\n        return hasAllIds ? map : undefined;\n    }\n\n    /**\n\n    createSimpleIdMap(id: any): ObjectLiteral {\n        const map: ObjectLiteral = {};\n        if (this.parentEntityMetadata) {\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\n                map[column.propertyName] = id;\n            });\n\n        } else {\n            this.primaryColumns.forEach(column => {\n                map[column.propertyName] = id;\n            });\n        }\n        return map;\n    } */\n\n    /**\n     * Same as createSimpleIdMap, but instead of id column property names it returns database column names.\n\n    createSimpleDatabaseIdMap(id: any): ObjectLiteral {\n        const map: ObjectLiteral = {};\n        if (this.parentEntityMetadata) {\n            this.primaryColumnsWithParentIdColumns.forEach(column => {\n                map[column.name] = id;\n            });\n\n        } else {\n            this.primaryColumns.forEach(column => {\n                map[column.name] = id;\n            });\n        }\n        return map;\n    }*/\n\n    /**\n     * todo: undefined entities should not go there??\n     * todo: shouldnt be entity ObjectLiteral here?\n     */\n    getEntityIdMixedMap(entity: any): any {\n        if (!entity)\n            return undefined;\n\n        const idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n\n        } else if (idMap) {\n            return idMap[this.firstPrimaryColumn.propertyName]; // todo: what about parent primary column?\n        }\n\n        return idMap;\n    }\n\n    /**\n     * Same as `getEntityIdMap` but the key of the map will be the column names instead of the property names.\n     */\n    getEntityIdColumnMap(entity: any): ObjectLiteral|undefined {\n        return this.transformIdMapToColumnNames(this.getEntityIdMap(entity));\n    }\n\n    transformIdMapToColumnNames(idMap: ObjectLiteral|undefined) {\n        if (!idMap) {\n            return idMap;\n        }\n        const map: ObjectLiteral = {};\n        Object.keys(idMap).forEach(propertyName => {\n            const column = this.getColumnByPropertyName(propertyName);\n            if (column) {\n                map[column.name] = idMap[propertyName];\n            }\n        });\n        return map;\n    }\n\n    getColumnByPropertyName(propertyName: string) {\n        return this._columns.find(column => column.propertyName === propertyName);\n    }\n\n    /**\n     * Checks if column with the given property name exist.\n     */\n    hasColumnWithPropertyName(propertyName: string): boolean {\n        return !!this._columns.find(column => column.propertyName === propertyName);\n    }\n\n    /**\n     * Checks if column with the given database name exist.\n     */\n    hasColumnWithDbName(name: string): boolean {\n        return !!this._columns.find(column => column.name === name);\n    }\n\n    /**\n     * Checks if relation with the given property name exist.\n     */\n    hasRelationWithPropertyName(propertyName: string): boolean {\n        return !!this.relations.find(relation => relation.propertyName === propertyName);\n    }\n\n    /**\n     * Finds relation with the given property name.\n     */\n    findRelationWithPropertyName(propertyName: string): RelationMetadata {\n        const relation = this.relations.find(relation => relation.propertyName === propertyName);\n        if (!relation)\n            throw new Error(`Relation with property name ${propertyName} in ${this.name} entity was not found.`);\n\n        return relation;\n    }\n\n    /**\n     * Checks if relation with the given name exist.\n     */\n    hasRelationWithDbName(dbName: string): boolean {\n        return !!this.relationsWithJoinColumns.find(relation => relation.name === dbName);\n    }\n\n    /**\n     * Finds relation with the given name.\n     */\n    findRelationWithDbName(name: string): RelationMetadata {\n        const relation = this.relationsWithJoinColumns.find(relation => relation.name === name);\n        if (!relation)\n            throw new Error(`Relation with name ${name} in ${this.name} entity was not found.`);\n\n        return relation;\n    }\n\n    addColumn(column: ColumnMetadata) {\n        this._columns.push(column);\n        column.entityMetadata = this;\n    }\n\n    extractNonEmptyColumns(object: ObjectLiteral): ColumnMetadata[] {\n        return this.columns.filter(column => !!object[column.propertyName]);\n    }\n\n    extractNonEmptySingleValueRelations(object: ObjectLiteral): RelationMetadata[] {\n        return this.relations.filter(relation => {\n            return (relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.MANY_TO_ONE)\n                && !!object[relation.propertyName];\n        });\n    }\n\n    extractNonEmptyMultiValueRelations(object: ObjectLiteral): RelationMetadata[] {\n        return this.relations.filter(relation => {\n            return (relation.relationType === RelationTypes.MANY_TO_MANY || relation.relationType === RelationTypes.ONE_TO_MANY)\n                && !!object[relation.propertyName];\n        });\n    }\n\n    extractExistSingleValueRelations(object: ObjectLiteral): RelationMetadata[] {\n        return this.relations.filter(relation => {\n            return (relation.relationType === RelationTypes.ONE_TO_ONE || relation.relationType === RelationTypes.MANY_TO_ONE)\n                && object.hasOwnProperty(relation.propertyName);\n        });\n    }\n\n    extractExistMultiValueRelations(object: ObjectLiteral): RelationMetadata[] {\n        return this.relations.filter(relation => {\n            return (relation.relationType === RelationTypes.MANY_TO_MANY || relation.relationType === RelationTypes.ONE_TO_MANY)\n                && object.hasOwnProperty(relation.propertyName);\n        });\n    }\n\n    checkIfObjectContainsAllPrimaryKeys(object: ObjectLiteral) {\n        return this.primaryColumns.every(primaryColumn => {\n            return object.hasOwnProperty(primaryColumn.propertyName);\n        });\n    }\n\n    compareEntities(firstEntity: any, secondEntity: any) {\n        const firstEntityIds = this.getEntityIdMap(firstEntity);\n        const secondEntityIds = this.getEntityIdMap(secondEntity);\n        return this.compareIds(firstEntityIds, secondEntityIds);\n    }\n\n    compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n\n        return Object.keys(firstId).every(key => {\n            return firstId[key] === secondId[key];\n        });\n    }\n\n    /**\n     * Compares two entity ids.\n     * If any of the given value is empty then it will return false.\n     */\n    compareEntityMixedIds(firstId: any, secondId: any): boolean {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n\n        if (this.hasMultiplePrimaryKeys) {\n            return Object.keys(firstId).every(key => {\n                return firstId[key] === secondId[key];\n            });\n        } else {\n            return firstId === secondId;\n        }\n    }\n\n    /**\n     * Iterates throw entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    extractRelationValuesFromEntity(entity: ObjectLiteral, relations: RelationMetadata[]): [RelationMetadata, any, EntityMetadata][] {\n        const relationsAndValues: [RelationMetadata, any, EntityMetadata][] = [];\n        relations.forEach(relation => {\n            const value = relation.getEntityValue(entity);\n            if (value instanceof Array) {\n                value.forEach(subValue => relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]));\n            } else if (value) {\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\n            }\n        });\n        return relationsAndValues;\n    }\n\n    /**\n     * Checks if given entity has an id.\n     */\n    hasId(entity: ObjectLiteral): boolean {\n\n        // if (this.metadata.parentEntityMetadata) {\n        //     return this.metadata.parentEntityMetadata.parentIdColumns.every(parentIdColumn => {\n        //         const columnName = parentIdColumn.propertyName;\n        //         return !!entity &&\n        //             entity.hasOwnProperty(columnName) &&\n        //             entity[columnName] !== null &&\n        //             entity[columnName] !== undefined &&\n        //             entity[columnName] !== \"\";\n        //     });\n\n        // } else {\n        return this.primaryColumns.every(primaryColumn => {\n            const columnName = primaryColumn.propertyName;\n            return !!entity &&\n                entity.hasOwnProperty(columnName) &&\n                entity[columnName] !== null &&\n                entity[columnName] !== undefined &&\n                entity[columnName] !== \"\";\n        });\n        // }\n    }\n\n    /**\n     * Checks if there any non-nullable column exist in this entity.\n     */\n    get hasNonNullableColumns(): boolean {\n        return this.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);\n        // return this.relationsWithJoinColumns.some(relation => relation.isNullable || relation.isPrimary);\n    }\n\n}","import {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {ColumnType} from \"./types/ColumnTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\n\n/**\n * Kinda type of the column. Not a type in the database, but locally used type to determine what kind of column\n * we are working with.\n * For example, \"primary\" means that it will be a primary column, or \"createDate\" means that it will create a create\n * date column.\n */\nexport type ColumnMode = \"regular\"|\"virtual\"|\"createDate\"|\"updateDate\"|\"version\"|\"treeChildrenCount\"|\"treeLevel\"|\"discriminator\"|\"parentId\";\n\n/**\n * This metadata contains all information about entity's column.\n */\nexport class ColumnMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata where this column metadata is.\n     */\n    embeddedMetadata: EmbeddedMetadata;\n\n    /**\n     * If this column is foreign key of some relation then this relation's metadata will be here.\n     */\n    relationMetadata: RelationMetadata;\n\n    // ---------------------------------------------------------------------\n    // Public Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string|\"__virtual__\";\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * The real reflected property type.\n     */\n    // readonly propertyType: string;\n\n    /**\n     * The database type of the column.\n     */\n    readonly type: ColumnType;\n\n    /**\n     * Column's mode in which this column is working.\n     */\n    readonly mode: ColumnMode;\n\n    /**\n     * Type's length in the database.\n     */\n    readonly length: string = \"\";\n\n    /**\n     * Indicates if this column is a primary key.\n     */\n    readonly isPrimary: boolean = false;\n\n    /**\n     * Indicates if this column is generated (auto increment or generated other way).\n     */\n    readonly isGenerated: boolean = false;\n\n    /**\n     * Indicates if value in the database should be unique or not.\n     */\n    readonly isUnique: boolean = false;\n\n    /**\n     * Indicates if column can contain nulls or not.\n     */\n    readonly isNullable: boolean = false;\n\n    /**\n     * Column comment.\n     */\n    readonly comment: string = \"\";\n\n    /**\n     * Default database value.\n     */\n    readonly default: any;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    readonly precision: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    readonly scale: number;\n\n    /**\n     * Indicates if this date column will contain a timezone.\n     * Used only for date-typed column types.\n     * Note that timezone option is not supported by all databases (only postgres for now).\n     */\n    readonly timezone: boolean;\n\n    /**\n     * Indicates if date object must be stored in given date's timezone.\n     * By default date is saved in UTC timezone.\n     * Works only with \"datetime\" columns.\n     */\n    readonly localTimezone?: boolean;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Column name to be used in the database.\n     */\n    private _name: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: ColumnMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n\n        if (args.mode)\n            this.mode = args.mode;\n        // if (args.propertyType)\n        //     this.propertyType = args.propertyType.toLowerCase();\n        if (args.options.name)\n            this._name = args.options.name;\n        if (args.options.type)\n            this.type = args.options.type;\n\n        if (args.options.length)\n            this.length = String(args.options.length);\n        if (args.options.primary)\n            this.isPrimary = args.options.primary;\n        if (args.options.generated)\n            this.isGenerated = args.options.generated;\n        if (args.options.unique)\n            this.isUnique = args.options.unique;\n        if (args.options.nullable)\n            this.isNullable = args.options.nullable;\n        if (args.options.comment)\n            this.comment = args.options.comment;\n        if (args.options.default !== undefined && args.options.default !== null)\n            this.default = args.options.default;\n        if (args.options.scale)\n            this.scale = args.options.scale;\n        if (args.options.precision)\n            this.precision = args.options.precision;\n        if (args.options.timezone)\n            this.timezone = args.options.timezone;\n        if (args.options.localTimezone)\n            this.localTimezone = args.options.localTimezone;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Gets column's entity target.\n     * Original target returns target of the class where column is.\n     * This class can be an abstract class, but column even is from that class,\n     * but its more related to a specific entity. That's why we need this field.\n     */\n    get entityTarget(): Function|string {\n        return this.entityMetadata.target;\n    }\n\n    /**\n     * Column name in the database.\n     */\n    get name(): string {\n\n        // if this column is embedded's column then apply different entity\n        if (this.embeddedMetadata)\n            return this.embeddedMetadata.entityMetadata.namingStrategy.embeddedColumnName(this.embeddedMetadata.propertyName, this.propertyName, this._name);\n\n        // if there is a naming strategy then use it to normalize propertyName as column name\n        if (this.entityMetadata)\n            return this.entityMetadata.namingStrategy.columnName(this.propertyName, this._name);\n\n        throw new Error(`Column ${this._name ? this._name + \" \" : \"\"}is not attached to any entity or embedded.`);\n    }\n\n    /**\n     * Indicates if this column is in embedded, not directly in the table.\n     */\n    get isInEmbedded(): boolean {\n        return !!this.embeddedMetadata;\n    }\n\n    /**\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n     */\n    get isVirtual() {\n        return this.mode === \"virtual\";\n    }\n\n    /**\n     * Indicates if column is a parent id. Parent id columns are not mapped to the entity.\n     */\n    get isParentId() {\n        return this.mode === \"parentId\";\n    }\n\n    /**\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n     */\n    get isDiscriminator() {\n        return this.mode === \"discriminator\";\n    }\n\n    /**\n     * Indicates if this column contains an entity creation date.\n     */\n    get isCreateDate() {\n        return this.mode === \"createDate\";\n    }\n\n    /**\n     * Indicates if this column contains an entity update date.\n     */\n    get isUpdateDate() {\n        return this.mode === \"updateDate\";\n    }\n\n    /**\n     * Indicates if this column contains an entity version.\n     */\n    get isVersion() {\n        return this.mode === \"version\";\n    }\n\n    /**\n     * If this column references some column, it gets the first referenced column of this column.\n     */\n    get referencedColumn(): ColumnMetadata|undefined {\n        const foreignKey = this.entityMetadata.foreignKeys.find(foreignKey => foreignKey.columns.indexOf(this) !== -1);\n        if (foreignKey) {\n            return foreignKey.referencedColumns[0];\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Gets embedded property in which column is.\n     */\n    get embeddedProperty() {\n        if (!this.embeddedMetadata)\n            throw new Error(`This column${ this._name ? this._name + \" \" : \"\" } is not in embedded entity.`);\n\n        return this.embeddedMetadata.propertyName;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    hasEntityValue(entity: any) {\n        if (!entity)\n            return false;\n\n        if (this.isInEmbedded) {\n            return  entity[this.embeddedProperty] !== undefined &&\n                    entity[this.embeddedProperty] !== null &&\n                    entity[this.embeddedProperty][this.propertyName] !== undefined &&\n                    entity[this.embeddedProperty][this.propertyName] !== null;\n\n        } else {\n            return  entity[this.propertyName] !== undefined &&\n                    entity[this.propertyName] !== null;\n        }\n    }\n\n    getEntityValue(entity: any) {\n        if (this.isInEmbedded) {\n            if (entity[this.embeddedProperty] === undefined ||\n                entity[this.embeddedProperty] === null)\n                return undefined;\n\n            return entity[this.embeddedProperty][this.propertyName];\n        } else {\n            return entity[this.propertyName];\n        }\n    }\n\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\n\n/**\n * Table's column's schema in the database represented in this class.\n */\nexport class ColumnSchema {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string;\n\n    /**\n     * Column type.\n     */\n    type: string;\n\n    /**\n     * Column's default value.\n     */\n    default: any;\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Column's comment.\n     */\n    comment: string|undefined;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: {\n        name?: string,\n        type?: string,\n        default?: string,\n        isNullable?: boolean,\n        isGenerated?: boolean,\n        isPrimary?: boolean,\n        isUnique?: boolean,\n        comment?: string\n    }) {\n        if (options) {\n            this.name = options.name || \"\";\n            this.type = options.type || \"\";\n            this.default = options.default;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.comment = options.comment;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column schema to a new column schema with exact same properties as this column schema has.\n     */\n    clone(): ColumnSchema {\n        const newColumnSchema = new ColumnSchema();\n        newColumnSchema.name = this.name;\n        newColumnSchema.type = this.type;\n        newColumnSchema.default = this.default;\n        newColumnSchema.isNullable = this.isNullable;\n        newColumnSchema.isGenerated = this.isGenerated;\n        newColumnSchema.isPrimary = this.isPrimary;\n        newColumnSchema.isUnique = this.isUnique;\n        newColumnSchema.comment = this.comment;\n        return newColumnSchema;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new column based on the given column metadata.\n     */\n    static create(columnMetadata: ColumnMetadata, normalizedType: string): ColumnSchema {\n        const columnSchema = new ColumnSchema();\n        columnSchema.name = columnMetadata.name;\n        columnSchema.default = columnMetadata.default;\n        columnSchema.comment = columnMetadata.comment;\n        columnSchema.isGenerated = columnMetadata.isGenerated;\n        columnSchema.isNullable = columnMetadata.isNullable;\n        columnSchema.type = normalizedType;\n        columnSchema.isPrimary = columnMetadata.isPrimary;\n        columnSchema.isUnique = columnMetadata.isUnique;\n        return columnSchema;\n    }\n\n}","import {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../schema-builder/schema/ForeignKeySchema\";\nimport {IndexSchema} from \"../schema-builder/schema/IndexSchema\";\nimport {ColumnType} from \"../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single database connection.\n */\nexport interface QueryRunner {\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     * You cannot use this class's methods after its released.\n     */\n    release(): Promise<void>;\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    clearDatabase(): Promise<void>;\n\n    /**\n     * Starts transaction.\n     */\n    beginTransaction(): Promise<void>;\n\n    /**\n     * Commits transaction.\n     */\n    commitTransaction(): Promise<void>;\n\n    /**\n     * Ends transaction.\n     */\n    rollbackTransaction(): Promise<void>;\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean;\n\n    /**\n     * Executes a given SQL query and returns raw database results.\n     */\n    query(query: string, parameters?: any[]): Promise<any>;\n\n    /**\n     * Updates rows that match given simple conditions in the given table.\n     */\n    update(tableName: string, valuesMap: Object, conditions: Object): Promise<void>;\n\n    /**\n     * Inserts a new row into given table.\n     */\n    insert(tableName: string, valuesMap: Object, generatedColumn?: ColumnMetadata): Promise<any>;\n\n    /**\n     * Performs a simple DELETE query by a given conditions in a given table.\n     */\n    delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Performs a simple DELETE query by a given conditions in a given table.\n     */\n    delete(tableName: string, conditions: Object): Promise<void>;\n\n    /**\n     * Inserts new values into closure table.\n     */\n    insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number>;\n\n    /**\n     * Converts a column type of the metadata to the database column's type.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }): any;\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean;\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    loadTableSchema(tableName: string): Promise<TableSchema|undefined>;\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    loadTableSchemas(tableNames: string[]): Promise<TableSchema[]>;\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    hasTable(tableName: string): Promise<boolean>;\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    createTable(table: TableSchema): Promise<void>;\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    hasColumn(tableName: string, columnName: string): Promise<boolean>;\n\n    /**\n     * Adds a new column in the table.\n     */\n    addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Adds a new column in the table.\n     */\n    addColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Adds new columns in the table.\n     */\n    addColumns(tableSchema: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Adds new columns in the table.\n     */\n    addColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(table: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a columns in the table.\n     */\n    changeColumns(table: TableSchema, changedColumns: { oldColumn: ColumnSchema, newColumn: ColumnSchema }[]): Promise<void>;\n\n    /**\n     * Drops the column in the table.\n     */\n    dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops the column in the table.\n     */\n    dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops the column in the table.\n     */\n    dropColumn(table: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    dropColumns(table: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Updates primary keys in the table.\n     */\n    updatePrimaryKeys(table: TableSchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    createForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKey(table: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKey(table: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKeys(table: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKeys(table: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new index.\n     */\n    createIndex(tableName: string, index: IndexSchema): Promise<void>;\n\n    /**\n     * Drops an index from the table.\n     */\n    dropIndex(tableName: string, indexName: string): Promise<void>;\n\n    /**\n     * Truncates table.\n     */\n    truncate(tableName: string): Promise<void>;\n\n}","import {DriverOptions} from \"./DriverOptions\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Driver organizes TypeORM communication with specific database management system.\n */\nexport interface Driver {\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver options contains connectivity options used to connection to the database.\n     */\n    readonly options: DriverOptions;\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Closes connection with database.\n     */\n    disconnect(): Promise<void>;\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface(): any;\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    createQueryRunner(): Promise<QueryRunner>;\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]];\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string;\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string;\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string;\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, column: ColumnMetadata): any;\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column metadata.\n     */\n    prepareHydratedValue(value: any, type: ColumnMetadata): any;\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type.\n     */\n    prepareHydratedValue(value: any, column: ColumnMetadata): any;\n\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToNewEntityTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform<T>(newEntity: T, object: ObjectLiteral, metadata: EntityMetadata): T {\n        this.groupAndTransform(newEntity, object, metadata);\n        return newEntity;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    private groupAndTransform(entity: any, object: ObjectLiteral, metadata: EntityMetadata): void {\n\n        // copy regular column properties from the given object\n        metadata.allColumns\n            .filter(column => object.hasOwnProperty(column.propertyName))\n            .forEach(column => entity[column.propertyName] = object[column.propertyName]); // todo: also need to be sure that type is correct\n\n        // if relation is loaded then go into it recursively and transform its values too\n        metadata.allRelations\n            .filter(relation => object.hasOwnProperty(relation.propertyName))\n            .forEach(relation => {\n                const relationMetadata = relation.inverseEntityMetadata;\n                if (!relationMetadata)\n                    throw new Error(\"Relation metadata for the relation \" + metadata.name + \"#\" + relation.propertyName + \" is missing\");\n\n                if (relation.isManyToMany || relation.isOneToMany) {\n                    if (object[relation.propertyName] instanceof Array) {\n                        entity[relation.propertyName] = object[relation.propertyName].map((subObject: any) => {\n                            let subEntity = relationMetadata.create();\n                            // todo: support custom initial fields here\n                            if (entity[relation.propertyName] instanceof Array) {\n                                const existRelation = entity[relation.propertyName].find((subEntity: any) => {\n                                    return subEntity[relation.referencedColumnName] === subObject[relation.referencedColumnName];\n                                });\n                                if (existRelation)\n                                    this.groupAndTransform(subEntity, existRelation, relationMetadata);\n                            }\n\n                            this.groupAndTransform(subEntity, subObject, relationMetadata);\n                            return subEntity;\n                        });\n                    } else {\n                        entity[relation.propertyName] = object[relation.propertyName];\n                    }\n                } else {\n                    if (object[relation.propertyName]) {\n                        const subEntity = relationMetadata.create();\n                        if (entity[relation.propertyName])\n                            this.groupAndTransform(subEntity, entity[relation.propertyName], relationMetadata);\n\n                        this.groupAndTransform(subEntity, object[relation.propertyName], relationMetadata);\n                        entity[relation.propertyName] = subEntity;\n                    } else {\n                        entity[relation.propertyName] = object[relation.propertyName];\n                    }\n                }\n            });\n    }\n\n}","import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryBuilder} from \"../QueryBuilder\";\n\n/**\n */\ninterface LoadMap {\n    name: string;\n    child: LoadMap[];\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n\n    // constructor(protected namingStrategy: NamingStrategyInterface) {\n    // }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform<Entity extends ObjectLiteral>(plainObject: ObjectLiteral, metadata: EntityMetadata, queryBuilder: QueryBuilder<Entity>): Promise<Entity|undefined> {\n\n        // if plain object does not have id then nothing to load really\n        if (!metadata.checkIfObjectContainsAllPrimaryKeys(plainObject))\n            return Promise.reject<Entity>(\"Given object does not have a primary column, cannot transform it to database entity.\");\n\n        const alias = queryBuilder.alias;\n        const needToLoad = this.buildLoadMap(plainObject, metadata, true);\n\n        this.join(queryBuilder, needToLoad, alias);\n\n        metadata.primaryColumns.forEach(primaryColumn => {\n            queryBuilder\n                .andWhere(alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName)\n                .setParameter(primaryColumn.propertyName, plainObject[primaryColumn.propertyName]);\n        });\n        if (metadata.parentEntityMetadata) {\n            metadata.parentEntityMetadata.primaryColumns.forEach(primaryColumn => {\n                const parentIdColumn = metadata.parentIdColumns.find(parentIdColumn => {\n                    return parentIdColumn.propertyName === primaryColumn.propertyName;\n                });\n                if (!parentIdColumn)\n                    throw new Error(`Prent id column for the given primary column was not found.`);\n\n                queryBuilder\n                    .andWhere(alias + \".\" + parentIdColumn.propertyName + \"=:\" + primaryColumn.propertyName)\n                    .setParameter(primaryColumn.propertyName, plainObject[primaryColumn.propertyName]);\n            });\n        }\n\n        return queryBuilder.getOne();\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private join<Entity extends ObjectLiteral>(qb: QueryBuilder<Entity>, needToLoad: LoadMap[], parentAlias: string) {\n        needToLoad.forEach(i => {\n            const alias = parentAlias + \"_\" + i.name;\n            qb.leftJoinAndSelect(parentAlias + \".\" + i.name, alias);\n            if (i.child && i.child.length)\n                this.join(qb, i.child, alias);\n        });\n    }\n\n    private buildLoadMap(object: any, metadata: EntityMetadata, isFirstLevelDepth = false): LoadMap[] {\n        // todo: rething the way we are trying to load things using left joins cause there are situations when same\n        // todo: entities are loaded multiple times and become different objects (problem with duplicate entities in dbEntities)\n        return metadata.relations\n            .filter(relation => object.hasOwnProperty(relation.propertyName))\n            .filter(relation => {\n                // we only need to load empty relations for first-level depth objects, otherwise removal can break\n                // this is not reliable, refactor this part later\n                const value = (object[relation.propertyName] instanceof Promise && relation.isLazy) ? object[\"__\" + relation.propertyName + \"__\"] : object[relation.propertyName];\n                return isFirstLevelDepth || !(value instanceof Array) || value.length > 0;\n            })\n            .map(relation => {\n                let value = (object[relation.propertyName] instanceof Promise && relation.isLazy) ? object[\"__\" + relation.propertyName + \"__\"] : object[relation.propertyName];\n                // let value = object[relation.propertyName];\n                if (value instanceof Array)\n                    value = Object.assign({}, ...value);\n\n                const child = value ? this.buildLoadMap(value, relation.inverseEntityMetadata) : [];\n                return <LoadMap> { name: relation.propertyName, child: child };\n            });\n    }\n\n}","import {OrderByCondition} from \"./OrderByCondition\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Options to be passed to find methods.\n *\n * Example:\n *  const options: FindOptions = {\n *     alias: \"photo\",\n *     limit: 100,\n *     offset: 0,\n *     firstResult: 5,\n *     maxResults: 10,\n *     where: \"photo.likesCount > 0 && photo.likesCount < 10\",\n *     having: \"photo.viewsCount > 0 && photo.viewsCount < 1000\",\n *     whereConditions: {\n *         \"photo.isPublished\": true,\n *         \"photo.name\": \"Me and Bears\"\n *     },\n *     havingConditions: {\n *         \"photo.filename\": \"bears.jpg\"\n *     },\n *     orderBy: {\n *         \"photo.id\": \"DESC\"\n *     },\n *     groupBy: [\n *         \"photo.name\"\n *     ],\n *     leftJoin: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     innerJoin: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     leftJoinAndSelect: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     innerJoinAndSelect: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     }\n * };\n */\nexport interface FindOptions {\n\n    /**\n     * Alias of the selected entity.\n     */\n    alias: string;\n\n    /**\n     * Selection limitation, e.g. LIMIT expression.\n     */\n    limit?: number;\n\n    /**\n     * From what position to select, e.g. OFFSET expression.\n     */\n    offset?: number;\n\n    /**\n     * First results to select (offset using pagination).\n     */\n    firstResult?: number;\n\n    /**\n     * Maximum result to select (limit using pagination).\n     */\n    maxResults?: number;\n\n    /**\n     * Regular WHERE expression.\n     */\n    where?: string;\n\n    /**\n     * Regular HAVING expression.\n     */\n    having?: string;\n\n    /**\n     * WHERE conditions. Key-value object pair, where each key is a column name and value is a column value.\n     * \"AND\" is applied between all parameters.\n     */\n    whereConditions?: ObjectLiteral;\n\n    /**\n     * HAVING conditions. Key-value object pair, where each key is a column name and value is a column value.\n     * \"AND\" is applied between all parameters.\n     */\n    havingConditions?: ObjectLiteral;\n\n    /**\n     * Array of ORDER BY expressions.\n     */\n    orderBy?: OrderByCondition;\n\n    /**\n     * Array of column to GROUP BY.\n     */\n    groupBy?: string[];\n\n    /**\n     * Array of columns to LEFT JOIN.\n     */\n    leftJoinAndSelect?: { [key: string]: string };\n\n    /**\n     * Array of columns to INNER JOIN.\n     */\n    innerJoinAndSelect?: { [key: string]: string };\n\n    /**\n     * Array of columns to LEFT JOIN.\n     */\n    leftJoin?: { [key: string]: string };\n\n    /**\n     * Array of columns to INNER JOIN.\n     */\n    innerJoin?: { [key: string]: string };\n\n    /**\n     * Parameters used in the WHERE and HAVING expressions.\n     */\n    parameters?: Object;\n\n    /**\n     * Indicates if query builder should add virtual columns to the entity too.\n     */\n    enabledOptions?: (\"RELATION_ID_VALUES\")[];\n\n}\n","import {FindOptions} from \"./FindOptions\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static isFindOptions(object: any): object is FindOptions {\n        const possibleOptions: FindOptions = object;\n        return  possibleOptions && !!possibleOptions.alias && typeof possibleOptions.alias === \"string\" && (\n                    !!possibleOptions.limit ||\n                    !!possibleOptions.offset ||\n                    !!possibleOptions.firstResult ||\n                    !!possibleOptions.maxResults ||\n                    !!possibleOptions.where ||\n                    !!possibleOptions.having ||\n                    !!possibleOptions.whereConditions ||\n                    !!possibleOptions.havingConditions ||\n                    !!possibleOptions.orderBy ||\n                    !!possibleOptions.groupBy ||\n                    !!possibleOptions.leftJoinAndSelect ||\n                    !!possibleOptions.innerJoinAndSelect ||\n                    !!possibleOptions.leftJoin ||\n                    !!possibleOptions.innerJoin ||\n                    !!possibleOptions.parameters ||\n                    !!possibleOptions.enabledOptions\n                );\n    }\n\n    /**\n     * Applies give find options to the given query builder.\n     */\n    static applyOptionsToQueryBuilder(qb: QueryBuilder<any>, options: FindOptions): QueryBuilder<any> {\n\n        if (options.limit)\n            qb.setLimit(options.limit);\n        if (options.offset)\n            qb.setOffset(options.offset);\n        if (options.firstResult)\n            qb.setFirstResult(options.firstResult);\n        if (options.maxResults)\n            qb.setMaxResults(options.maxResults);\n        if (options.where)\n            qb.where(options.where);\n        if (options.having)\n            qb.having(options.having);\n\n        if (options.whereConditions) {\n            Object.keys(options.whereConditions).forEach((key, index) => {\n                const name = key.indexOf(\".\") === -1 ? options.alias + \".\" + key : key;\n                if (options.whereConditions![key] === null) {\n                    qb.andWhere(name + \" IS NULL\");\n\n                } else {\n                    const parameterName = \"whereConditions_\" + index;\n                    qb.andWhere(name + \"=:\" + parameterName, { [parameterName]: options.whereConditions![key] });\n                }\n            });\n        }\n\n        if (options.havingConditions) {\n            Object.keys(options.havingConditions).forEach((key, index) => {\n                const name = key.indexOf(\".\") === -1 ? options.alias + \".\" + key : key;\n                if (options.havingConditions![key] === null) {\n                    qb.andHaving(name + \" IS NULL\");\n\n                } else {\n                    const parameterName = \"havingConditions_\" + index;\n                    qb.andHaving(name + \"=:\" + parameterName, { [parameterName]: options.whereConditions![key] });\n                }\n            });\n        }\n\n        if (options.orderBy)\n            Object.keys(options.orderBy).forEach(columnName => qb.addOrderBy(columnName, options.orderBy![columnName]));\n\n        if (options.groupBy)\n            options.groupBy.forEach(groupBy => qb.addGroupBy(groupBy));\n\n        if (options.leftJoin)\n            Object.keys(options.leftJoin).forEach(key => {\n                if (options.leftJoin) // this check because of tsc bug\n                    qb.leftJoin(options.leftJoin[key], key);\n            });\n\n        if (options.innerJoin)\n            Object.keys(options.innerJoin).forEach(key => {\n                if (options.innerJoin) // this check because of tsc bug\n                    qb.innerJoin(options.innerJoin[key], key);\n            });\n\n        if (options.leftJoinAndSelect)\n            Object.keys(options.leftJoinAndSelect).forEach(key => {\n                if (options.leftJoinAndSelect) // this check because of tsc bug\n                    qb.leftJoinAndSelect(options.leftJoinAndSelect[key], key);\n            });\n\n        if (options.innerJoinAndSelect)\n            Object.keys(options.innerJoinAndSelect).forEach(key => {\n                if (options.innerJoinAndSelect) // this check because of tsc bug\n                    qb.innerJoinAndSelect(options.innerJoinAndSelect[key], key);\n            });\n\n        if (options.parameters)\n            qb.setParameters(options.parameters);\n\n        if (options.enabledOptions) {\n            options.enabledOptions.forEach(option => {\n                qb.enableOption(option);\n            });\n        }\n\n        return qb;\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\nimport {DataTransformationUtils} from \"../util/DataTransformationUtils\";\n\n/**\n * Holds information about insert operation into junction table.\n */\nexport interface JunctionInsert {\n\n    /**\n     * Relation of the junction table.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Entities that needs to be \"bind\" to the subject.\n     */\n    junctionEntities: ObjectLiteral[];\n}\n\n/**\n * Holds information about remove operation from the junction table.\n */\nexport interface JunctionRemove {\n\n    /**\n     * Relation of the junction table.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Entity ids that needs to be removed from the junction table.\n     */\n    junctionRelationIds: any[];\n}\n\n/**\n * Holds information about relation update in some subject.\n */\nexport interface RelationUpdate {\n\n    /**\n     * Relation that needs to be updated.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * New value that needs to be set into into new relation.\n     */\n    value: any;\n}\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Persist entity (changed entity).\n     */\n    private _persistEntity?: ObjectLiteral;\n\n    /**\n     * Database entity.\n     */\n    private _databaseEntity?: ObjectLiteral;\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    readonly metadata: EntityMetadata;\n\n    /**\n     * Date when this entity is persisted.\n     */\n    readonly date: Date = new Date();\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false;\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false;\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false;\n\n    /**\n     * Differentiated columns between persisted and database entities.\n     */\n    diffColumns: ColumnMetadata[] = [];\n\n    /**\n     * Differentiated relations between persisted and database entities.\n     */\n    diffRelations: RelationMetadata[] = [];\n\n    /**\n     * List of relations which need to be unset.\n     * This is used to update relation from inverse side.\n     */\n    relationUpdates: RelationUpdate[] = [];\n\n    /**\n     * Records that needs to be inserted into the junction tables of this subject.\n     */\n    junctionInserts: JunctionInsert[] = [];\n\n    /**\n     * Records that needs to be removed from the junction tables of this subject.\n     */\n    junctionRemoves: JunctionRemove[] = [];\n\n    /**\n     * When subject is newly persisted it may have a generated entity id.\n     * In this case it should be written here.\n     */\n    newlyGeneratedId?: any;\n\n    /**\n     * Generated id of the parent entity. Used in the class-table-inheritance.\n     */\n    parentGeneratedId?: any;\n\n    /**\n     * Used in newly persisted entities which are tree tables.\n     */\n    treeLevel?: number;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(metadata: EntityMetadata, entity?: ObjectLiteral, databaseEntity?: ObjectLiteral) {\n        this.metadata = metadata;\n        this._persistEntity = entity;\n        this._databaseEntity = databaseEntity;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * Throws error if persisted entity was not set.\n     */\n    get entity(): ObjectLiteral {\n        if (!this._persistEntity)\n            throw new Error(`Persistence entity is not set for the given subject.`);\n\n        return this._persistEntity;\n    }\n\n    /**\n     * Checks if subject has a persisted entity.\n     */\n    get hasEntity(): boolean {\n        return !!this._persistEntity;\n    }\n\n    /**\n     * Gets entity from the database (e.g. original entity).\n     * Throws error if database entity was not set.\n     */\n    get databaseEntity(): ObjectLiteral {\n        if (!this._databaseEntity)\n            throw new Error(`Database entity is not set for the given subject.`);\n\n        return this._databaseEntity;\n    }\n\n    /**\n     * Checks if subject has a database entity.\n     */\n    get hasDatabaseEntity(): boolean {\n        return !!this._databaseEntity;\n    }\n\n    /**\n     * Sets entity from the database (e.g. original entity).\n     * Once database entity set it calculates differentiated columns and relations\n     * between persistent entity and database entity.\n     */\n    set databaseEntity(databaseEntity: ObjectLiteral) {\n        this._databaseEntity = databaseEntity;\n        this.recompute();\n    }\n\n    /**\n     * Gets entity target from the entity metadata of this subject.\n     */\n    get entityTarget(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.hasDatabaseEntity;\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return this.canBeUpdated && (this.diffColumns.length > 0 || this.diffRelations.length > 0);\n    }\n\n    /**\n     * Checks if this subject has relations to be updated.\n     */\n    get hasRelationUpdates(): boolean {\n        return this.relationUpdates.length > 0;\n    }\n\n    /**\n     * Gets id of the persisted entity.\n     * If entity is not set then it returns undefined.\n     * If entity itself has an id then it simply returns it.\n     * If entity does not have an id then it returns newly generated id.\n\n    get getPersistedEntityIdMap(): any|undefined {\n        if (!this.hasEntity)\n            return undefined;\n\n        const entityIdMap = this.metadata.getDatabaseEntityIdMap(this.entity);\n        if (entityIdMap)\n            return entityIdMap;\n\n        if (this.newlyGeneratedId)\n            return this.metadata.createSimpleDatabaseIdMap(this.newlyGeneratedId);\n\n        return undefined;\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates this subject for errors.\n     * Subject cannot be at the same time inserted and updated, removed and inserted, removed and updated.\n     */\n    validate() {\n\n        if (this.mustBeInserted && this.mustBeRemoved)\n            throw new Error(`Removed entity ${this.metadata.name} is also scheduled for insert operation. This looks like ORM problem. Please report a github issue.`);\n\n        if (this.mustBeUpdated && this.mustBeRemoved)\n            throw new Error(`Removed entity \"${this.metadata.name}\" is also scheduled for update operation. ` +\n                `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`);\n\n        if (this.mustBeInserted && this.mustBeUpdated)\n            throw new Error(`Inserted entity ${this.metadata.name} is also scheduled for updated operation. This looks like ORM problem. Please report a github issue.`);\n\n    }\n\n    /**\n     * Performs entity re-computations.\n     */\n    recompute() {\n        if (this.hasEntity && this._databaseEntity) {\n            this.computeDiffColumns();\n            this.computeDiffRelationalColumns();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    protected computeDiffColumns(): void {\n        this.diffColumns = this.metadata.allColumns.filter(column => {\n\n            // prepare both entity and database values to make comparision\n            let entityValue = column.getEntityValue(this.entity);\n            let databaseValue = column.getEntityValue(this.databaseEntity);\n\n            // normalize special values to make proper comparision\n            if (entityValue !== null && entityValue !== undefined) {\n                if (column.type === ColumnTypes.DATE) {\n                    entityValue = DataTransformationUtils.mixedDateToDateString(entityValue);\n\n                } else if (column.type === ColumnTypes.TIME) {\n                    entityValue = DataTransformationUtils.mixedDateToTimeString(entityValue);\n\n                } else if (column.type === ColumnTypes.DATETIME) {\n                    // if (column.loadInLocalTimezone) {\n                    //     entityValue = DataTransformationUtils.mixedDateToDatetimeString(entityValue);\n                    //     databaseValue = DataTransformationUtils.mixedDateToDatetimeString(databaseValue);\n                    // } else {\n                        entityValue = DataTransformationUtils.mixedDateToUtcDatetimeString(entityValue);\n                        databaseValue = DataTransformationUtils.mixedDateToUtcDatetimeString(databaseValue);\n                    // }\n\n                } else if (column.type === ColumnTypes.JSON) {\n                    entityValue = JSON.stringify(entityValue);\n                    if (databaseValue !== null && databaseValue !== undefined)\n                        databaseValue = JSON.stringify(databaseValue);\n\n                } else if (column.type === ColumnTypes.SIMPLE_ARRAY) {\n                    entityValue = DataTransformationUtils.simpleArrayToString(entityValue);\n                    databaseValue = DataTransformationUtils.simpleArrayToString(databaseValue);\n                }\n            }\n\n            // if value is not defined then no need to update it\n            if (!column.isInEmbedded && this.entity[column.propertyName] === undefined)\n                return false;\n\n            // if value is in embedded and is not defined then no need to update it\n            if (column.isInEmbedded && (this.entity[column.embeddedProperty] === undefined || this.entity[column.embeddedProperty][column.propertyName] === undefined))\n                return false;\n\n            // if its a special column or value is not changed - then do nothing\n            if (column.isVirtual ||\n                column.isParentId ||\n                column.isDiscriminator ||\n                column.isUpdateDate ||\n                column.isVersion ||\n                column.isCreateDate ||\n                entityValue === databaseValue)\n                return false;\n\n            // filter out \"relational columns\" only in the case if there is a relation object in entity\n            if (!column.isInEmbedded && this.metadata.hasRelationWithDbName(column.propertyName)) {\n                const relation = this.metadata.findRelationWithDbName(column.propertyName); // todo: why with dbName ?\n                if (this.entity[relation.propertyName] !== null && this.entity[relation.propertyName] !== undefined)\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    protected computeDiffRelationalColumns(/*todo: updatesByRelations: UpdateByRelationOperation[], */): void {\n        this.diffRelations = this.metadata.allRelations.filter(relation => {\n            if (!relation.isManyToOne && !(relation.isOneToOne && relation.isOwning))\n                return false;\n\n            // here we cover two scenarios:\n            // 1. related entity can be another entity which is natural way\n            // 2. related entity can be entity id which is hacked way of updating entity\n            // todo: what to do if there is a column with relationId? (cover this too?)\n            const updatedEntityRelationId: any =\n                this.entity[relation.propertyName] instanceof Object ?\n                    relation.inverseEntityMetadata.getEntityIdMixedMap(this.entity[relation.propertyName])\n                    : this.entity[relation.propertyName];\n\n\n            // here because we have enabled RELATION_ID_VALUES option in the QueryBuilder when we loaded db entities\n            // we have in the dbSubject only relationIds.\n            // this allows us to compare relation id in the updated subject with id in the database.\n            // note that we used relation.name instead of relation.propertyName because query builder with RELATION_ID_VALUES\n            // returns values in the relation.name column, not relation.propertyName column\n            const dbEntityRelationId = this.databaseEntity[relation.name];\n\n            // todo: try to find if there is update by relation operation - we dont need to generate update relation operation for this\n            // todo: if (updatesByRelations.find(operation => operation.targetEntity === this && operation.updatedRelation === relation))\n            // todo:     return false;\n\n            // we don't perform operation over undefined properties\n            if (updatedEntityRelationId === undefined)\n                return false;\n\n            // if both are empty totally no need to do anything\n            if ((updatedEntityRelationId === undefined || updatedEntityRelationId === null) &&\n                (dbEntityRelationId === undefined || dbEntityRelationId === null))\n                return false;\n\n            // if relation ids aren't equal then we need to update them\n            return updatedEntityRelationId !== dbEntityRelationId;\n        });\n    }\n\n}","/**\n * Represents some Type of the Object.\n */\nexport type ObjectType<T> = { new (): T }|Function;\n","import {Repository} from \"./Repository\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\n\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nexport class TreeRepository<Entity> extends Repository<Entity> {\n\n    // todo: implement moving\n    // todo: implement removing\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    async findTrees(): Promise<Entity[]> {\n        const roots = await this.findRoots();\n        await Promise.all(roots.map(async root => {\n            await this.findDescendantsTree(root);\n        }));\n\n        return roots;\n    }\n\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    findRoots(): Promise<Entity[]> {\n\n        const parentPropertyName = this.metadata.treeParentRelation.propertyName;\n        return this.createQueryBuilder(\"treeEntity\")\n            .where(`treeEntity.${parentPropertyName} IS NULL`)\n            .getMany();\n    }\n\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\n\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.firstPrimaryColumn.name)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}`;\n        return this.createQueryBuilder(alias)\n            .innerJoin(this.metadata.closureJunctionTable.table.name, closureTableAlias, joinCondition)\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.firstPrimaryColumn.propertyName]}`);\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    findDescendants(entity: Entity): Promise<Entity[]> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findDescendantsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getEntitiesAndRawResults()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of descendants of the entity.\n     */\n    countDescendants(entity: Entity): Promise<number> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): QueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\n\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.firstPrimaryColumn.name)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}`;\n        return this.createQueryBuilder(alias)\n            .innerJoin(this.metadata.closureJunctionTable.table.name, closureTableAlias, joinCondition)\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.firstPrimaryColumn.propertyName]}`);\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    findAncestors(entity: Entity): Promise<Entity[]> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findAncestorsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getEntitiesAndRawResults()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.rawResults);\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    countAncestors(entity: Entity): Promise<number> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Moves entity to the children of then given entity.\n     *\n    move(entity: Entity, to: Entity): Promise<void> {\n        return Promise.resolve();\n    } */\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\n        return rawResults.map(rawResult => {\n            return {\n                id: rawResult[alias + \"_\" + this.metadata.firstPrimaryColumn.name],\n                parentId: rawResult[alias + \"_\" + this.metadata.treeParentRelation.name]\n            };\n        });\n    }\n\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const childProperty = this.metadata.treeChildrenRelation.propertyName;\n        const parentEntityId = entity[this.metadata.firstPrimaryColumn.propertyName];\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(entity[this.metadata.firstPrimaryColumn.propertyName]) !== -1);\n        entity[childProperty].forEach((childEntity: any) => {\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\n        });\n    }\n\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const parentProperty = this.metadata.treeParentRelation.propertyName;\n        const entityId = entity[this.metadata.firstPrimaryColumn.propertyName];\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n        const parentEntity = entities.find(entity => {\n            if (!parentRelationMap)\n                return false;\n\n            return entity[this.metadata.firstPrimaryColumn.propertyName] === parentRelationMap.parentId;\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\n        }\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {Subject} from \"../persistence/Subject\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\n\n/**\n * Repository for more specific operations.\n */\nexport class SpecificRepository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected metadata: EntityMetadata,\n                protected queryRunnerProvider?: QueryRunnerProvider) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async setRelation(relationName: string, entityId: any, relatedEntityId: any): Promise<void>;\n\n    /**\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async setRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void>;\n\n    /**\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async setRelation(relationName: string|((t: Entity) => string|any), entityId: any, relatedEntityId: any): Promise<void> {\n        const propertyName = this.metadata.computePropertyName(relationName);\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\n\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n        if (relation.isManyToMany)\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\n\n        let table: string, values: any = {}, conditions: any = {};\n        if (relation.isOwning) {\n            table = relation.entityMetadata.table.name;\n            values[relation.name] = relatedEntityId;\n            conditions[relation.joinColumn.referencedColumn.name] = entityId;\n        } else {\n            table = relation.inverseEntityMetadata.table.name;\n            values[relation.inverseRelation.name] = relatedEntityId;\n            conditions[relation.inverseRelation.joinColumn.referencedColumn.name] = entityId;\n        }\n\n\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        await queryRunner.update(table, values, conditions);\n        if (!this.queryRunnerProvider) // means created by this method\n            await queryRunnerProvider.release(queryRunner);\n    }\n\n    /**\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async setInverseRelation(relationName: string, relatedEntityId: any, entityId: any): Promise<void>;\n\n    /**\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async setInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void>;\n\n    /**\n     * Sets given relatedEntityId to the value of the relation of the entity with entityId id.\n     * Should be used when you want quickly and efficiently set a relation (for many-to-one and one-to-many) to some entity.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async setInverseRelation(relationName: string|((t: Entity) => string|any), relatedEntityId: any, entityId: any): Promise<void> {\n        const propertyName = this.metadata.computePropertyName(relationName);\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\n\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\n        // if (relation.isManyToMany || relation.isOneToMany || relation.isOneToOneNotOwner)\n        //     throw new Error(`Only many-to-one and one-to-one with join column are supported for this operation. ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n        if (relation.isManyToMany)\n            throw new Error(`Many-to-many relation is not supported for this operation. Use #addToRelation method for many-to-many relations.`);\n\n        let table: string, values: any = {}, conditions: any = {};\n        if (relation.isOwning) {\n            table = relation.inverseEntityMetadata.table.name;\n            values[relation.inverseRelation.name] = relatedEntityId;\n            conditions[relation.inverseRelation.joinColumn.referencedColumn.name] = entityId;\n        } else {\n            table = relation.entityMetadata.table.name;\n            values[relation.name] = relatedEntityId;\n            conditions[relation.joinColumn.referencedColumn.name] = entityId;\n        }\n\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        await queryRunner.update(table, values, conditions);\n        if (!this.queryRunnerProvider) // means created by this method\n            await queryRunnerProvider.release(queryRunner);\n    }\n\n    /**\n     * Adds a new relation between two entities into relation's many-to-many table.\n     * Should be used when you want quickly and efficiently add a relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addToRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n    /**\n     * Adds a new relation between two entities into relation's many-to-many table.\n     * Should be used when you want quickly and efficiently add a relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addToRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n    /**\n     * Adds a new relation between two entities into relation's many-to-many table.\n     * Should be used when you want quickly and efficiently add a relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addToRelation(relationName: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\n        const propertyName = this.metadata.computePropertyName(relationName);\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\n\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        const insertPromises = relatedEntityIds.map(relatedEntityId => {\n            const values: any = {};\n            if (relation.isOwning) {\n                values[relation.junctionEntityMetadata.columns[0].name] = entityId;\n                values[relation.junctionEntityMetadata.columns[1].name] = relatedEntityId;\n            } else {\n                values[relation.junctionEntityMetadata.columns[1].name] = entityId;\n                values[relation.junctionEntityMetadata.columns[0].name] = relatedEntityId;\n            }\n\n            return queryRunner.insert(relation.junctionEntityMetadata.table.name, values);\n        });\n        await Promise.all(insertPromises);\n\n        if (!this.queryRunnerProvider) // means created by this method\n            await queryRunnerProvider.release(queryRunner);\n    }\n\n    /**\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\n     * Should be used when you want quickly and efficiently add a relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addToInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n    /**\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\n     * Should be used when you want quickly and efficiently add a relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addToInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n    /**\n     * Adds a new relation between two entities into relation's many-to-many table from inverse side of the given relation.\n     * Should be used when you want quickly and efficiently add a relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addToInverseRelation(relationName: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\n        const propertyName = this.metadata.computePropertyName(relationName);\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\n\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n\n\n        const queryRunnerProvider = this.queryRunnerProvider ? this.queryRunnerProvider : new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        try {\n            const insertPromises = entityIds.map(entityId => {\n                const values: any = {};\n                if (relation.isOwning) {\n                    values[relation.junctionEntityMetadata.columns[0].name] = entityId;\n                    values[relation.junctionEntityMetadata.columns[1].name] = relatedEntityId;\n                } else {\n                    values[relation.junctionEntityMetadata.columns[1].name] = entityId;\n                    values[relation.junctionEntityMetadata.columns[0].name] = relatedEntityId;\n                }\n\n                return queryRunner.insert(relation.junctionEntityMetadata.table.name, values);\n            });\n            await Promise.all(insertPromises);\n\n        } finally {\n            if (!this.queryRunnerProvider) // means created by this method\n                await queryRunnerProvider.release(queryRunner);\n        }\n    }\n\n    /**\n     * Removes a relation between two entities from relation's many-to-many table.\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeFromRelation(relationName: string, entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n    /**\n     * Removes a relation between two entities from relation's many-to-many table.\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeFromRelation(relationName: ((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void>;\n\n    /**\n     * Removes a relation between two entities from relation's many-to-many table.\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeFromRelation(relationName: string|((t: Entity) => string|any), entityId: any, relatedEntityIds: any[]): Promise<void> {\n        const propertyName = this.metadata.computePropertyName(relationName);\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\n\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n\n        // check if given relation entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\n        if (!relatedEntityIds || !relatedEntityIds.length)\n            return Promise.resolve();\n\n        const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\n            .delete()\n            .fromTable(relation.junctionEntityMetadata.table.name, \"junctionEntity\");\n\n        const firstColumnName = this.connection.driver.escapeColumnName(relation.isOwning ? relation.junctionEntityMetadata.columns[0].name : relation.junctionEntityMetadata.columns[1].name);\n        const secondColumnName = this.connection.driver.escapeColumnName(relation.isOwning ? relation.junctionEntityMetadata.columns[1].name : relation.junctionEntityMetadata.columns[0].name);\n\n        relatedEntityIds.forEach((relatedEntityId, index) => {\n            qb.orWhere(`(${firstColumnName}=:entityId AND ${secondColumnName}=:relatedEntity_${index})`)\n                .setParameter(\"relatedEntity_\" + index, relatedEntityId);\n        });\n\n        await qb\n            .setParameter(\"entityId\", entityId)\n            .execute();\n    }\n\n    /**\n     * Removes a relation between two entities from relation's many-to-many table.\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeFromInverseRelation(relationName: string, relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n    /**\n     * Removes a relation between two entities from relation's many-to-many table.\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeFromInverseRelation(relationName: ((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void>;\n\n    /**\n     * Removes a relation between two entities from relation's many-to-many table.\n     * Should be used when you want quickly and efficiently remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeFromInverseRelation(relationName: string|((t: Entity) => string|any), relatedEntityId: any, entityIds: any[]): Promise<void> {\n        const propertyName = this.metadata.computePropertyName(relationName);\n        if (!this.metadata.hasRelationWithPropertyName(propertyName))\n            throw new Error(`Relation ${propertyName} was not found in the ${this.metadata.name} entity.`);\n\n        const relation = this.metadata.findRelationWithPropertyName(propertyName);\n        if (!relation.isManyToMany)\n            throw new Error(`Only many-to-many relation supported for this operation. However ${this.metadata.name}#${propertyName} relation type is ${relation.relationType}`);\n\n        // check if given entity ids is empty - then nothing to do here (otherwise next code will remove all ids)\n        if (!entityIds || !entityIds.length)\n            return Promise.resolve();\n\n        const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\n            .delete()\n            .from(relation.junctionEntityMetadata.table.name, \"junctionEntity\");\n\n        const firstColumnName = relation.isOwning ? relation.junctionEntityMetadata.columns[1].name : relation.junctionEntityMetadata.columns[0].name;\n        const secondColumnName = relation.isOwning ? relation.junctionEntityMetadata.columns[0].name : relation.junctionEntityMetadata.columns[1].name;\n\n        entityIds.forEach((entityId, index) => {\n            qb.orWhere(`(${firstColumnName}=:relatedEntityId AND ${secondColumnName}=:entity_${index})`)\n              .setParameter(\"entity_\" + index, entityId);\n        });\n\n        await qb.setParameter(\"relatedEntityId\", relatedEntityId).execute();\n    }\n\n    /**\n     * Performs both #addToRelation and #removeFromRelation operations.\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addAndRemoveFromRelation(relation: string, entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\n\n    /**\n     * Performs both #addToRelation and #removeFromRelation operations.\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addAndRemoveFromRelation(relation: ((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void>;\n\n    /**\n     * Performs both #addToRelation and #removeFromRelation operations.\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addAndRemoveFromRelation(relation: string|((t: Entity) => string|any), entityId: any, addRelatedEntityIds: any[], removeRelatedEntityIds: any[]): Promise<void> {\n        await Promise.all([\n            this.addToRelation(relation as any, entityId, addRelatedEntityIds),\n            this.removeFromRelation(relation as any, entityId, removeRelatedEntityIds)\n        ]);\n    }\n\n    /**\n     * Performs both #addToRelation and #removeFromRelation operations.\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addAndRemoveFromInverseRelation(relation: string, relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\n\n    /**\n     * Performs both #addToRelation and #removeFromRelation operations.\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addAndRemoveFromInverseRelation(relation: ((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void>;\n\n    /**\n     * Performs both #addToRelation and #removeFromRelation operations.\n     * Should be used when you want quickly and efficiently and and remove a many-to-many relation between two entities.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async addAndRemoveFromInverseRelation(relation: string|((t: Entity) => string|any), relatedEntityId: any, addEntityIds: any[], removeEntityIds: any[]): Promise<void> {\n        await Promise.all([\n            this.addToInverseRelation(relation as any, relatedEntityId, addEntityIds),\n            this.removeFromInverseRelation(relation as any, relatedEntityId, removeEntityIds)\n        ]);\n    }\n\n    /**\n     * Removes entity with the given id.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeById(id: any): Promise<void> {\n        const alias = this.metadata.table.name;\n        const parameters: ObjectLiteral = {};\n        let condition = \"\";\n\n        if (this.metadata.hasMultiplePrimaryKeys) {\n            condition = this.metadata.primaryColumns.map(primaryColumn => {\n                parameters[primaryColumn.propertyName] = id[primaryColumn.propertyName];\n                return alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName;\n            }).join(\" AND \");\n\n        } else {\n            condition = alias + \".\" + this.metadata.firstPrimaryColumn.propertyName + \"=:id\";\n            parameters[\"id\"] = id;\n        }\n\n        await new QueryBuilder(this.connection, this.queryRunnerProvider)\n            .delete()\n            .from(this.metadata.target, alias)\n            .where(condition, parameters)\n            .execute();\n    }\n\n    /**\n     * Removes all entities with the given ids.\n     * Note that event listeners and event subscribers won't work (and will not send any events) when using this operation.\n     */\n    async removeByIds(ids: any[]): Promise<void> {\n        const alias = this.metadata.table.name;\n        const parameters: ObjectLiteral = {};\n        let condition = \"\";\n\n        if (this.metadata.hasMultiplePrimaryKeys) {\n            condition = ids.map((id, idIndex) => {\n                this.metadata.primaryColumns.map(primaryColumn => {\n                    parameters[primaryColumn.propertyName + \"_\" + idIndex] = id[primaryColumn.propertyName];\n                    return alias + \".\" + primaryColumn.propertyName + \"=:\" + primaryColumn.propertyName + \"_\" + idIndex;\n                }).join(\" AND \");\n            }).join(\" OR \");\n        } else {\n            condition = alias + \".\" + this.metadata.firstPrimaryColumn.propertyName + \" IN (:ids)\";\n            parameters[\"ids\"] = ids;\n        }\n\n        await new QueryBuilder(this.connection, this.queryRunnerProvider)\n            .delete()\n            .from(this.metadata.target, alias)\n            .where(condition, parameters)\n            .execute();\n    }\n\n    /**\n     * Finds all relation ids in the given entities.\n     */\n    async findRelationIds(relationOrName: RelationMetadata|string|((...args: any[]) => any), entityOrEntities: Entity[]|Entity|any|any[], inIds?: any[], notInIds?: any[]): Promise<any[]> {\n\n        const relation = this.convertMixedRelationToMetadata(relationOrName);\n        if (!(entityOrEntities instanceof Array)) entityOrEntities = [entityOrEntities];\n\n        const entityReferencedColumn = relation.isOwning ? relation.joinTable.referencedColumn : relation.inverseRelation.joinTable.inverseReferencedColumn;\n        const ownerEntityColumn = relation.isOwning ? relation.junctionEntityMetadata.columns[0] : relation.junctionEntityMetadata.columns[1];\n        const inverseEntityColumn = relation.isOwning ? relation.junctionEntityMetadata.columns[1] : relation.junctionEntityMetadata.columns[0];\n\n        let entityIds = this.convertEntityOrEntitiesToIdOrIds(entityReferencedColumn, entityOrEntities);\n        if (!(entityIds instanceof Array)) entityIds = [entityIds];\n\n        // filter out empty entity ids\n        entityIds = (entityIds as any[]).filter(entityId => entityId !== null && entityId !== undefined);\n\n        // if no entity ids at the end, then we don't need to load anything\n        if ((entityIds as any[]).length === 0)\n            return [];\n\n        // create shortcuts for better readability\n        const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\n        const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\n\n        const ids: any[] = [];\n        const promises = (entityIds as any[]).map((entityId: any) => {\n            const qb = new QueryBuilder(this.connection, this.queryRunnerProvider)\n                .select(escapeAlias(\"junction\") + \".\" + escapeColumn(inverseEntityColumn.name) + \" AS id\")\n                .fromTable(relation.junctionEntityMetadata.table.name, \"junction\")\n                .andWhere(escapeAlias(\"junction\") + \".\" + escapeColumn(ownerEntityColumn.name) + \"=:entityId\", {entityId: entityId});\n\n            if (inIds && inIds.length > 0)\n                qb.andWhere(escapeAlias(\"junction\") + \".\" + escapeColumn(inverseEntityColumn.name) + \" IN (:inIds)\", {inIds: inIds});\n\n            if (notInIds && notInIds.length > 0)\n                qb.andWhere(escapeAlias(\"junction\") + \".\" + escapeColumn(inverseEntityColumn.name) + \" NOT IN (:notInIds)\", {notInIds: notInIds});\n\n            return qb.getRawMany()\n                .then((results: { id: any }[]) => {\n                    results.forEach(result => ids.push(result.id)); // todo: prepare result?\n                });\n        });\n\n        await Promise.all(promises);\n        return ids;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts entity or entities to id or ids map.\n     */\n    protected convertEntityOrEntitiesToIdOrIds(column: ColumnMetadata, entityOrEntities: Entity[]|Entity|any|any[]): any|any[] {\n        if (entityOrEntities instanceof Array) {\n            return entityOrEntities.map(entity => this.convertEntityOrEntitiesToIdOrIds(column, entity));\n\n        } else {\n            if (entityOrEntities instanceof Object) {\n                return entityOrEntities[column.propertyName];\n            } else {\n                return entityOrEntities;\n            }\n        }\n    }\n\n    /**\n     * Converts relation name, relation name in function into RelationMetadata.\n     */\n    protected convertMixedRelationToMetadata(relationOrName: RelationMetadata|string|((...args: any[]) => any)): RelationMetadata {\n        if (relationOrName instanceof RelationMetadata)\n            return relationOrName;\n\n        const relationName = relationOrName instanceof Function ? relationOrName(this.metadata.createPropertiesMap()) : relationOrName;\n        return this.metadata.findRelationWithPropertyName(relationName);\n    }\n\n    /**\n     * Extracts unique objects from given entity and all its downside relations.\n     */\n    protected extractObjectsById(entity: any, metadata: EntityMetadata, entityWithIds: Subject[] = []): Promise<Subject[]> {\n        const promises = metadata.relations.map(relation => {\n            const relMetadata = relation.inverseEntityMetadata;\n\n            const value = relation.isLazy ? entity[\"__\" + relation.propertyName + \"__\"] : entity[relation.propertyName];\n            if (!value)\n                return undefined;\n\n            if (value instanceof Array) {\n                const subPromises = value.map((subEntity: any) => {\n                    return this.extractObjectsById(subEntity, relMetadata, entityWithIds);\n                });\n                return Promise.all(subPromises);\n\n            } else {\n                return this.extractObjectsById(value, relMetadata, entityWithIds);\n            }\n        });\n\n        return Promise.all<any>(promises.filter(result => !!result)).then(() => {\n            if (!entityWithIds.find(entityWithId => entityWithId.entity === entity)) {\n                const entityWithId = new Subject(metadata, entity);\n                entityWithIds.push(entityWithId);\n            }\n\n            return entityWithIds;\n        });\n    }\n\n}","import {TreeRepository} from \"./TreeRepository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {Repository} from \"./Repository\";\nimport {SpecificRepository} from \"./SpecificRepository\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\n\n/**\n * Factory used to create different types of repositories.\n */\nexport class RepositoryFactory {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a regular repository.\n     */\n    createRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): Repository<any> {\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        const repository = new Repository<any>();\n        (repository as any)[\"connection\"] = connection;\n        (repository as any)[\"metadata\"] = metadata;\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\n        return repository;\n    }\n\n    /**\n     * Creates a tree repository.\n     */\n    createTreeRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): TreeRepository<any> {\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        const repository = new TreeRepository<any>();\n        (repository as any)[\"connection\"] = connection;\n        (repository as any)[\"metadata\"] = metadata;\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\n        return repository;\n    }\n\n    /**\n     * Creates a specific repository.\n     */\n    createSpecificRepository(connection: Connection, metadata: EntityMetadata, repository: Repository<any>, queryRunnerProvider?: QueryRunnerProvider): SpecificRepository<any> {\n        return new SpecificRepository(connection, metadata, queryRunnerProvider);\n    }\n\n}","import {Repository} from \"./Repository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SpecificRepository} from \"./SpecificRepository\";\nimport {Connection} from \"../connection/Connection\";\nimport {getFromContainer} from \"../index\";\nimport {RepositoryFactory} from \"./RepositoryFactory\";\nimport {TreeRepository} from \"./TreeRepository\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\n\n/**\n * Aggregates all repositories of the specific metadata.\n */\nexport class RepositoryAggregator {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata which owns repositories.\n     */\n    public readonly metadata: EntityMetadata;\n\n    /**\n     * Ordinary repository.\n     */\n    public readonly repository: Repository<any>;\n\n    /**\n     * Tree repository.\n     */\n    public readonly treeRepository?: TreeRepository<any>;\n\n    /**\n     * Repository with specific functions.\n     */\n    public readonly specificRepository: SpecificRepository<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider) {\n        const repositoryFactory = getFromContainer(RepositoryFactory);\n        this.metadata = metadata;\n\n        if (metadata.table.isClosure) {\n            this.repository = this.treeRepository = repositoryFactory.createTreeRepository(connection, metadata, queryRunnerProvider);\n        } else {\n            this.repository = repositoryFactory.createRepository(connection, metadata, queryRunnerProvider);\n        }\n\n        this.specificRepository = repositoryFactory.createSpecificRepository(connection, metadata, this.repository, queryRunnerProvider);\n    }\n\n}","/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotTreeError extends Error {\n    name = \"RepositoryNotTreeError\";\n\n    constructor(entityClass: Function|string) {\n        super();\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\n        this.message = `Repository of the \"${targetName}\" class is not a TreeRepository. Try to use @ClosureTable decorator instead of @Table.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to release entity manager that does not use single database connection.\n */\nexport class NoNeedToReleaseEntityManagerError extends Error {\n    name = \"NoNeedToReleaseEntityManagerError\";\n\n    constructor() {\n        super();\n        this.message = `Entity manager is not using single database connection and cannot be released. ` +\n            `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\n            `methods have a single database connection and they should be released.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\n */\nexport class QueryRunnerProviderAlreadyReleasedError extends Error {\n    name = \"QueryRunnerProviderAlreadyReleasedError\";\n\n    constructor() {\n        super();\n        this.message = `Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {Repository} from \"../repository/Repository\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\nimport {RepositoryNotTreeError} from \"../connection/error/RepositoryNotTreeError\";\nimport {NoNeedToReleaseEntityManagerError} from \"./error/NoNeedToReleaseEntityManagerError\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\n\n/**\n * Common functions shared between different entity manager types.\n */\nexport abstract class BaseEntityManager {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Stores all registered repositories.\n     * Used when custom queryRunnerProvider is provided.\n     */\n    private readonly repositoryAggregators: RepositoryAggregator[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * @param connection Connection to be used in this entity manager\n     * @param queryRunnerProvider Custom query runner to be used for operations in this entity manager\n     */\n    constructor(protected connection: Connection,\n                protected queryRunnerProvider?: QueryRunnerProvider) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets repository for the given entity class.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(entityClass: ObjectType<Entity>): Repository<Entity>;\n\n    /**\n     * Gets repository for the given entity name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(entityName: string): Repository<Entity>;\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunnerProvider)\n            return this.obtainRepositoryAggregator(entityClassOrName as any).repository;\n\n        return this.connection.getRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets tree repository for the given entity class.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(entityClass: ObjectType<Entity>): TreeRepository<Entity>;\n\n    /**\n     * Gets tree repository for the given entity name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(entityName: string): TreeRepository<Entity>;\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunnerProvider) {\n            const treeRepository = this.obtainRepositoryAggregator(entityClassOrName).treeRepository;\n            if (!treeRepository)\n                throw new RepositoryNotTreeError(entityClassOrName);\n\n            return treeRepository;\n        }\n\n        return this.connection.getTreeRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets specific repository for the given entity class.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\n\n    /**\n     * Gets specific repository for the given entity name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\n\n    /**\n     * Gets specific repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\n\n        // if single db connection is used then create its own repository with reused query runner\n        if (this.queryRunnerProvider)\n            return this.obtainRepositoryAggregator(entityClassOrName).specificRepository;\n\n        return this.connection.getSpecificRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.connection.getCustomRepository<T>(customRepository);\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: Object): boolean;\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: string, entity: Object): boolean;\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: Object|string, maybeEntity?: Object): boolean {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? <Object> maybeEntity : <Object> targetOrEntity;\n        return this.getRepository(target as any).hasId(entity);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build an sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string): QueryBuilder<Entity> {\n        return this.getRepository(entityClass as any).createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>, plainObject: Object): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>, plainObjects: Object[]): Entity[];\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>, plainObjectOrObjects?: Object|Object[]): Entity|Entity[] {\n        if (plainObjectOrObjects instanceof Array) {\n            return this.getRepository(entityClass).create(plainObjectOrObjects);\n\n        } else if (plainObjectOrObjects) {\n            return this.getRepository(entityClass).create(plainObjectOrObjects);\n\n        } else {\n            return this.getRepository(entityClass).create();\n        }\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    preload<Entity>(entityClass: ObjectType<Entity>, object: Object): Promise<Entity> {\n        return this.getRepository(entityClass).preload(object);\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: ObjectType<Entity>, ...objects: ObjectLiteral[]): Entity { // todo: throw exception ie tntity manager is released\n        return <Entity> this.getRepository(entityClass).merge(...objects);\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunnerProvider)\n            throw new NoNeedToReleaseEntityManagerError();\n\n        return this.queryRunnerProvider.releaseReused();\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets, or if does not exist yet, creates and returns a repository aggregator for a particular entity target.\n     */\n    protected obtainRepositoryAggregator<Entity>(entityClassOrName: ObjectType<Entity>|string): RepositoryAggregator {\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const metadata = this.connection.getMetadata(entityClassOrName);\n        let repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\n        if (!repositoryAggregator) {\n            repositoryAggregator = new RepositoryAggregator(\n                this.connection,\n                this.connection.getMetadata(entityClassOrName as any),\n                this.queryRunnerProvider\n            );\n            this.repositoryAggregators.push(repositoryAggregator); // todo: check isnt memory leak here?\n        }\n\n        return repositoryAggregator;\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {FindOptions} from \"../find-options/FindOptions\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {BaseEntityManager} from \"./BaseEntityManager\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../query-runner/error/QueryRunnerProviderAlreadyReleasedError\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager extends BaseEntityManager {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\n        super(connection, queryRunnerProvider);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: Function, entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: string, entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: Function, entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    persist<Entity>(targetOrEntity: string, entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     */\n    persist<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[]): Promise<Entity|Entity[]> {\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        return Promise.resolve().then(() => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n            if (typeof target === \"string\") {\n                return this.getRepository<Entity|Entity[]>(target).persist(entity);\n            } else {\n                if (target instanceof Array) {\n                    if (target.length === 0)\n                        return Promise.resolve(target);\n\n                    return Promise.all(target.map((t, i) => {\n                        return this.getRepository<Entity>(t.constructor).persist((entity as Entity[])[i]);\n                    }));\n                } else {\n                    return this.getRepository<Entity>(target.constructor).persist(entity as Entity);\n                }\n            }\n        });\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: Function, entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: string, entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[]): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: Function, entity: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: string, entity: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntity?: Entity|Entity[]): Promise<Entity|Entity[]> {\n        const target = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Function|string;\n        const entity = arguments.length === 2 ? maybeEntity as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        if (typeof target === \"string\") {\n            return this.getRepository<Entity|Entity[]>(target).remove(entity);\n        } else {\n            if (target instanceof Array) {\n                return Promise.all(target.map((t, i) => {\n                    return this.getRepository<Entity>(t.constructor).remove((entity as Entity[])[i]);\n                }));\n            } else {\n                return this.getRepository<Entity>(target.constructor).remove(entity as Entity);\n            }\n        }\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral | FindOptions, options?: FindOptions): Promise<number> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).count(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).count(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).count();\n        }\n    }\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity[]> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).find(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).find(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).find();\n        }\n    }\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<[Entity[], number]> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).findAndCount(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).findAndCount(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).findAndCount();\n        }\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditions: ObjectLiteral, options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>, conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity|undefined> {\n        if (conditionsOrFindOptions && options) {\n            return this.getRepository(entityClass).findOne(conditionsOrFindOptions, options);\n\n        } else if (conditionsOrFindOptions) {\n            return this.getRepository(entityClass).findOne(conditionsOrFindOptions);\n\n        } else {\n            return this.getRepository(entityClass).findOne();\n        }\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>, ids: any[], options?: FindOptions): Promise<Entity[]> {\n        return this.getRepository(entityClass).findByIds(ids, options);\n    }\n\n    /**\n     * Finds entity with given id.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>, id: any, options?: FindOptions): Promise<Entity|undefined> {\n        return this.getRepository(entityClass).findOneById(id, options);\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n\n        try {\n            return await queryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n        }\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction(runInTransaction: (entityManger: EntityManager) => Promise<any>): Promise<any> {\n        if (this.queryRunnerProvider && this.queryRunnerProvider.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        const queryRunner = await queryRunnerProvider.provide();\n        const transactionEntityManager = new EntityManager(this.connection, queryRunnerProvider);\n\n        try {\n            await queryRunner.beginTransaction();\n            const result = await runInTransaction(transactionEntityManager);\n            await queryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw err;\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     */\n    clear<Entity>(entityClass: ObjectType<Entity>): Promise<void> {\n        return this.getRepository(entityClass).clear();\n    }\n\n}","/**\n * Utils to help to work with Promise objects.\n */\nexport class PromiseUtils {\n\n    /**\n     * Runs given callback that returns promise for each item in the given collection in order.\n     * Operations executed after each other, right after previous promise being resolved.\n     */\n    static runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\n        const results: U[] = [];\n        return collection.reduce((promise, item) => {\n            return promise.then(() => {\n                return callback(item);\n            }).then(result => {\n                results.push(result);\n            });\n        }, Promise.resolve()).then(() => {\n            return results;\n        });\n    }\n\n}","import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Subject, JunctionInsert, JunctionRemove} from \"./Subject\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\n\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nexport class SubjectOperationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * All subjects that needs to be operated.\n     */\n    protected allSubjects: Subject[];\n\n    /**\n     * Subjects that must be inserted.\n     */\n    protected insertSubjects: Subject[];\n\n    /**\n     * Subjects that must be updated.\n     */\n    protected updateSubjects: Subject[];\n\n    /**\n     * Subjects that must be removed.\n     */\n    protected removeSubjects: Subject[];\n\n    /**\n     * Subjects which relations should be updated.\n     */\n    protected relationUpdateSubjects: Subject[];\n\n    /**\n     * Query runner used to execute queries.\n     */\n    protected queryRunner: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected transactionEntityManager: EntityManager,\n                protected queryRunnerProvider: QueryRunnerProvider) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    async execute(subjects: Subject[]): Promise<void> {\n\n        /*subjects.forEach(subject => {\n            console.log(subject.entity);\n            console.log(\"mustBeInserted: \", subject.mustBeInserted);\n            console.log(\"mustBeUpdated: \", subject.mustBeUpdated);\n            console.log(\"mustBeRemoved: \", subject.mustBeRemoved);\n        });*/\n\n        // validate all subjects first\n        subjects.forEach(subject => subject.validate());\n\n        // set class properties for easy use\n        this.allSubjects = subjects;\n        this.insertSubjects = subjects.filter(subject => subject.mustBeInserted);\n        this.updateSubjects = subjects.filter(subject => subject.mustBeUpdated);\n        this.removeSubjects = subjects.filter(subject => subject.mustBeRemoved);\n        this.relationUpdateSubjects = subjects.filter(subject => subject.hasRelationUpdates);\n\n        // if there are no operations to execute then don't need to do something including opening a transaction\n        if (!this.insertSubjects.length &&\n            !this.updateSubjects.length &&\n            !this.removeSubjects.length &&\n            !this.relationUpdateSubjects.length &&\n            subjects.every(subject => !subject.junctionInserts.length) &&\n            subjects.every(subject => !subject.junctionRemoves.length))\n            return;\n\n        // start execute queries in a transaction\n        // if transaction is already opened in this query runner then we don't touch it\n        // if its not opened yet then we open it here, and once we finish - we close it\n        let isTransactionStartedByItself = false;\n        try {\n\n            this.queryRunner = await this.queryRunnerProvider.provide();\n\n            // open transaction if its not opened yet\n            if (!this.queryRunner.isTransactionActive()) {\n                isTransactionStartedByItself = true;\n                await this.queryRunner.beginTransaction();\n            }\n\n            // broadcast \"before\" events before we start updating\n            await this.connection.broadcaster.broadcastBeforeEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\n\n            // since events can trigger some internal changes (for example update depend property) we need to perform some re-computations here\n            this.updateSubjects.forEach(subject => subject.recompute());\n\n            await this.executeInsertOperations();\n            await this.executeInsertClosureTableOperations();\n            await this.executeInsertJunctionsOperations();\n            await this.executeRemoveJunctionsOperations();\n            await this.executeUpdateOperations();\n            await this.executeUpdateRelations();\n            await this.executeRemoveOperations();\n\n            // commit transaction if it was started by us\n            if (isTransactionStartedByItself === true)\n                await this.queryRunner.commitTransaction();\n\n            // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n            await this.updateSpecialColumnsInPersistedEntities();\n\n            // finally broadcast \"after\" events\n            // note that we are broadcasting events after commit because we want to have ids of the entities inside them to be available in subscribers\n            await this.connection.broadcaster.broadcastAfterEventsForAll(this.transactionEntityManager, this.insertSubjects, this.updateSubjects, this.removeSubjects);\n\n        } catch (error) {\n\n            // rollback transaction if it was started by us\n            if (isTransactionStartedByItself) {\n                try {\n                    await this.queryRunner.rollbackTransaction();\n\n                } catch (secondaryError) {\n                }\n            }\n\n            throw error;\n        }\n\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Insertion\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes insert operations.\n     *\n     * For insertion we separate two groups of entities:\n     * - first group of entities are entities which do not have any relations\n     *      or entities which do not have any non-nullable relation\n     * - second group of entities are entities which does have non-nullable relations\n     *\n     * Insert process of the entities from the first group which can only have nullable relations are actually a two-step process:\n     * - first we insert entities without their relations, explicitly left them NULL\n     * - later we update inserted entity once again with id of the object inserted with it\n     *\n     * Yes, two queries are being executed, but this is by design.\n     * There is no better way to solve this problem and others at the same time.\n     *\n     * Insert process of the entities from the second group which can have only non nullable relations is a single-step process:\n     * - we simply insert all entities and get into attention all its dependencies which were inserted in the first group\n     */\n    private async executeInsertOperations(): Promise<void> {\n\n        // separate insert entities into groups:\n\n        // TODO: current ordering mechanism is bad. need to create a correct order in which entities should be persisted, need to build a dependency graph\n\n        // first group of subjects are subjects without any non-nullable column\n        // we need to insert first such entities because second group entities may rely on those entities.\n        const firstInsertSubjects = this.insertSubjects.filter(subject => !subject.metadata.hasNonNullableColumns);\n\n        // second group - are all other subjects\n        // since in this group there are non nullable columns, some of them may depend on value of the\n        // previously inserted entity (which only can be entity with all nullable columns)\n        const secondInsertSubjects = this.insertSubjects.filter(subject => subject.metadata.hasNonNullableColumns);\n\n        // note: these operations should be executed in sequence, not in parallel\n        // because second group depend of obtained data from the first group\n        await Promise.all(firstInsertSubjects.map(subject => this.insert(subject, [])));\n        await Promise.all(secondInsertSubjects.map(subject => this.insert(subject, firstInsertSubjects)));\n\n        // we need to update relation ids of the newly inserted objects (where we inserted NULLs in relations)\n        // once we inserted all entities, we need to update relations which were bind to inserted entities.\n        // For example we have a relation many-to-one Post<->Category. Relation is nullable.\n        // New category was set to the new post and post where persisted.\n        // Here this method executes two inserts: one for post, one for category,\n        // but category in post is inserted with \"null\".\n        // now we need to update post table - set category with a newly persisted category id.\n        const updatePromises: Promise<any>[] = [];\n        firstInsertSubjects.forEach(subject => {\n\n            // first update relations with join columns (one-to-one owner and many-to-one relations)\n            const updateOptions: ObjectLiteral = {};\n            subject.metadata.relationsWithJoinColumns.forEach(relation => {\n                const referencedColumn = relation.joinColumn.referencedColumn;\n                const relatedEntity = relation.getEntityValue(subject.entity);\n\n                // if relation value is not set then nothing to do here\n                if (!relatedEntity)\n                    return;\n\n                // check if relation reference column is a relation\n                let relationId: any;\n                const columnRelation = relation.inverseEntityMetadata.relations.find(rel => rel.propertyName === relation.joinColumn.referencedColumn.propertyName);\n                if (columnRelation) { // if referenced column is a relation\n                    const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === relatedEntity[referencedColumn.propertyName]);\n\n                    // if this relation was just inserted\n                    if (insertSubject) {\n\n                        // check if we have this relation id already\n                        relationId = relatedEntity[referencedColumn.propertyName][columnRelation.propertyName];\n                        if (!relationId) {\n\n                            // if we don't have relation id then use special values\n                            if (referencedColumn.isGenerated) {\n                                relationId = insertSubject.newlyGeneratedId;\n                            }\n                            // todo: handle other special types too\n                        }\n                    }\n\n                } else { // if referenced column is a simple non relational column\n                    const insertSubject = this.insertSubjects.find(insertedSubject => insertedSubject.entity === relatedEntity);\n\n                    // if this relation was just inserted\n                    if (insertSubject) {\n\n                        // check if we have this relation id already\n                        relationId = relatedEntity[referencedColumn.propertyName];\n                        if (!relationId) {\n\n                            // if we don't have relation id then use special values\n                            if (referencedColumn.isGenerated) {\n                                relationId = insertSubject.newlyGeneratedId;\n                            }\n                            // todo: handle other special types too\n                        }\n                    }\n\n                }\n\n                if (relationId) {\n                    updateOptions[relation.name] = relationId;\n                }\n\n            });\n\n            // if we found relations which we can update - then update them\n            if (Object.keys(updateOptions).length > 0 /*&& subject.hasEntity*/) {\n                // const relatedEntityIdMap = subject.getPersistedEntityIdMap; // todo: this works incorrectly\n\n                const columns = subject.metadata.parentEntityMetadata ? subject.metadata.primaryColumnsWithParentIdColumns : subject.metadata.primaryColumns;\n                const conditions: ObjectLiteral = {};\n\n                columns.forEach(column => {\n                    const entityValue = subject.entity[column.propertyName];\n\n                    // if entity id is a relation, then extract referenced column from that relation\n                    const columnRelation = subject.metadata.relations.find(relation => relation.propertyName === column.propertyName);\n\n                    if (entityValue && columnRelation && columnRelation.joinColumn) { // not sure if we need handle join column from inverse side\n                        let relationIdOfEntityValue = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\n                        if (!relationIdOfEntityValue) {\n                            const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\n                            if (entityValueInsertSubject && columnRelation.joinColumn.referencedColumn.isGenerated) {\n                                relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\n                            }\n                        }\n                        if (relationIdOfEntityValue) {\n                            conditions[column.name] = relationIdOfEntityValue;\n                        }\n\n                    } else {\n                        if (entityValue) {\n                            conditions[column.name] = entityValue;\n                        } else {\n                            if (subject.newlyGeneratedId) {\n                                conditions[column.name] = subject.newlyGeneratedId;\n                            }\n                        }\n                    }\n                });\n                if (!Object.keys(conditions).length)\n                    return;\n\n                const updatePromise = this.queryRunner.update(subject.metadata.table.name, updateOptions, conditions);\n                updatePromises.push(updatePromise);\n            }\n\n            // we need to update relation ids if newly inserted objects are used from inverse side in one-to-many inverse relation\n            // we also need to update relation ids if newly inserted objects are used from inverse side in one-to-one inverse relation\n            const oneToManyAndOneToOneNonOwnerRelations = subject.metadata.oneToManyRelations.concat(subject.metadata.oneToOneRelations.filter(relation => !relation.isOwning));\n            subject.metadata.extractRelationValuesFromEntity(subject.entity, oneToManyAndOneToOneNonOwnerRelations)\n                .forEach(([relation, subRelatedEntity, inverseEntityMetadata]) => {\n                    const referencedColumn = relation.inverseRelation.joinColumn.referencedColumn;\n                    const columns = inverseEntityMetadata.parentEntityMetadata ? inverseEntityMetadata.primaryColumnsWithParentIdColumns : inverseEntityMetadata.primaryColumns;\n                    const conditions: ObjectLiteral = {};\n\n                    columns.forEach(column => {\n                        const entityValue = subRelatedEntity[column.propertyName];\n\n                        // if entity id is a relation, then extract referenced column from that relation\n                        const columnRelation = inverseEntityMetadata.relations.find(relation => relation.propertyName === column.propertyName);\n\n                        if (entityValue && columnRelation && columnRelation.joinColumn) { // not sure if we need handle join column from inverse side\n                            let relationIdOfEntityValue = entityValue[columnRelation.joinColumn.referencedColumn.propertyName];\n                            if (!relationIdOfEntityValue) {\n                                const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === entityValue);\n                                if (entityValueInsertSubject && columnRelation.joinColumn.referencedColumn.isGenerated) {\n                                    relationIdOfEntityValue = entityValueInsertSubject.newlyGeneratedId;\n                                }\n                            }\n                            if (relationIdOfEntityValue) {\n                                conditions[column.name] = relationIdOfEntityValue;\n                            }\n\n                        } else {\n                            const entityValueInsertSubject = this.insertSubjects.find(subject => subject.entity === subRelatedEntity);\n                            if (entityValue) {\n                                conditions[column.name] = entityValue;\n                            } else {\n                                if (entityValueInsertSubject && entityValueInsertSubject.newlyGeneratedId) {\n                                    conditions[column.name] = entityValueInsertSubject.newlyGeneratedId;\n                                }\n                            }\n                        }\n                    });\n                    if (!Object.keys(conditions).length)\n                        return;\n\n                    const updateOptions: ObjectLiteral = {};\n                    const columnRelation = relation.inverseEntityMetadata.relations.find(rel => rel.propertyName === referencedColumn.propertyName);\n                    if (columnRelation) {\n                        let id = subject.entity[referencedColumn.propertyName][columnRelation.propertyName];\n                        if (!id) {\n                            const insertSubject = this.insertSubjects.find(subject => subject.entity === subject.entity[referencedColumn.propertyName]);\n                            if (insertSubject) {\n                                id = insertSubject.newlyGeneratedId;\n                            }\n                        }\n                        updateOptions[relation.inverseRelation.joinColumn.name] = id;\n                    } else {\n                        updateOptions[relation.inverseRelation.joinColumn.name] = subject.entity[referencedColumn.propertyName] || subject.newlyGeneratedId;\n                    }\n\n                    const updatePromise = this.queryRunner.update(relation.inverseEntityMetadata.table.name, updateOptions, conditions);\n                    updatePromises.push(updatePromise);\n                });\n\n        });\n\n        await Promise.all(updatePromises);\n\n        // todo: make sure to search in all insertSubjects during updating too if updated entity uses links to the newly persisted entity\n    }\n\n    /**\n     * Inserts an entity from the given insert operation into the database.\n     * If entity has an generated column, then after saving new generated value will be stored to the InsertOperation.\n     * If entity uses class-table-inheritance, then multiple inserts may by performed to save all entities.\n     */\n    private async insert(subject: Subject, alreadyInsertedSubjects: Subject[]): Promise<any> {\n\n        const parentEntityMetadata = subject.metadata.parentEntityMetadata;\n        const metadata = subject.metadata;\n        const entity = subject.entity;\n        let newlyGeneratedId: any, parentGeneratedId: any;\n\n        // if entity uses class table inheritance then we need to separate entity into sub values that will be inserted into multiple tables\n        if (metadata.table.isClassTableChild) { // todo: with current implementation inheritance of multiple class table children will not work\n\n            // first insert entity values into parent class table\n            const parentValuesMap = this.collectColumnsAndValues(parentEntityMetadata, entity, subject.date, undefined, metadata.discriminatorValue, alreadyInsertedSubjects);\n            newlyGeneratedId = parentGeneratedId = await this.queryRunner.insert(parentEntityMetadata.table.name, parentValuesMap, parentEntityMetadata.generatedColumnIfExist);\n\n            // second insert entity values into child class table\n            const childValuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, newlyGeneratedId, undefined, alreadyInsertedSubjects);\n            const secondGeneratedId = await this.queryRunner.insert(metadata.table.name, childValuesMap, metadata.generatedColumnIfExist);\n            if (!newlyGeneratedId && secondGeneratedId) newlyGeneratedId = secondGeneratedId;\n\n        } else { // in the case when class table inheritance is not used\n\n            const valuesMap = this.collectColumnsAndValues(metadata, entity, subject.date, undefined, undefined, alreadyInsertedSubjects);\n            newlyGeneratedId = await this.queryRunner.insert(metadata.table.name, valuesMap, metadata.generatedColumnIfExist);\n        }\n\n        if (parentGeneratedId)\n            subject.parentGeneratedId = parentGeneratedId;\n\n        if (newlyGeneratedId && metadata.hasGeneratedColumn)\n            subject.newlyGeneratedId = newlyGeneratedId;\n    }\n\n    /**\n     * Collects columns and values for the insert operation.\n     */\n    private collectColumnsAndValues(metadata: EntityMetadata, entity: ObjectLiteral, date: Date, parentIdColumnValue: any, discriminatorValue: any, alreadyInsertedSubjects: Subject[]): ObjectLiteral {\n\n        // extract all columns\n        const columns = metadata.columns.filter(column => {\n            return !column.isVirtual && !column.isParentId && !column.isDiscriminator && column.hasEntityValue(entity);\n        });\n\n        const relationColumns: RelationMetadata[] = [];\n        const relationValues: any[] = [];\n        metadata.relationsWithJoinColumns.forEach(relation => {\n\n            let relationValue: any;\n            const value = relation.getEntityValue(entity);\n\n            if (value) {\n                // if relation value is stored in the entity itself then use it from there\n                const relationId = relation.getInverseEntityRelationId(value); // todo: check it\n                if (relationId) {\n                    relationValue = relationId;\n                }\n\n                // otherwise try to find relational value from just inserted subjects\n                const alreadyInsertedSubject = alreadyInsertedSubjects.find(insertedSubject => {\n                    return insertedSubject.entity === value;\n                });\n                if (alreadyInsertedSubject) {\n                    const referencedColumn = relation.joinColumn.referencedColumn;\n                    // if join column references to the primary generated column then seek in the newEntityId of the insertedSubject\n                    if (referencedColumn.referencedColumn && referencedColumn.referencedColumn.isGenerated) {\n                        if (referencedColumn.isParentId) {\n                            relationValue = alreadyInsertedSubject.parentGeneratedId;\n                        }\n                        // todo: what if reference column is not generated?\n                        // todo: what if reference column is not related to table inheritance?\n                    }\n\n                    if (referencedColumn.isGenerated)\n                        relationValue = alreadyInsertedSubject.newlyGeneratedId;\n                    // if it references to create or update date columns\n                    if (referencedColumn.isCreateDate || referencedColumn.isUpdateDate)\n                        relationValue = this.connection.driver.preparePersistentValue(alreadyInsertedSubject.date, referencedColumn);\n                    // if it references to version column\n                    if (referencedColumn.isVersion)\n                        relationValue = this.connection.driver.preparePersistentValue(1, referencedColumn);\n                }\n            } else if (relation.hasInverseSide) {\n                const inverseSubject = this.allSubjects.find(subject => {\n                    if (!subject.hasEntity || subject.entityTarget !== relation.inverseRelation.target)\n                        return false;\n\n                    const inverseRelationValue = subject.entity[relation.inverseRelation.propertyName];\n                    if (inverseRelationValue) {\n                        if (inverseRelationValue instanceof Array) {\n                            return inverseRelationValue.find(subValue => subValue === subValue);\n                        } else {\n                            return inverseRelationValue === entity;\n                        }\n                    }\n                });\n                if (inverseSubject && inverseSubject.entity[relation.joinColumn.referencedColumn.propertyName]) {\n                    relationValue = inverseSubject.entity[relation.joinColumn.referencedColumn.propertyName];\n                }\n            }\n\n            if (relationValue) {\n                relationColumns.push(relation);\n                relationValues.push(relationValue);\n            }\n        });\n\n        const columnNames = columns.map(column => column.name);\n        const relationColumnNames = relationColumns.map(relation => relation.name);\n        const allColumnNames = columnNames.concat(relationColumnNames);\n\n        const columnValues = columns.map(column => {\n            return this.connection.driver.preparePersistentValue(column.getEntityValue(entity), column);\n        });\n\n        const allValues = columnValues.concat(relationValues);\n\n        // add special column and value - date of creation\n        if (metadata.hasCreateDateColumn) {\n            allColumnNames.push(metadata.createDateColumn.name);\n            allValues.push(this.connection.driver.preparePersistentValue(date, metadata.createDateColumn));\n        }\n\n        // add special column and value - date of updating\n        if (metadata.hasUpdateDateColumn) {\n            allColumnNames.push(metadata.updateDateColumn.name);\n            allValues.push(this.connection.driver.preparePersistentValue(date, metadata.updateDateColumn));\n        }\n\n        // add special column and value - version column\n        if (metadata.hasVersionColumn) {\n            allColumnNames.push(metadata.versionColumn.name);\n            allValues.push(this.connection.driver.preparePersistentValue(1, metadata.versionColumn));\n        }\n\n        // add special column and value - discriminator value (for tables using table inheritance)\n        if (metadata.hasDiscriminatorColumn) {\n            allColumnNames.push(metadata.discriminatorColumn.name);\n            allValues.push(this.connection.driver.preparePersistentValue(discriminatorValue || metadata.discriminatorValue, metadata.discriminatorColumn));\n        }\n\n        // add special column and value - tree level and tree parents (for tree-type tables)\n        if (metadata.hasTreeLevelColumn && metadata.hasTreeParentRelation) {\n            const parentEntity = entity[metadata.treeParentRelation.propertyName];\n            const parentLevel = parentEntity ? (parentEntity[metadata.treeLevelColumn.propertyName] || 0) : 0;\n\n            allColumnNames.push(metadata.treeLevelColumn.name);\n            allValues.push(parentLevel + 1);\n        }\n\n        // add special column and value - parent id column (for tables using table inheritance)\n        if (metadata.parentEntityMetadata && metadata.hasParentIdColumn) {\n            allColumnNames.push(metadata.parentIdColumn.name); // todo: should be array of primary keys\n            allValues.push(parentIdColumnValue || entity[metadata.parentEntityMetadata.firstPrimaryColumn.propertyName]); // todo: should be array of primary keys\n        }\n\n        return OrmUtils.zipObject(allColumnNames, allValues);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Insertion into closure tables\n    // -------------------------------------------------------------------------\n\n    /**\n     * Inserts all given subjects into closure table.\n     */\n    private executeInsertClosureTableOperations(/*, updatesByRelations: Subject[]*/) { // todo: what to do with updatesByRelations\n        const promises = this.insertSubjects\n            .filter(subject => subject.metadata.table.isClosure)\n            .map(async subject => {\n                // const relationsUpdateMap = this.findUpdateOperationForEntity(updatesByRelations, insertSubjects, subject.entity);\n                // subject.treeLevel = await this.insertIntoClosureTable(subject, relationsUpdateMap);\n                await this.insertClosureTableValues(subject);\n            });\n        return Promise.all(promises);\n    }\n\n    /**\n     * Inserts given subject into closure table.\n     */\n    private async insertClosureTableValues(subject: Subject): Promise<void> {\n        // todo: since closure tables do not support compose primary keys - throw an exception?\n        // todo: what if parent entity or parentEntityId is empty?!\n        const tableName = subject.metadata.closureJunctionTable.table.name;\n        const referencedColumn = subject.metadata.treeParentRelation.joinColumn.referencedColumn; // todo: check if joinColumn works\n\n        let newEntityId = subject.entity[referencedColumn.propertyName];\n        if (!newEntityId && referencedColumn.isGenerated) {\n            newEntityId = subject.newlyGeneratedId;\n        } // todo: implement other special column types too\n\n        const parentEntity = subject.entity[subject.metadata.treeParentRelation.propertyName];\n        let parentEntityId: any = 0; // zero is important\n        if (parentEntity) {\n            parentEntityId = parentEntity[referencedColumn.propertyName];\n            if (!parentEntityId && referencedColumn.isGenerated) {\n                const parentInsertedSubject = this.insertSubjects.find(subject => subject.entity === parentEntity);\n                // todo: throw exception if parentInsertedSubject is not set\n                parentEntityId = parentInsertedSubject!.newlyGeneratedId;\n            } // todo: implement other special column types too\n        }\n\n        // try to find parent entity id in some other entity that has this entity in its children\n        if (!parentEntityId) {\n            const parentSubject = this.allSubjects.find(allSubject => {\n                if (!allSubject.hasEntity || !allSubject.metadata.table.isClosure || !allSubject.metadata.hasTreeChildrenRelation)\n                    return false;\n\n                const children = allSubject.entity[subject.metadata.treeChildrenRelation.propertyName];\n                return children instanceof Array ? children.indexOf(subject.entity) !== -1 : false;\n            });\n\n            if (parentSubject) {\n                parentEntityId = parentSubject.entity[referencedColumn.propertyName];\n                if (!parentEntityId && parentSubject.newlyGeneratedId) { // if still not found then it means parent just inserted with generated column\n                    parentEntityId = parentSubject.newlyGeneratedId;\n                }\n            }\n        }\n\n        // if parent entity exist then insert a new row into closure table\n        subject.treeLevel = await this.queryRunner.insertIntoClosureTable(tableName, newEntityId, parentEntityId, subject.metadata.hasTreeLevelColumn);\n\n        if (subject.metadata.hasTreeLevelColumn) {\n            const values = { [subject.metadata.treeLevelColumn.name]: subject.treeLevel };\n            await this.queryRunner.update(subject.metadata.table.name, values, { [referencedColumn.name]: newEntityId });\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Update\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates all given subjects in the database.\n     */\n    private async executeUpdateOperations(): Promise<void> {\n        await Promise.all(this.updateSubjects.map(subject => this.update(subject)));\n    }\n\n    /**\n     * Updates given subject in the database.\n     */\n    private async update(subject: Subject): Promise<void> {\n        const entity = subject.entity;\n\n        // we group by table name, because metadata can have different table names\n        const valueMaps: { tableName: string, metadata: EntityMetadata, values: ObjectLiteral }[] = [];\n\n        subject.diffColumns.forEach(column => {\n            if (!column.entityTarget) return; // todo: how this can be possible?\n            const metadata = this.connection.getMetadata(column.entityTarget);\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === metadata.table.name);\n            if (!valueMap) {\n                valueMap = { tableName: metadata.table.name, metadata: metadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            valueMap.values[column.name] = this.connection.driver.preparePersistentValue(column.getEntityValue(entity), column);\n        });\n\n        subject.diffRelations.forEach(relation => {\n            const metadata = this.connection.getMetadata(relation.entityTarget);\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === metadata.table.name);\n            if (!valueMap) {\n                valueMap = { tableName: metadata.table.name, metadata: metadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            const value = relation.getEntityValue(entity);\n            valueMap.values[relation.name] = value !== null && value !== undefined ? value[relation.inverseEntityMetadata.firstPrimaryColumn.propertyName] : null; // todo: should not have a call to primaryColumn, instead join column metadata should be used\n        });\n\n        // if number of updated columns = 0 no need to update updated date and version columns\n        if (Object.keys(valueMaps).length === 0)\n            return;\n\n        if (subject.metadata.hasUpdateDateColumn) {\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.table.name);\n            if (!valueMap) {\n                valueMap = { tableName: subject.metadata.table.name, metadata: subject.metadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            valueMap.values[subject.metadata.updateDateColumn.name] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.updateDateColumn);\n        }\n\n        if (subject.metadata.hasVersionColumn) {\n            let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.table.name);\n            if (!valueMap) {\n                valueMap = { tableName: subject.metadata.table.name, metadata: subject.metadata, values: {} };\n                valueMaps.push(valueMap);\n            }\n\n            valueMap.values[subject.metadata.versionColumn.name] = this.connection.driver.preparePersistentValue(entity[subject.metadata.versionColumn.propertyName] + 1, subject.metadata.versionColumn);\n        }\n\n        if (subject.metadata.parentEntityMetadata) {\n            if (subject.metadata.parentEntityMetadata.hasUpdateDateColumn) {\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.table.name);\n                if (!valueMap) {\n                    valueMap = {\n                        tableName: subject.metadata.parentEntityMetadata.table.name,\n                        metadata: subject.metadata.parentEntityMetadata,\n                        values: {}\n                    };\n                    valueMaps.push(valueMap);\n                }\n\n                valueMap.values[subject.metadata.parentEntityMetadata.updateDateColumn.name] = this.connection.driver.preparePersistentValue(new Date(), subject.metadata.parentEntityMetadata.updateDateColumn);\n            }\n\n            if (subject.metadata.parentEntityMetadata.hasVersionColumn) {\n                let valueMap = valueMaps.find(valueMap => valueMap.tableName === subject.metadata.parentEntityMetadata.table.name);\n                if (!valueMap) {\n                    valueMap = {\n                        tableName: subject.metadata.parentEntityMetadata.table.name,\n                        metadata: subject.metadata.parentEntityMetadata,\n                        values: {}\n                    };\n                    valueMaps.push(valueMap);\n                }\n\n                valueMap.values[subject.metadata.parentEntityMetadata.versionColumn.name] = this.connection.driver.preparePersistentValue(entity[subject.metadata.parentEntityMetadata.versionColumn.propertyName] + 1, subject.metadata.parentEntityMetadata.versionColumn);\n            }\n        }\n\n        await Promise.all(valueMaps.map(valueMap => {\n            const idMap = valueMap.metadata.getDatabaseEntityIdMap(entity);\n            if (!idMap)\n                throw new Error(`Internal error. Cannot get id of the updating entity.`);\n\n            return this.queryRunner.update(valueMap.tableName, valueMap.values, idMap);\n        }));\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Update only relations\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates relations of all given subjects in the database.\n     */\n    private executeUpdateRelations() {\n        return Promise.all(this.relationUpdateSubjects.map(subject => this.updateRelations(subject)));\n    }\n\n    /**\n     * Updates relations of the given subject in the database.\n     */\n    private async updateRelations(subject: Subject) {\n        const values: ObjectLiteral = {};\n        subject.relationUpdates.forEach(setRelation => {\n            const value = setRelation.value ? setRelation.value[setRelation.relation.joinColumn.referencedColumn.propertyName] : null;\n            values[setRelation.relation.name] = value; // todo: || fromInsertedSubjects ??\n        });\n\n        const idMap = subject.metadata.getDatabaseEntityIdMap(subject.databaseEntity);\n        if (!idMap)\n            throw new Error(`Internal error. Cannot get id of the updating entity.`);\n\n        return this.queryRunner.update(subject.metadata.table.name, values, idMap);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Remove\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all given subjects from the database.\n     */\n    private async executeRemoveOperations(): Promise<void> {\n        await PromiseUtils.runInSequence(this.removeSubjects, async subject => await this.remove(subject));\n    }\n\n    /**\n     * Updates given subject from the database.\n     */\n    private async remove(subject: Subject): Promise<void> {\n        if (subject.metadata.parentEntityMetadata) {\n            const parentConditions: ObjectLiteral = {};\n            subject.metadata.parentPrimaryColumns.forEach(column => {\n                parentConditions[column.name] = subject.databaseEntity[column.propertyName];\n            });\n            await this.queryRunner.delete(subject.metadata.parentEntityMetadata.table.name, parentConditions);\n\n            const childConditions: ObjectLiteral = {};\n            subject.metadata.primaryColumnsWithParentIdColumns.forEach(column => {\n                childConditions[column.name] = subject.databaseEntity[column.propertyName];\n            });\n            await this.queryRunner.delete(subject.metadata.table.name, childConditions);\n        } else {\n            await this.queryRunner.delete(subject.metadata.table.name, subject.metadata.getEntityIdColumnMap(subject.databaseEntity)!);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Insertion into junction tables\n    // -------------------------------------------------------------------------\n\n    /**\n     * Inserts into database junction tables all given array of subjects junction data.\n     */\n    private async executeInsertJunctionsOperations(): Promise<void> {\n        const promises: Promise<any>[] = [];\n        this.allSubjects.forEach(subject => {\n            subject.junctionInserts.forEach(junctionInsert => {\n                promises.push(this.insertJunctions(subject, junctionInsert));\n            });\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Inserts into database junction table given subject's junction insert data.\n     */\n    private async insertJunctions(subject: Subject, junctionInsert: JunctionInsert): Promise<void> {\n        // I think here we can only support to work only with single primary key entities\n\n        const relation = junctionInsert.relation;\n        const joinTable = relation.isOwning ? relation.joinTable : relation.inverseRelation.joinTable;\n        const firstColumn = relation.isOwning ? joinTable.referencedColumn : joinTable.inverseReferencedColumn;\n        const secondColumn = relation.isOwning ? joinTable.inverseReferencedColumn : joinTable.referencedColumn;\n\n        let ownId = relation.getOwnEntityRelationId(subject.entity);\n        if (!ownId) {\n            if (firstColumn.isGenerated) {\n                ownId = subject.newlyGeneratedId;\n            }\n            // todo: implement other special referenced column types (update date, create date, version, discriminator column, etc.)\n        }\n\n        if (!ownId)\n            throw new Error(`Cannot insert object of ${subject.entityTarget} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\n\n        const promises = junctionInsert.junctionEntities.map(newBindEntity => {\n\n            // get relation id from the newly bind entity\n            let relationId: any;\n            if (relation.isManyToManyOwner) {\n                relationId = newBindEntity[relation.joinTable.inverseReferencedColumn.propertyName];\n\n            } else if (relation.isManyToManyNotOwner) {\n                relationId = newBindEntity[relation.inverseRelation.joinTable.referencedColumn.propertyName];\n            }\n\n            // if relation id is missing in the newly bind entity then check maybe it was just persisted\n            // and we can use special newly generated value\n            if (!relationId) {\n                const insertSubject = this.insertSubjects.find(subject => subject.entity === newBindEntity);\n                if (insertSubject) {\n                    if (secondColumn.isGenerated) {\n                        relationId = insertSubject.newlyGeneratedId;\n                    }\n                    // todo: implement other special values too\n                }\n            }\n\n            // if relation id still does not exist - we arise an error\n            if (!relationId)\n                throw new Error(`Cannot insert object of ${(newBindEntity.constructor as any).name} type. Looks like its not persisted yet, or cascades are not set on the relation.`); // todo: better error message\n\n            const columns = relation.junctionEntityMetadata.columns.map(column => column.name);\n            const values = relation.isOwning ? [ownId, relationId] : [relationId, ownId];\n\n            return this.queryRunner.insert(relation.junctionEntityMetadata.table.name, OrmUtils.zipObject(columns, values));\n        });\n\n        await Promise.all(promises);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Remove from junction tables\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes from database junction tables all given array of subjects removal junction data.\n     */\n    private async executeRemoveJunctionsOperations(): Promise<void> {\n        const promises: Promise<any>[] = [];\n        this.allSubjects.forEach(subject => {\n            subject.junctionRemoves.forEach(junctionRemove => {\n                promises.push(this.removeJunctions(subject, junctionRemove));\n            });\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Removes from database junction table all given subject's removal junction data.\n     */\n    private async removeJunctions(subject: Subject, junctionRemove: JunctionRemove) {\n        const junctionMetadata = junctionRemove.relation.junctionEntityMetadata;\n        const entity = subject.hasEntity ? subject.entity : subject.databaseEntity;\n        const ownId = junctionRemove.relation.getOwnEntityRelationId(entity);\n        const ownColumn = junctionRemove.relation.isOwning ? junctionMetadata.columns[0] : junctionMetadata.columns[1];\n        const relateColumn = junctionRemove.relation.isOwning ? junctionMetadata.columns[1] : junctionMetadata.columns[0];\n        const removePromises = junctionRemove.junctionRelationIds.map(relationId => {\n            return this.queryRunner.delete(junctionMetadata.table.name, {\n                [ownColumn.name]: ownId,\n                [relateColumn.name]: relationId\n            });\n        });\n\n        await Promise.all(removePromises);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods: Refresh entity values after persistence\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates all special columns of the saving entities (create date, update date, versioning).\n     */\n    private updateSpecialColumnsInPersistedEntities() {\n\n        // update entity columns that gets updated on each entity insert\n        this.insertSubjects.forEach(subject => {\n            subject.metadata.primaryColumns.forEach(primaryColumn => {\n                if (subject.newlyGeneratedId)\n                    subject.entity[primaryColumn.propertyName] = subject.newlyGeneratedId;\n            });\n            subject.metadata.parentPrimaryColumns.forEach(primaryColumn => {\n                if (subject.parentGeneratedId)\n                    subject.entity[primaryColumn.propertyName] = subject.parentGeneratedId;\n            });\n\n            if (subject.metadata.hasUpdateDateColumn)\n                subject.entity[subject.metadata.updateDateColumn.propertyName] = subject.date;\n            if (subject.metadata.hasCreateDateColumn)\n                subject.entity[subject.metadata.createDateColumn.propertyName] = subject.date;\n            if (subject.metadata.hasVersionColumn)\n                subject.entity[subject.metadata.versionColumn.propertyName]++;\n            if (subject.metadata.hasTreeLevelColumn) {\n                // const parentEntity = insertOperation.entity[metadata.treeParentMetadata.propertyName];\n                // const parentLevel = parentEntity ? (parentEntity[metadata.treeLevelColumn.propertyName] || 0) : 0;\n                subject.entity[subject.metadata.treeLevelColumn.propertyName] = subject.treeLevel;\n            }\n            /*if (subject.metadata.hasTreeChildrenCountColumn) {\n                 subject.entity[subject.metadata.treeChildrenCountColumn.propertyName] = 0;\n            }*/\n        });\n\n        // update special columns that gets updated on each entity update\n        this.updateSubjects.forEach(subject => {\n            if (subject.metadata.hasUpdateDateColumn)\n                subject.entity[subject.metadata.updateDateColumn.propertyName] = subject.date;\n            if (subject.metadata.hasVersionColumn)\n                subject.entity[subject.metadata.versionColumn.propertyName]++;\n        });\n\n        // remove ids from the entities that were removed\n        this.removeSubjects\n            .filter(subject => subject.hasEntity)\n            .forEach(subject => {\n                subject.metadata.primaryColumns.forEach(primaryColumn => {\n                    subject.entity[primaryColumn.propertyName] = undefined;\n                });\n            });\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Connection} from \"../connection/Connection\";\nimport {Subject} from \"./Subject\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\n\n/**\n * To be able to execute persistence operations we need to load all entities from the database we need.\n * Loading should be efficient - we need to load entities in as few queries as possible + load as less data as we can.\n * This is how we determine which entities needs to be loaded from db:\n *\n * 1. example with cascade updates and inserts:\n *\n * [Y] - means \"yes, we load\"\n * [N] - means \"no, we don't load\"\n * in {} braces we specify what cascade options are set between relations\n *\n * if Post is new, author is not set in the post\n *\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *   [Y] Author -> {all} // no because author is not set\n *     [Y] Photo -> {all} // no because author and its photo are not set\n *       [Y] Tag -> {all} // no because author and its photo and its tag are not set\n *\n * if Post is new, author is new (or anything else is new)\n * if Post is updated\n * if Post and/or Author are updated\n *\n * [Y] Post -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *   [Y] Author -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *     [Y] Photo -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *       [Y] Tag -> {all} // yes because of \"update\" and \"insert\" cascades, no because of \"remove\"\n *\n * Here we load post, author, photo, tag to check if they are new or not to persist insert or update operation.\n * We load post, author, photo, tag only if they exist in the relation.\n * From these examples we can see that we always load entity relations when it has \"update\" or \"insert\" cascades.\n *\n * 2. example with cascade removes\n *\n * if entity is new its remove operations by cascades should not be executed\n * if entity is updated then values that are null or missing in array (not undefined!, undefined means skip - don't do anything) are treated as removed\n * if entity is removed then all its downside relations which has cascade remove should be removed\n *\n * Once we find removed entity - we load it, and every downside entity which has \"remove\" cascade set.\n *\n * At the end we have all entities we need to operate with.\n * Next step is to store all loaded entities to manipulate them efficiently.\n *\n * Rules of updating by cascades.\n * Insert operation can lead to:\n *  - insert operations\n *  - update operations\n * Update operation can lead to:\n *  - insert operations\n *  - update operations\n *  - remove operations\n * Remove operation can lead to:\n *  - remove operation\n */\nexport class SubjectBuilder<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * If this gonna be reused then what to do with marked flags?\n     * One of solution can be clone this object and reset all marked states for this persistence.\n     * Or from reused just extract databaseEntities from their subjects? (looks better)\n     */\n    operateSubjects: Subject[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunnerProvider: QueryRunnerProvider) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds operations for entity that is being inserted/updated.\n     */\n    async persist(entity: Entity, metadata: EntityMetadata): Promise<void> {\n\n        // create subject for currently persisted entity and mark that it can be inserted and updated\n        const mainPersistedSubject = new Subject(metadata, entity);\n        mainPersistedSubject.canBeInserted = true;\n        mainPersistedSubject.canBeUpdated = true;\n        this.operateSubjects.push(mainPersistedSubject);\n\n        // next step we build list of subjects we will operate with\n        // these subjects are subjects that we need to insert or update alongside with main persisted entity\n        this.buildCascadeUpdateAndInsertOperateSubjects(mainPersistedSubject);\n\n        // next step is to load database entities of all operate subjects\n        await this.loadOperateSubjectsDatabaseEntities();\n\n        // next step - we filter subjects with database entities (only for non-new entities)\n        // and find operate subjects that needs to be removed\n        // here we also find operate subjects which relations should be updated\n        // these relations usually are \"update from inverse side\" operations\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\n        }));\n\n        // finally find which operate subjects have insert and remove operations in their junction tables\n        await this.buildJunctionOperations({ insert: true, remove: true });\n    }\n\n    /**\n     * Builds only remove operations for entity that is being removed.\n     */\n    async remove(entity: Entity, metadata: EntityMetadata): Promise<void> {\n\n        // create subject for currently removed entity and mark that it must be removed\n        const mainRemovedSubject = new Subject(metadata, entity);\n        mainRemovedSubject.mustBeRemoved = true;\n        this.operateSubjects.push(mainRemovedSubject);\n\n        // next step we build list of subjects we will operate with\n        // these subjects are subjects that we need to remove alongside with main removed entity\n        this.buildCascadeRemoveOperateSubjects(mainRemovedSubject);\n\n        // next step is to load database entities for all operate subjects\n        await this.loadOperateSubjectsDatabaseEntities();\n\n        // next step - we filter subjects with database entities (only for non-new entities)\n        // and find operate subjects that needs to be removed\n        // todo(this should not be in remove?) // here we also find operate subjects which relations should be updated\n        // todo(this should not be in remove?) // these relations usually are \"update from inverse side\" operations\n        const operateSubjectsWithDatabaseEntities = this.operateSubjects.filter(subject => subject.hasDatabaseEntity);\n        await Promise.all(operateSubjectsWithDatabaseEntities.map(subject => {\n            return this.buildCascadeRemovedAndRelationUpdateOperateSubjects(subject);\n        }));\n\n        // finally find which operate subjects have remove operations in their junction tables\n        await this.buildJunctionOperations({ insert: false, remove: true });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds and pushes to array of operate entities all entities that we will work with.\n     * These are only relational entities which has insert and update cascades.\n     * All such entities will be loaded from the database, because they can be inserted or updated.\n     * That's why we load them - to understand if they should be inserted or updated, or which columns we need to update.\n     * We can't add removed entities here, because to know which entity was removed we need first to\n     * load original entity (particularly its id) from the database.\n     * That's why we first need to load all changed entities, then extract ids of the removed entities from them,\n     * and only then load removed entities by extracted ids.\n     */\n    protected buildCascadeUpdateAndInsertOperateSubjects(subject: Subject): void {\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\n            .filter(([relation, value, valueMetadata]) => {\n\n                // we need only defined values and insert or update cascades of the relation should be set\n                return value !== undefined && value !== null && (relation.isCascadeInsert || relation.isCascadeUpdate);\n            })\n            .forEach(([relation, value, valueMetadata]) => {\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\n                if (alreadyExistValueSubject) {\n                    if (alreadyExistValueSubject.canBeInserted === false)\n                        alreadyExistValueSubject.canBeInserted = relation.isCascadeInsert === true;\n                    if (alreadyExistValueSubject.canBeUpdated === false)\n                        alreadyExistValueSubject.canBeUpdated = relation.isCascadeUpdate === true;\n                    return;\n                }\n\n                // mark subject with what we can do with it\n                // and add to the array of subjects to load only if there is no same entity there already\n                const valueSubject = new Subject(valueMetadata, value);\n                valueSubject.canBeInserted = relation.isCascadeInsert === true;\n                valueSubject.canBeUpdated = relation.isCascadeUpdate === true;\n                this.operateSubjects.push(valueSubject);\n\n                // go recursively and find other entities we need to operate with\n                this.buildCascadeUpdateAndInsertOperateSubjects(valueSubject);\n            });\n    }\n\n    /**\n     * Builds and pushes to array of operate entities all entities that must be removed.\n     */\n    protected buildCascadeRemoveOperateSubjects(subject: Subject): void {\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations)\n            .filter(([relation, value, valueMetadata]) => {\n\n                // we need only defined values and insert cascades of the relation should be set\n                return value !== undefined && value !== null && relation.isCascadeRemove;\n            })\n            .forEach(([relation, value, valueMetadata]) => {\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistValueSubject = this.findByEntityLike(valueMetadata.target, value);\n                if (alreadyExistValueSubject) {\n                    alreadyExistValueSubject.mustBeRemoved = true;\n                    return;\n                }\n\n                // add to the array of subjects to load only if there is no same entity there already\n                const valueSubject = new Subject(valueMetadata, value);\n                valueSubject.mustBeRemoved = true;\n                this.operateSubjects.push(valueSubject);\n\n                // go recursively and find other entities to load by cascades in currently inserted entities\n                this.buildCascadeRemoveOperateSubjects(valueSubject);\n            });\n    }\n\n    /**\n     * Loads database entities for all operate subjects which do not have database entity set.\n     * All entities that we load database entities for are marked as updated or inserted.\n     * To understand which of them really needs to be inserted or updated we need to load\n     * their original representations from the database.\n     */\n    protected async loadOperateSubjectsDatabaseEntities(): Promise<void> {\n\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\n        // go throw the groups and perform loading of database entities of each subject in the group\n        const promises = this.groupByEntityTargets().map(async subjectGroup => {\n\n            // prepare entity ids of the subjects we need to load\n            const allIds = subjectGroup.subjects\n                .filter(subject => !subject.hasDatabaseEntity) // we don't load if subject already has a database entity loaded\n                .map(subject => subject.metadata.getEntityIdMixedMap(subject.entity)) // we only need entity id\n                .filter(mixedId => { // we don't need empty ids\n                    if (mixedId instanceof Object)\n                        return Object.keys(mixedId).every(key => mixedId[key] !== undefined && mixedId[key] !== null && mixedId[key] !== \"\");\n\n                    return mixedId !== undefined && mixedId !== null && mixedId !== \"\";\n                });\n\n            // if there no ids found (which means all entities are new and have generated ids) - then nothing to load there\n            if (!allIds.length)\n                return;\n\n            // load database entities for all given ids\n            const entities = await this.connection\n                .getRepository<ObjectLiteral>(subjectGroup.target)\n                .createQueryBuilder(\"operateSubject\", this.queryRunnerProvider)\n                .andWhereInIds(allIds)\n                .enableOption(\"RELATION_ID_VALUES\")\n                .getMany();\n\n            // now when we have entities we need to find subject of each entity\n            // and insert that entity into database entity of the found subject\n            entities.forEach(entity => {\n                const subject = this.findByEntityLike(subjectGroup.target, entity);\n                if (subject)\n                    subject.databaseEntity = entity;\n            });\n\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * We need to load removed entity when:\n     *  - entity with relations is not new (this can be determined only after entity is loaded from db)\n     *      (note: simple \"id\" check will not work because id can be not generated)\n     *  - entity missing relation. When relation is simple\n     *      - in the case of one-to-one owner (with join column) relation we need to load owner entity\n     *      - in the case of one-to-one (without join column) relation we need to load inverse side entity\n     *      - in the case of many-to-one relations we need to load entity itself\n     *      - in the case of one-to-many relations we need to load entities by relation from inverse side\n     *\n     *  Before loading each entity we need to check in the loaded subjects - maybe it was already loaded.\n     *\n     *  BIG NOTE: objects are being removed by cascades not only when relation is removed, but also when\n     *  relation is replaced (e.g. changed with different object).\n     */\n    protected async buildCascadeRemovedAndRelationUpdateOperateSubjects(subject: Subject): Promise<void> {\n\n        // note: we can't use extractRelationValuesFromEntity here because it does not handle empty arrays\n        const promises = subject.metadata.relations.map(async relation => {\n            const valueMetadata = relation.inverseEntityMetadata;\n            const qbAlias = valueMetadata.table.name;\n\n            // added for type-safety, but subject without databaseEntity cant come here anyway because of checks on upper levels\n            if (!subject.hasDatabaseEntity) return;\n\n            // for one-to-one owner and many-to-one relations no need to load entity to check if something removed\n            // because join column is in this side of relation and we have a database entity with which we can compare\n            // and understand if relation was removed or not\n            if (relation.isOneToOneOwner || relation.isManyToOne) {\n\n                // we only work with cascade removes here\n                if (!relation.isCascadeRemove) return;\n\n                /**\n                 * By example (one-to-one owner). Let's say we have a one-to-one relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation. Post has cascade remove with details.\n                 * Now here we have a post object with removed details.\n                 * We need to remove Details if post.details = null\n                 * or if post.details != databasePost.details\n                 */\n\n                /**\n                 * By example (many-to-one). Let's say we have a many-to-one relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation.\n                 * It also means that post can have only one details, and details can have multiple posts.\n                 * Post has cascade remove with details.\n                 * Now here we have a post object with removed details.\n                 * We need to remove Details (one) if post.details = null\n                 * or if post.details != databasePost.details\n                 */\n\n                // (example) \"relation\" - is a relation in post with details.\n                // (example) \"valueMetadata\" - is an entity metadata of the Details object.\n                // (example) \"persistValue\" - is a detailsId from the persisted entity\n\n                // note that if databaseEntity has relation, it can only be a relation id,\n                // because of query builder option \"RELATION_ID_VALUES\" we used\n                const relationIdInDatabaseEntity = subject.databaseEntity[relation.joinColumn.propertyName]; // (example) returns post.detailsId\n\n                // if database relation id does not exist in the database object then nothing to remove\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\n                    return;\n\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\n                let persistValueRelationId: any = undefined;\n                if (subject.hasEntity) {\n                    const persistValue = relation.getEntityValue(subject.entity);\n                    if (persistValue === null) persistValueRelationId = null;\n                    if (persistValue) persistValueRelationId = persistValue[relation.joinColumn.referencedColumn.propertyName];\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\n                }\n\n                // object is removed only if relation id in the persisted entity is empty or is changed\n                if (persistValueRelationId !== null && persistValueRelationId === relationIdInDatabaseEntity)\n                    return;\n\n                // first check if we already loaded this object before load from the database\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\n\n                    // (example) filter only subject that has database entity loaded and its target is Details\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\n                        return false;\n\n                    // (example) here we seek a Details loaded from the database in the subjects\n                    // (example) here relatedSubject.databaseEntity is a Details\n                    // (example) and we need to compare details.id === post.detailsId\n                    return relatedSubject.databaseEntity[relation.joinColumn.referencedColumn.propertyName] === relationIdInDatabaseEntity;\n                });\n\n                // if not loaded yet then load it from the database\n                if (!alreadyLoadedRelatedDatabaseSubject) {\n\n                    // (example) we need to load a details where details.id = post.details\n                    const databaseEntity = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider)\n                        .where(qbAlias + \".\" + relation.joinColumn.referencedColumn.propertyName + \"=:id\")\n                        .setParameter(\"id\", relationIdInDatabaseEntity) // (example) subject.entity is a post here\n                        .enableOption(\"RELATION_ID_VALUES\")\n                        .getOne();\n\n                    if (databaseEntity) {\n                        alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\n                        this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\n                    }\n                }\n\n                if (alreadyLoadedRelatedDatabaseSubject) {\n\n                    // if object is already marked as removed then no need to proceed because it already was proceed\n                    // if we remove this it will cause a recursion\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\n                        return;\n\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\n                }\n            }\n\n            // for one-to-one not owner we need to load entity to understand that it was really removed or not,\n            // since column value that indicates relation is stored on inverse side\n            if (relation.isOneToOneNotOwner) {\n\n                // we only work with cascade removes here\n                if (!relation.isCascadeRemove) return; // todo: no\n\n                /**\n                 * By example. Let's say we have a one-to-one relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation. Details has cascade remove with post.\n                 * Now here we have a details object with removed post.\n                 * We need to remove Post if details.post = null and databasePost.detailsId = details.id exist in the db,\n                 * or if databasePost.id === details.post.id (we need to load it) and databasePost.detailsId != details.id\n                 */\n\n                // (example) \"relation\" - is a relation in details with post.\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\n                // (example) \"subject.databaseEntity\" - is a details object\n\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\n                let persistValueRelationId: any = undefined;\n                if (subject.hasEntity && !subject.mustBeRemoved) {\n                    const persistValue = relation.getEntityValue(subject.entity);\n                    if (persistValue) persistValueRelationId = persistValue[relation.inverseRelation.joinColumn.propertyName];\n                    if (persistValueRelationId === undefined) return; // skip undefined properties\n                }\n\n                // (example) returns us referenced column (detail's id)\n                const relationIdInDatabaseEntity = subject.databaseEntity[relation.inverseRelation.joinColumn.referencedColumn.propertyName];\n\n                // if database relation id does not exist then nothing to remove (but can this be possible?)\n                if (relationIdInDatabaseEntity === null || relationIdInDatabaseEntity === undefined)\n                    return;\n\n                // first check if we already have this object loaded before load from the database\n                let alreadyLoadedRelatedDatabaseSubject = this.operateSubjects.find(relatedSubject => {\n\n                    // (example) filter only subject that has database entity loaded and its target is Post\n                    if (!relatedSubject.hasDatabaseEntity || relatedSubject.entityTarget !== valueMetadata.target)\n                        return false;\n\n                    // (example) here we seek a Post loaded from the database in the subjects\n                    // (example) here relatedSubject.databaseEntity is a Post\n                    // (example) and we need to compare post.detailsId === details.id\n                    return relatedSubject.databaseEntity[relation.inverseRelation.joinColumn.propertyName] === relationIdInDatabaseEntity;\n                });\n\n                // if not loaded yet then load it from the database\n                if (!alreadyLoadedRelatedDatabaseSubject) {\n\n                    // (example) we need to load a post where post.detailsId = details.id\n                    const databaseEntity = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider)\n                        .where(qbAlias + \".\" + relation.inverseSideProperty + \"=:id\")\n                        .setParameter(\"id\", relationIdInDatabaseEntity) // (example) subject.entity is a details here, and the value is details.id\n                        .enableOption(\"RELATION_ID_VALUES\")\n                        .getOne();\n\n                    // add only if database entity exist - because in the case of inverse side of the one-to-one relation\n                    // we cannot check if it was removed or not until we query the database\n                    // and it can be a situation that relation wasn't exist at all. This is particular that case\n                    alreadyLoadedRelatedDatabaseSubject = new Subject(valueMetadata, undefined, databaseEntity);\n                    this.operateSubjects.push(alreadyLoadedRelatedDatabaseSubject);\n                }\n\n                // check if we really has a relation between entities. If relation not found then alreadyLoadedRelatedDatabaseSubject will be empty\n                if (alreadyLoadedRelatedDatabaseSubject && alreadyLoadedRelatedDatabaseSubject.hasDatabaseEntity) {\n\n                    // also check if relation value exist then then make sure its changed\n                    // (example) persistValue is a postFromPersistedDetails here\n                    // (example) alreadyLoadedRelatedDatabaseSubject.databaseEntity is a postFromDatabaseDetails here\n                    // (example) postFromPersistedDetails.id === postFromDatabaseDetails - means nothing changed\n                    const inverseEntityRelationId = alreadyLoadedRelatedDatabaseSubject.databaseEntity[relation.inverseRelation.joinColumn.propertyName];\n                    if (persistValueRelationId && persistValueRelationId === inverseEntityRelationId)\n                        return;\n\n                    // if object is already marked as removed then no need to proceed because it already was proceed\n                    // if we remove this it will cause a recursion\n                    if (alreadyLoadedRelatedDatabaseSubject.mustBeRemoved)\n                        return;\n\n                    alreadyLoadedRelatedDatabaseSubject.mustBeRemoved = true;\n                    await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(alreadyLoadedRelatedDatabaseSubject);\n                }\n            }\n\n            // for one-to-many we need to load entities to understand which was really removed\n            // since column value that indicates relation is stored on inverse side\n            if (relation.isOneToMany || relation.isManyToMany) {\n\n                // we only work with cascade removes here\n                // if (!relation.isCascadeRemove && !relation.isCascadeUpdate) return;\n\n                /**\n                 * By example. Let's say we have a one-to-many relation between Post and Details.\n                 * Post contains detailsId. It means he owns relation.\n                 * It also means that one details contains multiple post, and one post contain only one details.\n                 * Details has cascade remove with post.\n                 * Now here we have a details object with removed post.\n                 * There can be one or multiple removed posts, because posts is an array in details.\n                 * If details.posts is undefined then we skip it as we do with any persisted undefined property.\n                 * If details.posts is an empty array it means all its items should be removed.\n                 * If details.posts is a null it means same - all its items has been removed.\n                 * We need to remove each Post in the databaseDetails where post is missing in details.posts\n                 * but databasePost.detailsId = details.id exist in the db.\n                 */\n\n                // (example) \"relation\" - is a relation in details with post.\n                // (example) \"valueMetadata\" - is an entity metadata of the Post object.\n                // (example) \"subject.databaseEntity\" - is a details object\n\n                // if this subject is persisted subject then we get its value to check if its not empty or its values changed\n                let persistValue: any = undefined;\n                if (subject.hasEntity) {\n                    persistValue = relation.getEntityValue(subject.entity);\n                    if (persistValue === undefined) return; // skip undefined properties\n                }\n\n                // we can't get already loaded objects from loadMap because we don't know exactly how\n                // many objects are in database entity, and entities from loadMap may return us not all of them\n                // that's why we are forced to load all its entities from the database even if loaded some of them before\n                // (example) we need to load a posts where post.detailsId = details.id\n                let databaseEntities: ObjectLiteral[] = [];\n\n                // create shortcuts for better readability\n                const escapeAlias = (alias: string) => this.connection.driver.escapeAliasName(alias);\n                const escapeColumn = (column: string) => this.connection.driver.escapeColumnName(column);\n\n                if (relation.isManyToManyOwner) {\n\n                    // (example) returns us referenced column (detail's id)\n                    const relationIdInDatabaseEntity = subject.databaseEntity[relation.joinTable.referencedColumn.propertyName];\n\n                    // we only need to load inverse entities if cascade removes are set\n                    // because remove by cascades is the only reason we need relational entities here\n                    if (!relation.isCascadeRemove) return;\n\n                    databaseEntities = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider)\n                        .innerJoin(relation.junctionEntityMetadata.table.name, \"persistenceJoinedRelation\",\n                            escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.joinTable.inverseJoinColumnName) + \"=\" + escapeAlias(qbAlias) + \".\" + escapeColumn(relation.joinTable.inverseReferencedColumn.name) +\n                            \" AND \" + escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.joinTable.joinColumnName) + \"=:id\")\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\n                        .enableOption(\"RELATION_ID_VALUES\")\n                        .getMany();\n\n                } else if (relation.isManyToManyNotOwner) {\n\n                    // (example) returns us referenced column (detail's id)\n                    const relationIdInDatabaseEntity = subject.databaseEntity[relation.inverseRelation.joinTable.inverseReferencedColumn.propertyName];\n\n                    // we only need to load inverse entities if cascade removes are set\n                    // because remove by cascades is the only reason we need relational entities here\n                    if (!relation.isCascadeRemove) return;\n\n                    databaseEntities = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider)\n                        .innerJoin(relation.junctionEntityMetadata.table.name, \"persistenceJoinedRelation\",\n                            escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.joinTable.joinColumnName) + \"=\" + escapeAlias(qbAlias) + \".\" + escapeColumn(relation.joinTable.referencedColumn.name) +\n                            \" AND \" + escapeAlias(\"persistenceJoinedRelation\") + \".\" + escapeColumn(relation.inverseRelation.joinTable.inverseJoinColumnName) + \"=:id\")\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\n                        .enableOption(\"RELATION_ID_VALUES\")\n                        .getMany();\n\n                } else { // this case can only be a oneToMany relation\n\n                    // (example) returns us referenced column (detail's id)\n                    const relationIdInDatabaseEntity = subject.databaseEntity[relation.inverseRelation.joinColumn.referencedColumn.propertyName];\n\n                    // in this case we need inverse entities not only because of cascade removes\n                    // because we also need inverse entities to be able to perform update of entities\n                    // in the inverse side when entities is detached from one-to-many relation\n\n                    databaseEntities = await this.connection\n                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                        .createQueryBuilder(qbAlias, this.queryRunnerProvider)\n                        .where(qbAlias + \".\" + relation.inverseSideProperty + \"=:id\")\n                        .setParameter(\"id\", relationIdInDatabaseEntity)\n                        .enableOption(\"RELATION_ID_VALUES\")\n                        .getMany();\n                }\n\n                // add to loadMap loaded entities if some of them are missing\n                databaseEntities.forEach(databaseEntity => {\n                    const subjectInLoadMap = this.findByEntityLike(valueMetadata.target, databaseEntity);\n                    if (subjectInLoadMap && !subjectInLoadMap.hasDatabaseEntity) {\n                        subjectInLoadMap.databaseEntity = databaseEntity;\n\n                    } else if (!subjectInLoadMap) {\n                        const subject = new Subject(valueMetadata, undefined, databaseEntity);\n                        this.operateSubjects.push(subject);\n                    }\n                });\n\n\n                // add new relations for newly bind entities from the one-to-many relations\n                if (relation.isOneToMany && persistValue) { // todo: implement same for one-to-one\n                    const promises = (persistValue as ObjectLiteral[]).map(async persistValue => {\n\n                        // try to find in the database entities persistedValue (entity bind to this relation)\n                        const persistedValueInDatabaseEntity = databaseEntities.find(databaseEntity => {\n                            return valueMetadata.compareEntities(persistValue, databaseEntity);\n                        });\n\n                        // if it does not exist in the database entity - it means we need to bind it\n                        // to bind it we need to update related entity itself\n                        // this operation is performed only in one-to-many relations\n                        if (!persistedValueInDatabaseEntity) {\n\n                            // now find subject with\n                            let loadedSubject = this.findByDatabaseEntityLike(valueMetadata.target, persistValue);\n                            if (!loadedSubject) {\n                                const id = valueMetadata.getEntityIdMixedMap(persistValue);\n                                if (id) { // if there is no id (for newly inserted) then we cant load\n                                    const databaseEntity = await this.connection\n                                        .getRepository<ObjectLiteral>(valueMetadata.target)\n                                        .createQueryBuilder(qbAlias, this.queryRunnerProvider)\n                                        .andWhereInIds([id])\n                                        .enableOption(\"RELATION_ID_VALUES\")\n                                        .getOne();\n\n                                    if (databaseEntity) {\n                                        loadedSubject = new Subject(valueMetadata, undefined, databaseEntity); // todo: what if entity like object exist in the loaded subjects but without databaseEntity?\n                                        this.operateSubjects.push(loadedSubject);\n                                    }\n                                }\n                            }\n\n                            if (loadedSubject)\n                                loadedSubject.relationUpdates.push({\n                                    relation: relation.inverseRelation,\n                                    value: subject.entity\n                                });\n                        }\n                    });\n\n                    await Promise.all(promises);\n                }\n\n                // iterate throw loaded inverse entities to find out removed entities and inverse updated entities (only for one-to-many relation)\n                const promises = databaseEntities.map(async databaseEntity => {\n\n                    // find a subject object of the related database entity\n                    let relatedEntitySubject = this.findByDatabaseEntityLike(valueMetadata.target, databaseEntity);\n                    if (!relatedEntitySubject) return; // should not be possible, anyway add it for type-safety\n\n                    // if object is already marked as removed then no need to proceed because it already was proceed\n                    // if we remove this check it will cause a recursion\n                    if (relatedEntitySubject.mustBeRemoved) return;  // todo: add another check for entity in unsetRelations?\n\n                    // check if in persisted value there is a database value to understand if it was removed or not\n                    let relatedValue = ((persistValue || []) as ObjectLiteral[]).find(persistValueItem => {\n                        return valueMetadata.compareEntities(relatedEntitySubject!.databaseEntity, persistValueItem);\n                    });\n\n                    // if relation value is set to undefined then we don't do anything - simply skip any check and remove\n                    // but if relation value is set to null then it means user wants to remove each entity in this relation\n                    // OR\n                    // value was removed from persisted value - means we need to mark it as removed\n                    // and check if mark as removed all underlying entities that has cascade remove\n                    if (persistValue === null || !relatedValue) {\n\n                        // if cascade remove option is set then need to remove related entity\n                        if (relation.isCascadeRemove) {\n                            relatedEntitySubject.mustBeRemoved = true;\n\n                            // mark as removed all underlying entities that has cascade remove\n                            await this.buildCascadeRemovedAndRelationUpdateOperateSubjects(relatedEntitySubject);\n\n                        // if cascade remove option is not set then it means we simply need to remove\n                        // reference to this entity from inverse side (from loaded database entity)\n                        // this applies only on one-to-many relationship\n                        } else if (relation.isOneToMany && relation.inverseRelation) {\n                            relatedEntitySubject.relationUpdates.push({\n                                relation: relation.inverseRelation,\n                                value: null\n                            }); // todo: implement same for one-to-one\n                        }\n\n                    }\n\n                });\n\n                await Promise.all(promises);\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Builds all junction insert and remove operations used to insert new bind data into junction tables,\n     * or remove old junction records.\n     * Options specifies which junction operations should be built - insert, remove or both.\n     */\n    private async buildJunctionOperations(options: { insert: boolean, remove: boolean }): Promise<void> {\n\n        const promises = this.operateSubjects.filter(subject => subject.hasEntity).map(subject => {\n            const promises = subject.metadata.manyToManyRelations.map(async relation => {\n\n                // if subject marked to be removed then all its junctions must be removed\n                if (subject.mustBeRemoved && options.remove) {\n\n                    // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\n                    // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n                    const specificRepository = new SpecificRepository(this.connection, subject.metadata, this.queryRunnerProvider);\n                    const existInverseEntityRelationIds = await specificRepository\n                        .findRelationIds(relation, subject.databaseEntity);\n\n                    // finally create a new junction remove operation and push it to the array of such operations\n                    if (existInverseEntityRelationIds.length > 0) {\n                        subject.junctionRemoves.push({\n                            relation: relation,\n                            junctionRelationIds: existInverseEntityRelationIds\n                        });\n                    }\n\n                    return;\n                }\n\n                // if entity don't have entity then no need to find something that should be inserted or removed\n                if (!subject.hasEntity)\n                    return;\n\n                // else check changed junctions in the persisted entity\n                // extract entity value - we only need to proceed if value is defined and its an array\n                const relatedValue = relation.getEntityValue(subject.entity);\n                if (!(relatedValue instanceof Array))\n                    return;\n\n                // load from db all relation ids of inverse entities that are \"bind\" to the currently persisted entity\n                // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n                // we could load this relation ids with entity using however this way it may be more efficient, because\n                // this way we load only relations that come, e.g. we don't load data for empty relations set with object.\n                // this is also useful when object is being saved partial.\n                let existInverseEntityRelationIds: any[] = [];\n\n                // if subject don't have database entity it means its new and we don't need to remove something that is not exist\n                if (subject.hasDatabaseEntity) {\n                    const specificRepository = new SpecificRepository(this.connection, subject.metadata, this.queryRunnerProvider);\n                    existInverseEntityRelationIds = await specificRepository\n                        .findRelationIds(relation, subject.databaseEntity);\n                }\n\n                // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n                const changedInverseEntityRelationIds = relatedValue\n                    .map(subRelationValue => {\n                        return relation.isManyToManyOwner\n                            ? subRelationValue[relation.joinTable.inverseReferencedColumn.propertyName]\n                            : subRelationValue[relation.inverseRelation.joinTable.referencedColumn.propertyName];\n                    })\n                    .filter(subRelationValue => subRelationValue !== undefined && subRelationValue !== null);\n\n                // now from all entities in the persisted entity find only those which aren't found in the db\n                const removedJunctionEntityIds = existInverseEntityRelationIds.filter(existRelationId => {\n                    return !changedInverseEntityRelationIds.find(changedRelationId => {\n                        return changedRelationId === existRelationId;\n                    });\n                });\n\n                // now from all entities in the persisted entity find only those which aren't found in the db\n                const newJunctionEntities = relatedValue.filter(subRelatedValue => {\n                    const relationValue = relation.isManyToManyOwner\n                        ? subRelatedValue[relation.joinTable.inverseReferencedColumn.propertyName]\n                        : subRelatedValue[relation.inverseRelation.joinTable.referencedColumn.propertyName];\n                    return !existInverseEntityRelationIds.find(relationId => relationValue === relationId);\n                });\n\n                // finally create a new junction insert operation and push it to the array of such operations\n                if (newJunctionEntities.length > 0 && options.insert) {\n                    subject.junctionInserts.push({\n                        relation: relation,\n                        junctionEntities: newJunctionEntities\n                    });\n                }\n\n                // finally create a new junction remove operation and push it to the array of such operations\n                if (removedJunctionEntityIds.length > 0 && options.remove) {\n                    subject.junctionRemoves.push({\n                        relation: relation,\n                        junctionRelationIds: removedJunctionEntityIds\n                    });\n                }\n            });\n\n            return Promise.all(promises);\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    protected findByEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\n        return this.operateSubjects.find(subject => {\n            if (!subject.hasEntity)\n                return false;\n\n            if (subject.entity === entity)\n                return true;\n\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.entity, entity);\n        });\n    }\n\n    /**\n     * Finds subject where entity like given subject's database entity.\n     * Comparision made by entity id.\n     */\n    protected findByDatabaseEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\n        return this.operateSubjects.find(subject => {\n            if (!subject.hasDatabaseEntity)\n                return false;\n\n            return subject.entityTarget === entityTarget && subject.metadata.compareEntities(subject.databaseEntity, entity);\n        });\n    }\n\n    /**\n     * Groups given Subject objects into groups separated by entity targets.\n     */\n    protected groupByEntityTargets(): { target: Function|string, subjects: Subject[] }[] {\n        return this.operateSubjects.reduce((groups, operatedEntity) => {\n            let group = groups.find(group => group.target === operatedEntity.entityTarget);\n            if (!group) {\n                group = { target: operatedEntity.entityTarget, subjects: [] };\n                groups.push(group);\n            }\n            group.subjects.push(operatedEntity);\n            return groups;\n        }, [] as { target: Function|string, subjects: Subject[] }[]);\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport {FindOptions} from \"../find-options/FindOptions\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this repository.\n     */\n    protected connection: Connection;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    protected metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    protected queryRunnerProvider?: QueryRunnerProvider;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity contains compose ids, then it checks them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.metadata.hasId(entity);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\n        return new QueryBuilder(this.connection, queryRunnerProvider || this.queryRunnerProvider)\n            .select(alias)\n            .from(this.metadata.target, alias);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(plainObjects: Object[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(plainObject: Object): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainObjectOrObjects?: Object|Object[]): Entity|Entity[] {\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(object => this.create(object as Object));\n\n        const newEntity: Entity = this.metadata.create();\n        if (plainObjectOrObjects) {\n            const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n            plainObjectToEntityTransformer.transform(newEntity, plainObjectOrObjects, this.metadata);\n        }\n\n        return newEntity;\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    preload(object: Object): Promise<Entity> {\n        const queryBuilder = this.createQueryBuilder(this.metadata.table.name);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer();\n        return plainObjectToDatabaseEntityTransformer.transform(object, this.metadata, queryBuilder);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a one new entity.\n     */\n    merge(...objects: ObjectLiteral[]): Entity {\n        const newEntity: Entity = this.metadata.create();\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n        objects.forEach(object => plainObjectToEntityTransformer.transform(newEntity, object, this.metadata));\n        return newEntity;\n    }\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    async persist(entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    async persist(entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists one or many given entities.\n     */\n    async persist(entityOrEntities: Entity|Entity[]): Promise<Entity|Entity[]> {\n\n        // if multiple entities given then go throw all of them and save them\n        if (entityOrEntities instanceof Array)\n            return Promise.all(entityOrEntities.map(entity => this.persist(entity)));\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        try {\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\n            await databaseEntityLoader.persist(entityOrEntities, this.metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n            return entityOrEntities;\n\n        } finally {\n            if (!this.queryRunnerProvider) // release it only if its created by this method\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    async remove(entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    async remove(entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    async remove(entityOrEntities: Entity|Entity[]): Promise<Entity|Entity[]> {\n\n        // if multiple entities given then go throw all of them and save them\n        if (entityOrEntities instanceof Array)\n            return Promise.all(entityOrEntities.map(entity => this.remove(entity)));\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        try {\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\n            await databaseEntityLoader.remove(entityOrEntities, this.metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n            return entityOrEntities;\n\n        } finally {\n            if (!this.queryRunnerProvider) // release it only if its created by this method\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Counts all entities.\n     */\n    async count(): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    async count(conditions: ObjectLiteral): Promise<number>;\n\n    /**\n     * Counts entities with given find options.\n     */\n    async count(options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions and find options.\n     */\n    async count(conditions: ObjectLiteral, options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions and/or find options.\n     */\n    async count(conditionsOrFindOptions?: ObjectLiteral | FindOptions, options?: FindOptions): Promise<number> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n                   .getCount();\n    }\n\n    /**\n     * Finds all entities.\n     */\n    async find(): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    async find(conditions: ObjectLiteral): Promise<Entity[]>;\n\n    /**\n     * Finds entities with given find options.\n     */\n    async find(options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions and find options.\n     */\n    async find(conditions: ObjectLiteral, options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions and/or find options.\n     */\n    async find(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity[]> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n            .getMany();\n    }\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(conditions: ObjectLiteral): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(conditions: ObjectLiteral, options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<[ Entity[], number ]> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n            .getManyAndCount();\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    async findOne(): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    async findOne(conditions: ObjectLiteral): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne(options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions and find options.\n     */\n    async findOne(conditions: ObjectLiteral, options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity|undefined> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n            .getOne();\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    async findByIds(ids: any[], options?: FindOptions): Promise<Entity[]> {\n        const qb = this.createFindQueryBuilder(undefined, options);\n        return qb.andWhereInIds(ids).getMany();\n    }\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options can be applied.\n     */\n    async findOneById(id: any, options?: FindOptions): Promise<Entity|undefined> {\n        const qb = this.createFindQueryBuilder(undefined, options);\n        return qb.andWhereInIds([id]).getOne();\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        try {\n            return await queryRunner.query(query, parameters); // await is needed here because we are using finally\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n        }\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided repository.\n     */\n    async transaction(runInTransaction: (repository: Repository<Entity>) => Promise<any>|any): Promise<any> {\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        const queryRunner = await queryRunnerProvider.provide();\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        const transactionRepository = new Repository<any>();\n        (transactionRepository as any)[\"connection\"] = this.connection;\n        (transactionRepository as any)[\"metadata\"] = this.metadata;\n        (transactionRepository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\n        // todo: same code in the repository factory. probably better to use repository factory here too\n\n        try {\n            await queryRunner.beginTransaction();\n            const result = await runInTransaction(transactionRepository);\n            await queryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw err;\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     */\n    async clear(): Promise<void> {\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        try {\n            return await queryRunner.truncate(this.metadata.table.name); // await is needed here because we are using finally\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a query builder from the given conditions or find options.\n     * Used to create a query builder for find* methods.\n     */\n    protected createFindQueryBuilder(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): QueryBuilder<Entity> {\n        const findOptions = FindOptionsUtils.isFindOptions(conditionsOrFindOptions) ? conditionsOrFindOptions : options as FindOptions;\n        const conditions = FindOptionsUtils.isFindOptions(conditionsOrFindOptions) ? undefined : conditionsOrFindOptions;\n\n        const alias = findOptions ? findOptions.alias : this.metadata.table.name;\n        const qb = this.createQueryBuilder(alias);\n\n        // if find options are given then apply them to query builder\n        if (findOptions)\n            FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\n\n        // if conditions are given then apply them to query builder\n        if (conditions) {\n            Object.keys(conditions).forEach(key => {\n                const name = key.indexOf(\".\") === -1 ? alias + \".\" + key : key;\n                if (conditions![key] === null) {\n                    qb.andWhere(name + \" IS NULL\");\n\n                } else {\n                    qb.andWhere(name + \"=:\" + key);\n                }\n            });\n            qb.setParameters(conditions);\n        }\n\n        return qb;\n    }\n\n}","import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\n\n/**\n * UpdateEvent is an object that broadcaster sends to the entity subscriber when entity is being updated in the database.\n */\nexport interface UpdateEvent<Entity> {\n\n    /**\n     * Entity managed with connection used for original event.\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\n     */\n    entityManager: EntityManager;\n\n    /**\n     * Updating entity.\n     */\n    entity: Entity;\n\n    /**\n     * Updating entity in the database.\n     */\n    databaseEntity: Entity;\n\n    /**\n     * List of updated columns.\n     */\n    updatedColumns: ColumnMetadata[];\n\n    /**\n     * List of updated relations.\n     */\n    updatedRelations: RelationMetadata[];\n\n    // todo: send old and new update values\n    // todo: send updated relations?\n\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\n\n/**\n * RemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being removed to the database.\n */\nexport interface RemoveEvent<Entity> {\n\n    /**\n     * Entity managed with connection used for original event.\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\n     */\n    entityManager: EntityManager;\n\n    /**\n     * Entity that is being removed.\n     * This may absent if entity is removed without being loaded (for examples by cascades).\n     */\n    entity?: Entity;\n\n    /**\n     * Database representation of entity that is being removed.\n     */\n    databaseEntity: Entity;\n\n    /**\n     * Id or ids of the entity that is being removed.\n     */\n    entityId?: any;\n\n}","import {EntityManager} from \"../../entity-manager/EntityManager\";\n\n/**\n * InsertEvent is an object that broadcaster sends to the entity subscriber when entity is inserted to the database.\n */\nexport interface InsertEvent<Entity> {\n\n    /**\n     * Entity managed with connection used for original event.\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\n     */\n    entityManager: EntityManager;\n\n    /**\n     * Inserting event.\n     */\n    entity: Entity;\n\n}","import {UpdateEvent} from \"./event/UpdateEvent\";\nimport {RemoveEvent} from \"./event/RemoveEvent\";\nimport {InsertEvent} from \"./event/InsertEvent\";\n\n/**\n * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.\n */\nexport interface EntitySubscriberInterface<Entity> {\n\n    /**\n     * Returns the class of the entity to which events will listen.\n     * If this method is omitted, then subscriber will listen to events of all entities.\n     */\n    listenTo?(): Function;\n\n    /**\n     * Called after entity is loaded from the database.\n     */\n    afterLoad?(entity: Entity): Promise<any>|void;\n\n    /**\n     * Called before entity is inserted to the database.\n     */\n    beforeInsert?(event: InsertEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called after entity is inserted to the database.\n     */\n    afterInsert?(event: InsertEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called before entity is updated in the database.\n     */\n    beforeUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called after entity is updated in the database.\n     */\n    afterUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called before entity is removed from the database.\n     */\n    beforeRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\n\n    /**\n     * Called after entity is removed from the database.\n     */\n    afterRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\n\n}","/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotFoundError extends Error {\n    name = \"RepositoryNotFoundError\";\n\n    constructor(connectionName: string, entityClass: Function|string) {\n        super();\n        const targetName = typeof entityClass === \"function\" && (<any> entityClass).name ? (<any> entityClass).name : entityClass;\n        this.message = `No repository for \"${targetName}\" was found. Looks like this entity is not registered in ` +\n            `current \"${connectionName}\" connection?`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * All types that entity listener can be.\n */\nexport type EventListenerType = \"after-load\"|\"before-insert\"|\"after-insert\"|\"before-update\"|\"after-update\"|\"before-remove\"|\"after-remove\";\n\n/**\n * Provides a constants for each entity listener type.\n */\nexport class EventListenerTypes {\n    static AFTER_LOAD: EventListenerType = \"after-load\";\n    static BEFORE_INSERT: EventListenerType = \"before-insert\";\n    static AFTER_INSERT: EventListenerType = \"after-insert\";\n    static BEFORE_UPDATE: EventListenerType = \"before-update\";\n    static AFTER_UPDATE: EventListenerType = \"after-update\";\n    static BEFORE_REMOVE: EventListenerType = \"before-remove\";\n    static AFTER_REMOVE: EventListenerType = \"after-remove\";\n}","import {EventListenerType} from \"../metadata/types/EventListenerTypes\";\n\n/**\n * Arguments for EntityListenerMetadata class.\n */\nexport interface EntityListenerMetadataArgs {\n\n    /**\n     * Class to which listener is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Class's property name to which listener is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * The type of the listener.\n     */\n    readonly type: EventListenerType;\n\n}\n","import {EventListenerType} from \"./types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * The type of the listener.\n     */\n    readonly type: EventListenerType;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: EntityListenerMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.type = args.type;\n    }\n\n\n}","import {PlatformTools} from \"../platform/PlatformTools\";\n\n/**\n * Loads all exported classes from the given directory.\n */\nexport function importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Function[] {\n\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\n        if (exported instanceof Function) {\n            allLoaded.push(exported);\n\n        } else if (exported instanceof Object) {\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\n\n        } else if (exported instanceof Array) {\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\n        }\n\n        return allLoaded;\n    }\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\n    }, [] as string[]);\n\n    const dirs = allFiles\n        .filter(file => {\n            const dtsExtension = file.substring(file.length - 5, file.length);\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\n        })\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\n\n    return loadFileClasses(dirs, []);\n}\n\n/**\n * Loads all json files from the given directory.\n */\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormilize(dir)));\n    }, [] as string[]);\n\n    return allFiles\n        .filter(file => PlatformTools.pathExtname(file) === format)\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinTableIsNotAllowedError extends Error {\n    name = \"UsingJoinTableIsNotAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinTable on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n            `${entityMetadata.name}#${relation.propertyName} has ${relation.relationType} relation, ` +\n            `however you can use JoinTable only on many-to-many relations.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinTableOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinTableOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnIsNotAllowedError extends Error {\n    name = \"UsingJoinColumnIsNotAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n            `You can use JoinColumn only on one-to-one and many-to-one relations.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinColumnOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`;\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class MissingJoinColumnError extends Error {\n    name = \"MissingJoinColumnError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        if (relation.hasInverseSide) {\n            this.message = `JoinColumn is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} one-to-one relationship. ` +\n                `You need to put JoinColumn decorator on one of the sides.`;\n        } else {\n            this.message = `JoinColumn is missing on ${entityMetadata.name}#${relation.propertyName} one-to-one relationship. ` +\n                `You need to put JoinColumn decorator on it.`;\n        }\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class MissingJoinTableError extends Error {\n    name = \"MissingJoinTableError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n\n        if (relation.hasInverseSide) {\n            this.message = `JoinTable is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} many-to-many relationship. ` +\n                `You need to put decorator decorator on one of the sides.`;\n        } else {\n            this.message = `JoinTable is missing on ${entityMetadata.name}#${relation.propertyName} many-to-many relationship. ` +\n                `You need to put JoinTable decorator on it.`;\n        }\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\n\n/**\n */\nexport class MissingPrimaryColumnError extends Error {\n    name = \"MissingPrimaryColumnError\";\n\n    constructor(entityMetadata: EntityMetadata) {\n        super();\n        this.message = `Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\n            `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`;\n    }\n\n}","/**\n * Thrown when circular relations detected with nullable set to false.\n */\nexport class CircularRelationsError extends Error {\n    name = \"CircularRelationsError\";\n\n    constructor(path: string) {\n        super(`Circular relations detected: ${path}. To resolve this issue you need to set nullable: false somewhere in this dependency structure.`);\n    }\n\n}","/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\n\n/**\n * A simple dependency graph\n */\n\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\n    let currentPath: any[] = [];\n    let visited: any = {};\n    return function DFS(currentNode: any) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node: any) {\n            if (!visited[node]) {\n                DFS(node);\n            } else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new Error(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\n\n\nexport class DepGraph {\n    nodes: any = {};\n    outgoingEdges: any = {}; // Node -> [Dependency Node]\n    incomingEdges: any = {}; // Node -> [Dependant Node]\n\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    addNode(node: any, data?: any) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            } else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    }\n\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    removeNode(node: any) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key: any) {\n                    let idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                }, this);\n            });\n        }\n    }\n\n    /**\n     * Check if a node exists in the graph\n     */\n    hasNode(node: any) {\n        return this.nodes.hasOwnProperty(node);\n    }\n\n    /**\n     * Get the data associated with a node name\n     */\n    getNodeData(node: any) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    setNodeData(node: any, data: any) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    addDependency(from: any, to: any) {\n        if (!this.hasNode(from)) {\n            throw new Error(`Node does not exist: ${from}`);\n        }\n        if (!this.hasNode(to)) {\n            throw new Error(`Node does not exist: ${to}`);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    }\n\n    /**\n     * Remove a dependency between two nodes.\n     */\n    removeDependency(from: any, to: any) {\n        let idx: any;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    }\n\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    dependenciesOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    dependantsOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            let result: any[] = [];\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            let idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        } else {\n            throw new Error(`Node does not exist: ${node}`);\n        }\n    }\n\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    overallOrder(leavesOnly?: any) {\n        let self = this;\n        let result: any[] = [];\n        let keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        } else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n: any) {\n                CycleDFS(n);\n            });\n\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS(n);\n            });\n\n            return result;\n        }\n    }\n\n}","import {UsingJoinTableIsNotAllowedError} from \"./error/UsingJoinTableIsNotAllowedError\";\nimport {UsingJoinTableOnlyOnOneSideAllowedError} from \"./error/UsingJoinTableOnlyOnOneSideAllowedError\";\nimport {UsingJoinColumnIsNotAllowedError} from \"./error/UsingJoinColumnIsNotAllowedError\";\nimport {UsingJoinColumnOnlyOnOneSideAllowedError} from \"./error/UsingJoinColumnOnlyOnOneSideAllowedError\";\nimport {MissingJoinColumnError} from \"./error/MissingJoinColumnError\";\nimport {MissingJoinTableError} from \"./error/MissingJoinTableError\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {MissingPrimaryColumnError} from \"./error/MissingPrimaryColumnError\";\nimport {CircularRelationsError} from \"./error/CircularRelationsError\";\nimport {DepGraph} from \"../util/DepGraph\";\n\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas: EntityMetadata[]) {\n        entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas));\n        this.validateDependencies(entityMetadatas);\n    }\n\n    /**\n     * Validates given entity metadata.\n     */\n    validate(entityMetadata: EntityMetadata, allEntityMetadatas: EntityMetadata[]) {\n\n        // check if table metadata has an id\n        if (!entityMetadata.table.isClassTableChild && !entityMetadata.primaryColumns.length && !entityMetadata.junction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritanceType === \"single-table\") {\n            if (!entityMetadata.hasDiscriminatorColumn)\n                throw new Error(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put @DiscriminatorColumn decorator?`);\n\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\n                throw new Error(`Entity ${entityMetadata.name} has empty discriminator value. Discriminator value should not be empty.`);\n\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.`);\n        }\n\n        // validate relations\n        entityMetadata.relations.forEach(relation => {\n\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            if (relation.joinTable) {\n                if (!relation.isManyToMany)\n                    throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n                    throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            }\n\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);\n\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n                throw new MissingJoinTableError(entityMetadata, relation);\n\n\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n\n        });\n\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(relation => {\n            const isCircularCascadeRemove = relation.isCascadeRemove && relation.hasInverseSide && relation.inverseRelation.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` +\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n    }\n\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\n\n        const graph = new DepGraph();\n        entityMetadatas.forEach(entityMetadata => {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.relationsWithJoinColumns\n                .filter(relation => !relation.isNullable)\n                .forEach(relation => {\n                    graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n                });\n        });\n        try {\n            graph.overallOrder();\n\n        } catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    }\n\n}","import {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {TableMetadata} from \"../metadata/TableMetadata\";\nimport {JoinTableMetadata} from \"../metadata/JoinTableMetadata\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Driver} from \"../driver/Driver\";\n\n/**\n * Helps to create EntityMetadatas for junction tables.\n */\nexport interface JunctionEntityMetadataBuilderArgs {\n    namingStrategy: NamingStrategyInterface;\n    firstTable: TableMetadata;\n    secondTable: TableMetadata;\n    joinTable: JoinTableMetadata;\n}\n\n/**\n * Helps to create EntityMetadatas for junction tables.\n */\nexport class JunctionEntityMetadataBuilder {\n\n    build(driver: Driver, lazyRelationsWrapper: LazyRelationsWrapper, args: JunctionEntityMetadataBuilderArgs) {\n\n        const column1 = args.joinTable.referencedColumn;\n        const column2 = args.joinTable.inverseReferencedColumn;\n\n        const tableMetadata = new TableMetadata({\n            target: \"\",\n            name: args.joinTable.name,\n            type: \"junction\"\n        });\n\n        const junctionColumn1 = new ColumnMetadata({\n            target: \"__virtual__\",\n            // propertyType: column1.type,\n            propertyName: args.joinTable.joinColumnName,\n            mode: \"virtual\",\n            options: <ColumnOptions> {\n                length: column1.length,\n                type: column1.type,\n                name: args.joinTable.joinColumnName,\n                nullable: false,\n                primary: true\n            }\n        });\n        const junctionColumn2 = new ColumnMetadata({\n            target: \"__virtual__\",\n            // propertyType: column2.type,\n            propertyName: args.joinTable.inverseJoinColumnName,\n            mode: \"virtual\",\n            options: <ColumnOptions> {\n                length: column2.length,\n                type: column2.type,\n                name: args.joinTable.inverseJoinColumnName,\n                nullable: false,\n                primary: true\n            }\n        });\n\n        const entityMetadata = new EntityMetadata({\n            junction: true,\n            target: \"__virtual__\",\n            tablesPrefix: driver.options.tablesPrefix,\n            namingStrategy: args.namingStrategy,\n            tableMetadata: tableMetadata,\n            columnMetadatas: [\n                junctionColumn1,\n                junctionColumn2\n            ],\n            foreignKeyMetadatas: [\n                new ForeignKeyMetadata([junctionColumn1], args.firstTable, [column1]),\n                new ForeignKeyMetadata([junctionColumn2], args.secondTable, [column2])\n            ],\n            indexMetadatas: [\n                new IndexMetadata({ columns: [args.joinTable.joinColumnName], unique: false }),\n                new IndexMetadata({ columns: [args.joinTable.inverseJoinColumnName], unique: false })\n            ]\n        }, lazyRelationsWrapper);\n\n        entityMetadata.columns[0].entityMetadata = entityMetadata;\n        entityMetadata.columns[1].entityMetadata = entityMetadata;\n\n        return entityMetadata;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {TableMetadata} from \"../metadata/TableMetadata\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\nimport {Driver} from \"../driver/Driver\";\n\n/**\n * Helps to create EntityMetadatas for junction tables.\n */\nexport interface ClosureJunctionEntityMetadataBuilderArgs {\n    namingStrategy: NamingStrategyInterface;\n    table: TableMetadata;\n    primaryColumn: ColumnMetadata;\n    hasTreeLevelColumn: boolean;\n}\n\n/**\n * Helps to create EntityMetadatas for junction tables for closure tables.\n */\nexport class ClosureJunctionEntityMetadataBuilder {\n\n    build(driver: Driver, lazyRelationsWrapper: LazyRelationsWrapper, args: ClosureJunctionEntityMetadataBuilderArgs) {\n\n        const columns = [\n            new ColumnMetadata(<ColumnMetadataArgs> {\n                target: \"__virtual__\",\n                propertyName: \"__virtual__\",\n                propertyType: args.primaryColumn.type,\n                mode: \"virtual\",\n                options: <ColumnOptions> {\n                    length: args.primaryColumn.length,\n                    type: args.primaryColumn.type,\n                    name: \"ancestor\"\n                }\n            }),\n            new ColumnMetadata(<ColumnMetadataArgs> {\n                target: \"__virtual__\",\n                propertyName: \"__virtual__\",\n                propertyType: args.primaryColumn.type,\n                mode: \"virtual\",\n                options: <ColumnOptions> {\n                    length: args.primaryColumn.length,\n                    type: args.primaryColumn.type,\n                    name: \"descendant\"\n                }\n            })\n        ];\n\n        if (args.hasTreeLevelColumn) {\n            columns.push(new ColumnMetadata(<ColumnMetadataArgs> {\n                target: \"__virtual__\",\n                propertyName: \"__virtual__\",\n                propertyType: ColumnTypes.INTEGER,\n                mode: \"virtual\",\n                options: {\n                    type: ColumnTypes.INTEGER,\n                    name: \"level\"\n                }\n            }));\n        }\n\n        const closureJunctionTableMetadata = new TableMetadata({\n            target: \"__virtual__\",\n            name: args.table.name,\n            type: \"closure-junction\"\n        });\n\n        return new EntityMetadata({\n            junction: true,\n            target: \"__virtual__\",\n            tablesPrefix: driver.options.tablesPrefix,\n            namingStrategy: args.namingStrategy,\n            tableMetadata: closureJunctionTableMetadata,\n            columnMetadatas: columns,\n            foreignKeyMetadatas: [\n                new ForeignKeyMetadata([columns[0]], args.table, [args.primaryColumn]),\n                new ForeignKeyMetadata([columns[1]], args.table, [args.primaryColumn])\n            ]\n        }, lazyRelationsWrapper);\n    }\n\n}","import {TableType} from \"../metadata/types/TableTypes\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {OnDeleteType} from \"../metadata/ForeignKeyMetadata\";\nimport {JoinColumnOptions} from \"../decorator/options/JoinColumnOptions\";\nimport {ColumnType} from \"../metadata/types/ColumnTypes\";\nimport {RelationType} from \"../metadata/types/RelationTypes\";\n\nexport interface EntitySchema {\n\n    /**\n     * Name of the schema it extends.\n     */\n    extends?: string;\n\n    /**\n     * Target bind to this entity schema. Optional.\n     */\n    target?: Function;\n\n    /**\n     * Entity name.\n     */\n    name: string;\n\n    /**\n     * Entity table's options.\n     */\n    table?: {\n\n        /**\n         * Table name.\n         */\n        name?: string;\n\n        /**\n         * Table type.\n         */\n        type?: TableType;\n\n        /**\n         * Specifies a property name by which queries will perform ordering by default when fetching rows.\n         */\n        orderBy?: OrderByCondition;\n\n    };\n\n    /**\n     * Entity column's options.\n     */\n    columns: {\n        [columnName: string]: {\n\n            /**\n             * Indicates if this column is a primary column.\n             */\n            primary: boolean;\n\n            /**\n             * Indicates if this column is a created date column.\n             */\n            createDate: boolean;\n\n            /**\n             * Indicates if this column is an update date column.\n             */\n            updateDate: boolean;\n\n            /**\n             * Indicates if this column is a version column.\n             */\n            version: boolean;\n\n            /**\n             * Indicates if this column is a treeChildrenCount column.\n             */\n            treeChildrenCount: boolean;\n\n            /**\n             * Indicates if this column is a treeLevel column.\n             */\n            treeLevel: boolean;\n\n            /**\n             * Column type. Must be one of the value from the ColumnTypes class.\n             */\n            type: ColumnType;\n\n            /**\n             * Column name in the database.\n             */\n            name?: string;\n\n            /**\n             * Column type's length. For example type = \"string\" and length = 100 means that ORM will create a column with\n             * type varchar(100).\n             */\n            length?: string;\n\n            /**\n             * Specifies if this column will use AUTO_INCREMENT or not (e.g. generated number).\n             */\n            generated?: boolean;\n\n            /**\n             * Specifies if column's value must be unique or not.\n             */\n            unique?: boolean;\n\n            /**\n             * Indicates if column's value can be set to NULL.\n             */\n            nullable?: boolean;\n\n            /**\n             * Extra column definition. Should be used only in emergency situations. Note that if you'll use this property\n             * auto schema generation will not work properly anymore. Avoid using it.\n             */\n            columnDefinition?: string;\n\n            /**\n             * Column comment.\n             */\n            comment?: string;\n\n            /**\n             * Default database value.\n             */\n            default?: string;\n\n            /**\n             * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n             * number of digits that are stored for the values.\n             */\n            precision?: number;\n\n            /**\n             * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n             * of digits to the right of the decimal point and must not be greater than precision.\n             */\n            scale?: number;\n\n            /**\n             * Column collation. Note that not all databases support it.\n             */\n            collation?: string; // todo: looks like this is not used\n\n        };\n    };\n\n    /**\n     * Entity relation's options.\n     */\n    relations: {\n        [relationName: string]: {\n\n            /**\n             * Indicates with which entity this relation is made.\n             */\n            target: Function|string;\n\n            /**\n             * Type of relation. Can be one of the value of the RelationTypes class.\n             */\n            type: RelationType;\n\n            /**\n             * Inverse side of the relation.\n             */\n            inverseSide?: string;\n\n            /**\n             * Indicates if this relation will be lazily loaded.\n             */\n            isLazy?: boolean;\n\n            /**\n             * Join table options of this column. If set to true then it simply means that it has a join table.\n             */\n            joinTable?: boolean|{\n\n                /**\n                 * Name of the table that will be created to store values of the both tables (join table).\n                 * By default is auto generated.\n                 */\n                name?: string;\n\n                /**\n                 * First column of the join table.\n                 */\n                joinColumn?: JoinColumnOptions;\n\n                /**\n                 * Second (inverse) column of the join table.\n                 */\n                inverseJoinColumn?: JoinColumnOptions;\n\n            };\n\n            /**\n             * Join column options of this column. If set to true then it simply means that it has a join column.\n             */\n            joinColumn?: boolean|{\n\n                /**\n                 * Name of the column.\n                 */\n                name?: string;\n\n                /**\n                 * Name of the column in the entity to which this column is referenced.\n                 */\n                referencedColumnName?: string;\n            };\n\n            /**\n             * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n             */\n            isTreeParent?: boolean;\n\n            /**\n             * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n             */\n            isTreeChildren?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\n             * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\n             */\n            cascadeAll?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be inserted to the db.\n             */\n            cascadeInsert?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be updated in the db.\n             */\n            cascadeUpdate?: boolean;\n\n            /**\n             * If set to true then it means that related object can be allowed to be remove from the db.\n             */\n            cascadeRemove?: boolean;\n\n            /**\n             * Default database value.\n             */\n            default?: any;\n\n            /**\n             * Indicates if relation column value can be nullable or not.\n             */\n            nullable?: boolean;\n\n            /**\n             * Database cascade action on delete.\n             */\n            onDelete?: OnDeleteType;\n\n        };\n    };\n\n}","/**\n */\nexport class MetadataAlreadyExistsError extends Error {\n    name = \"MetadataAlreadyExistsError\";\n\n    constructor(metadataType: string, constructor: Function, propertyName?: string) {\n        super();\n        this.message = metadataType + \" metadata already exists for the class constructor \" + JSON.stringify(constructor) +\n            (propertyName ? \" on property \" + propertyName : \". If you previously renamed or moved entity class, make sure\" +\n            \" that compiled version of old entity class source wasn't left in the compiler output directory.\");\n    }\n\n}","import {MetadataAlreadyExistsError} from \"../../metadata-builder/error/MetadataAlreadyExistsError\";\n\nexport class TargetMetadataArgsCollection<T extends { target?: Function|string }> {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    protected items: T[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    get length() {\n        return this.items.length;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): this {\n        const collection = new (<any> this.constructor)();\n        this.items.filter(callbackfn).forEach(metadata => collection.add(metadata));\n        return collection;\n    }\n\n    filterByTarget(cls?: Function|string): this {\n\n        // if no class specified then simply return empty collection\n        if (!cls)\n            return new (<any> this.constructor)();\n\n        return this.filterByTargets([cls]);\n    }\n\n    filterByTargets(classes: Array<Function|string>): this { // Function[]|string[] ?\n        return this.filter(metadata => {\n            if (!metadata.target) return false;\n            return classes.indexOf(metadata.target) !== -1;\n        });\n    }\n\n    add(metadata: T, checkForDuplicateTargets = false) {\n        if (checkForDuplicateTargets) {\n            if (!metadata.target || !(metadata.target instanceof Function))\n                throw new Error(`Target is not set in the given metadata.`);\n\n            if (this.hasWithTarget(metadata.target))\n                throw new MetadataAlreadyExistsError((<any> metadata.constructor).name, metadata.target);\n        }\n\n        this.items.push(metadata);\n    }\n\n    toArray() {\n        return this.items.map(item => item);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private hasWithTarget(constructor: Function): boolean {\n        return !!this.items.find(metadata => metadata.target === constructor);\n    }\n\n}","import {TargetMetadataArgsCollection} from \"./TargetMetadataArgsCollection\";\n\nexport class PropertyMetadataArgsCollection<T extends { target?: Function|string, propertyName?: string }> extends TargetMetadataArgsCollection<T> {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filterRepeatedMetadatas(existsMetadatas: T[]): this {\n        return this.filter(metadata => {\n            return !existsMetadatas.find(fieldFromDocument => fieldFromDocument.propertyName === metadata.propertyName);\n        });\n    }\n\n    findByProperty(propertyName: string) {\n        return this.items.find(item => item.propertyName === propertyName);\n    }\n\n    hasWithProperty(propertyName: string) {\n        return !!this.findByProperty(propertyName);\n    }\n\n}","/**\n * Arguments for RelationCountMetadata class.\n */\nexport interface RelationCountMetadataArgs {\n\n    /**\n     * Class to which this decorator is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Class's property name to which this decorator is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Target's relation which it should count.\n     */\n    readonly relation: string|((object: any) => any);\n\n}\n","/**\n * Arguments for NamingStrategyMetadata class.\n */\nexport interface NamingStrategyMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Strategy name.\n     */\n    readonly name: string;\n\n}\n","/**\n * Arguments for EmbeddedMetadata class.\n */\nexport interface EmbeddedMetadataArgs {\n\n    /**\n     * Class to which this column is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Class's property name to which this column is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Type of the class to be embedded.\n     */\n    readonly type: ((type?: any) => Function);\n\n}\n","/**\n * Arguments for EntitySubscriberMetadata class.\n */\nexport interface EntitySubscriberMetadataArgs {\n\n    /**\n     * Class to which subscriber is applied.\n     */\n    readonly target: Function;\n\n}\n","/**\n * Arguments for RelationIdMetadataArgs class.\n */\nexport interface RelationIdMetadataArgs {\n\n    /**\n     * Class to which this decorator is applied.\n     */\n    readonly target: Function;\n\n    /**\n     * Class's property name to which this decorator is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Target's relation which it should count.\n     */\n    readonly relation: string|((object: any) => any);\n\n}\n","/**\n * Arguments for InheritanceMetadata class.\n */\nexport interface InheritanceMetadataArgs {\n\n    /**\n     * Class to which inheritance is applied.\n     */\n    readonly target?: Function|string;\n\n    /**\n     * Inheritance type.\n     */\n    readonly type: \"single-table\"|\"class-table\";\n\n}\n","/**\n * DiscriminatorValue properties.\n */\nexport interface DiscriminatorValueMetadataArgs {\n\n    /**\n     * Class to which discriminator name is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Discriminator value.\n     */\n    readonly value: any;\n\n}\n","/**\n * Arguments for EntityRepositoryMetadata class, helps to construct an EntityRepositoryMetadata object.\n */\nexport interface EntityRepositoryMetadataArgs {\n\n    /**\n     * Constructor of the custom entity repository.\n     */\n    readonly target: Function;\n\n    /**\n     * Entity managed by this custom repository.\n     */\n    readonly entity?: Function|string;\n\n    /**\n     * Indicates if entity repository will be retrieved from the service container.\n     * Note: this may cause problems if you are sharing entity repositories between using multiple connections.\n     */\n    readonly useContainer: boolean;\n\n}\n","/**\n * Used to inject transaction's entity managed into the method wrapped with @Transaction decorator.\n */\nexport interface TransactionEntityMetadataArgs {\n\n    /**\n     * Target class on which decorator is used.\n     */\n    readonly target: Function;\n\n    /**\n     * Method on which decorator is used.\n     */\n    readonly methodName: string;\n\n    /**\n     * Index of the parameter on which decorator is used.\n     */\n    readonly index: number;\n\n}\n","import {TargetMetadataArgsCollection} from \"./collection/TargetMetadataArgsCollection\";\nimport {PropertyMetadataArgsCollection} from \"./collection/PropertyMetadataArgsCollection\";\nimport {RelationMetadataArgs} from \"./RelationMetadataArgs\";\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\n\n/**\n * Storage all metadatas of all available types: tables, fields, subscribers, relations, etc.\n * Each metadata represents some specifications of what it represents.\n */\nexport class MetadataArgsStorage {\n\n    // todo: type in function validation, inverse side function validation\n    // todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n    // todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n    // todo: check for duplicate targets too since this check has been removed too\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables = new TargetMetadataArgsCollection<TableMetadataArgs>();\n    readonly entityRepositories = new TargetMetadataArgsCollection<EntityRepositoryMetadataArgs>();\n    readonly transactionEntityManagers = new TargetMetadataArgsCollection<TransactionEntityMetadataArgs>();\n    readonly namingStrategies = new TargetMetadataArgsCollection<NamingStrategyMetadataArgs>();\n    readonly entitySubscribers = new TargetMetadataArgsCollection<EntitySubscriberMetadataArgs>();\n    readonly indices = new PropertyMetadataArgsCollection<IndexMetadataArgs>();\n    readonly columns = new PropertyMetadataArgsCollection<ColumnMetadataArgs>();\n    readonly relations = new PropertyMetadataArgsCollection<RelationMetadataArgs>();\n    readonly joinColumns = new PropertyMetadataArgsCollection<JoinColumnMetadataArgs>();\n    readonly joinTables = new PropertyMetadataArgsCollection<JoinTableMetadataArgs>();\n    readonly entityListeners = new PropertyMetadataArgsCollection<EntityListenerMetadataArgs>();\n    readonly relationCounts = new PropertyMetadataArgsCollection<RelationCountMetadataArgs>();\n    readonly relationIds = new PropertyMetadataArgsCollection<RelationIdMetadataArgs>();\n    readonly embeddeds = new PropertyMetadataArgsCollection<EmbeddedMetadataArgs>();\n    readonly inheritances = new TargetMetadataArgsCollection<InheritanceMetadataArgs>();\n    readonly discriminatorValues = new TargetMetadataArgsCollection<DiscriminatorValueMetadataArgs>();\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets merged (with all abstract classes) table metadatas for the given classes.\n     */\n    getMergedTableMetadatas(classes?: Function[]) {\n        const allTableMetadataArgs = classes ? this.tables.filterByTargets(classes) : this.tables;\n        const tableMetadatas = allTableMetadataArgs.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"class-table-child\");\n\n        return tableMetadatas.toArray().map(tableMetadata => {\n            return this.mergeWithAbstract(allTableMetadataArgs, tableMetadata);\n        });\n    }\n\n    /**\n     * Gets merged (with all abstract classes) embeddable table metadatas for the given classes.\n     */\n    getMergedEmbeddableTableMetadatas(classes?: Function[]) {\n        const tables = classes ? this.tables.filterByTargets(classes) : this.tables;\n        const embeddableTableMetadatas = tables.filter(table => table.type === \"embeddable\");\n\n        return embeddableTableMetadatas.toArray().map(embeddableTableMetadata => {\n            return this.mergeWithEmbeddable(embeddableTableMetadatas, embeddableTableMetadata);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     */\n    protected mergeWithAbstract(allTableMetadatas: TargetMetadataArgsCollection<TableMetadataArgs>,\n                                table: TableMetadataArgs) {\n\n        const indices = this.indices.filterByTarget(table.target);\n        const columns = this.columns.filterByTarget(table.target);\n        const relations = this.relations.filterByTarget(table.target);\n        const joinColumns = this.joinColumns.filterByTarget(table.target);\n        const joinTables = this.joinTables.filterByTarget(table.target);\n        const entityListeners = this.entityListeners.filterByTarget(table.target);\n        const relationCounts = this.relationCounts.filterByTarget(table.target);\n        const relationIds = this.relationIds.filterByTarget(table.target);\n        const embeddeds = this.embeddeds.filterByTarget(table.target);\n        const inheritances = this.inheritances.filterByTarget(table.target);\n        const inheritance = (inheritances.length > 0) ? inheritances.toArray()[0] : undefined;\n        const discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\n\n        // find parent if this table is class-table-child\n        let parent: TableMetadataArgs|undefined = undefined;\n\n        // merge metadata from abstract tables\n        allTableMetadatas.toArray().forEach(inheritedTable => {\n            if (table.type === \"single-table-child\") return;\n            if (!table.target || !inheritedTable.target) return;\n            if (!(table.target instanceof Function) || !(inheritedTable.target instanceof Function)) return;\n            if (!this.isInherited(table.target, inheritedTable.target)) return;\n\n            // check if inheritedTable is a class with class table inheritance - then we don't need to merge its columns, relations, etc. things\n            if (!!this.inheritances.filterByTarget(inheritedTable.target).toArray().find(inheritance => inheritance.type === \"class-table\")) {\n                parent = inheritedTable;\n                return;\n            }\n\n            const metadatasFromAbstract = this.mergeWithAbstract(allTableMetadatas, inheritedTable);\n\n            metadatasFromAbstract.indices\n                .toArray()\n                .filter(index => { // make sure we don't have index with such name already\n                    return !index.name || !indices.toArray().find(existIndex => existIndex.name === index.name);\n                })\n                .forEach(index => indices.add(index));\n\n            metadatasFromAbstract.columns\n                .filterRepeatedMetadatas(columns.toArray())\n                .toArray()\n                .forEach(metadata => columns.add(metadata));\n\n            metadatasFromAbstract.relations\n                .filterRepeatedMetadatas(relations.toArray())\n                .toArray()\n                .forEach(metadata => relations.add(metadata));\n\n            metadatasFromAbstract.joinColumns\n                .filterRepeatedMetadatas(joinColumns.toArray())\n                .toArray()\n                .forEach(metadata => joinColumns.add(metadata));\n\n            metadatasFromAbstract.joinTables\n                .filterRepeatedMetadatas(joinTables.toArray())\n                .toArray()\n                .forEach(metadata => joinTables.add(metadata));\n\n            metadatasFromAbstract.entityListeners\n                .filterRepeatedMetadatas(entityListeners.toArray())\n                .toArray()\n                .forEach(metadata => entityListeners.add(metadata));\n\n            metadatasFromAbstract.relationCounts\n                .filterRepeatedMetadatas(relationCounts.toArray())\n                .toArray()\n                .forEach(metadata => relationCounts.add(metadata));\n\n            metadatasFromAbstract.relationIds\n                .filterRepeatedMetadatas(relationIds.toArray())\n                .toArray()\n                .forEach(metadata => relationIds.add(metadata));\n\n            metadatasFromAbstract.embeddeds\n                .filterRepeatedMetadatas(embeddeds.toArray())\n                .toArray()\n                .forEach(metadata => embeddeds.add(metadata));\n\n        });\n\n        // merge metadata from child tables for single-table inheritance\n        const children: TableMetadataArgs[] = [];\n\n        if (inheritance && inheritance.type === \"single-table\") {\n            allTableMetadatas.toArray().forEach(childTable => {\n                if (childTable.type !== \"single-table-child\") return;\n                if (!childTable.target || !table.target) return;\n                if (!(childTable.target instanceof Function) || !(table.target instanceof Function)) return;\n                if (!this.isInherited(childTable.target, table.target)) return;\n\n                children.push(childTable);\n                this.discriminatorValues\n                    .filterByTarget(childTable.target)\n                    .toArray()\n                    .forEach(metadata => discriminatorValues.push(metadata));\n\n                // for single table inheritance we also merge all columns, relation, etc. into same table\n                if (inheritance.type === \"single-table\") { // todo: remove?\n                    const metadatasFromAbstract = this.mergeWithAbstract(allTableMetadatas, childTable);\n\n                    metadatasFromAbstract.indices\n                        .toArray()\n                        .filter(index => { // make sure we don't have index with such name already\n                            return !indices.toArray().find(existIndex => existIndex.name === index.name);\n                        })\n                        .forEach(index => indices.add(index));\n\n                    metadatasFromAbstract.columns\n                        .filterRepeatedMetadatas(columns.toArray())\n                        .toArray()\n                        .forEach(metadata => columns.add(metadata));\n\n                    metadatasFromAbstract.relations\n                        .filterRepeatedMetadatas(relations.toArray())\n                        .toArray()\n                        .forEach(metadata => relations.add(metadata));\n\n                    metadatasFromAbstract.joinColumns\n                        .filterRepeatedMetadatas(joinColumns.toArray())\n                        .toArray()\n                        .forEach(metadata => joinColumns.add(metadata));\n\n                    metadatasFromAbstract.joinTables\n                        .filterRepeatedMetadatas(joinTables.toArray())\n                        .toArray()\n                        .forEach(metadata => joinTables.add(metadata));\n\n                    metadatasFromAbstract.entityListeners\n                        .filterRepeatedMetadatas(entityListeners.toArray())\n                        .toArray()\n                        .forEach(metadata => entityListeners.add(metadata));\n\n                    metadatasFromAbstract.relationCounts\n                        .filterRepeatedMetadatas(relationCounts.toArray())\n                        .toArray()\n                        .forEach(metadata => relationCounts.add(metadata));\n\n                    metadatasFromAbstract.relationIds\n                        .filterRepeatedMetadatas(relationIds.toArray())\n                        .toArray()\n                        .forEach(metadata => relationIds.add(metadata));\n\n                    metadatasFromAbstract.embeddeds\n                        .filterRepeatedMetadatas(embeddeds.toArray())\n                        .toArray()\n                        .forEach(metadata => embeddeds.add(metadata));\n\n                    metadatasFromAbstract.children\n                        .forEach(metadata => children.push(metadata));\n                }\n            });\n        }\n\n        return {\n            table: table,\n            parent: parent,\n            inheritance: inheritance,\n            children: children,\n            indices: indices,\n            columns: columns,\n            relations: relations,\n            joinColumns: joinColumns,\n            joinTables: joinTables,\n            entityListeners: entityListeners,\n            relationCounts: relationCounts,\n            relationIds: relationIds,\n            embeddeds: embeddeds,\n            discriminatorValues: discriminatorValues\n        };\n    }\n\n    /**\n     */\n    protected mergeWithEmbeddable(allTableMetadatas: TargetMetadataArgsCollection<TableMetadataArgs>,\n                                  tableMetadata: TableMetadataArgs) {\n        const columns = this.columns.filterByTarget(tableMetadata.target);\n\n        allTableMetadatas\n            .filter(metadata => {\n                if (!tableMetadata.target || !metadata.target) return false;\n                if (!(tableMetadata.target instanceof Function) || !(metadata.target instanceof Function)) return false;\n                return this.isInherited(tableMetadata.target, metadata.target); // todo: fix it for entity schema\n            })\n            .toArray()\n            .forEach(parentMetadata => {\n                const metadatasFromParents = this.mergeWithEmbeddable(allTableMetadatas, parentMetadata);\n\n                metadatasFromParents.columns\n                    .filterRepeatedMetadatas(columns.toArray())\n                    .toArray()\n                    .forEach(metadata => columns.add(metadata));\n            });\n\n        return {\n            table: tableMetadata,\n            columns: columns\n        };\n    }\n\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    protected isInherited(target1: Function, target2: Function) {\n        // we cannot use instanceOf in this method, because we need order of inherited tables, to ensure that\n        // properties get inherited in a right order. To achieve it we can only check a first parent of the class\n        // return this.target.prototype instanceof anotherTable.target;\n        return Object.getPrototypeOf(target1.prototype).constructor === target2;\n    }\n\n}","import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata, ColumnMode} from \"../metadata/ColumnMetadata\";\nimport {ColumnOptions} from \"../decorator/options/ColumnOptions\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {EntityMetadataValidator} from \"./EntityMetadataValidator\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {JoinColumnMetadata} from \"../metadata/JoinColumnMetadata\";\nimport {TableMetadata} from \"../metadata/TableMetadata\";\nimport {getMetadataArgsStorage, getFromContainer} from \"../index\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {JoinTableMetadata} from \"../metadata/JoinTableMetadata\";\nimport {JunctionEntityMetadataBuilder} from \"./JunctionEntityMetadataBuilder\";\nimport {ClosureJunctionEntityMetadataBuilder} from \"./ClosureJunctionEntityMetadataBuilder\";\nimport {EmbeddedMetadata} from \"../metadata/EmbeddedMetadata\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\nimport {Driver} from \"../driver/Driver\";\n\n/**\n * Aggregates all metadata: table, column, relation into one collection grouped by tables for a given set of classes.\n */\nexport class EntityMetadataBuilder {\n\n    // todo: type in function validation, inverse side function validation\n    // todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n    // todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n    // todo: check if multiple tree parent metadatas in validator\n    // todo: tree decorators can be used only on closure table (validation)\n    // todo: throw error if parent tree metadata was not specified in a closure table\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    buildFromSchemas(driver: Driver,\n                     lazyRelationsWrapper: LazyRelationsWrapper,\n                     namingStrategy: NamingStrategyInterface,\n                     schemas: EntitySchema[]): EntityMetadata[] {\n        const metadataArgsStorage = new MetadataArgsStorage();\n\n        // extract into separate class?\n        schemas.forEach(schema => {\n\n            // add table metadata args from the schema\n            const tableSchema = schema.table || {} as any;\n            const table: TableMetadataArgs = {\n                target: schema.target || schema.name,\n                name: tableSchema.name,\n                type: tableSchema.type || \"regular\",\n                // targetId: schema.name,\n                orderBy: tableSchema.orderBy\n            };\n            metadataArgsStorage.tables.add(table);\n\n            // add columns metadata args from the schema\n            Object.keys(schema.columns).forEach(columnName => {\n                const columnSchema = schema.columns[columnName];\n                let mode: ColumnMode = \"regular\";\n                if (columnSchema.createDate)\n                    mode = \"createDate\";\n                if (columnSchema.updateDate)\n                    mode = \"updateDate\";\n                if (columnSchema.version)\n                    mode = \"version\";\n                if (columnSchema.treeChildrenCount)\n                    mode = \"treeChildrenCount\";\n                if (columnSchema.treeLevel)\n                    mode = \"treeLevel\";\n\n                const column: ColumnMetadataArgs = {\n                    target: schema.target || schema.name,\n                    mode: mode,\n                    propertyName: columnName,\n                    // todo: what to do with it?: propertyType: \n                    options: {\n                        type: columnSchema.type,\n                        name: columnSchema.name,\n                        length: columnSchema.length,\n                        primary: columnSchema.primary,\n                        generated: columnSchema.generated,\n                        unique: columnSchema.unique,\n                        nullable: columnSchema.nullable,\n                        comment: columnSchema.comment,\n                        default: columnSchema.default,\n                        precision: columnSchema.precision,\n                        scale: columnSchema.scale\n                    }\n                };\n\n                metadataArgsStorage.columns.add(column);\n            });\n\n            // add relation metadata args from the schema\n            if (schema.relations) {\n                Object.keys(schema.relations).forEach(relationName => {\n                    const relationSchema = schema.relations[relationName];\n                    const relation: RelationMetadataArgs = {\n                        target: schema.target || schema.name,\n                        propertyName: relationName,\n                        relationType: relationSchema.type,\n                        isLazy: relationSchema.isLazy || false,\n                        type: relationSchema.target,\n                        inverseSideProperty: relationSchema.inverseSide,\n                        isTreeParent: relationSchema.isTreeParent,\n                        isTreeChildren: relationSchema.isTreeChildren,\n                        options: {\n                            cascadeAll: relationSchema.cascadeAll,\n                            cascadeInsert: relationSchema.cascadeInsert,\n                            cascadeUpdate: relationSchema.cascadeUpdate,\n                            cascadeRemove: relationSchema.cascadeRemove,\n                            nullable: relationSchema.nullable,\n                            onDelete: relationSchema.onDelete\n                        }\n                    };\n\n                    metadataArgsStorage.relations.add(relation);\n\n                    // add join column\n                    if (relationSchema.joinColumn) {\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinColumns.add(joinColumn);\n                        } else {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinColumn.name,\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\n                            };\n                            metadataArgsStorage.joinColumns.add(joinColumn);\n                        }\n                    }\n\n                    // add join table\n                    if (relationSchema.joinTable) {\n                        if (typeof relationSchema.joinTable === \"boolean\") {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinTables.add(joinTable);\n                        } else {\n                            const joinTable: JoinTableMetadataArgs = {\n                                target: schema.target || schema.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinTable.name,\n                                joinColumn: relationSchema.joinTable.joinColumn,\n                                inverseJoinColumn: relationSchema.joinTable.inverseJoinColumn\n                            };\n                            metadataArgsStorage.joinTables.add(joinTable);\n                        }\n                    }\n                });\n            }\n        });\n\n        return this.build(driver, lazyRelationsWrapper, metadataArgsStorage, namingStrategy);\n    }\n\n    /**\n     * Builds a complete metadata aggregations for the given entity classes.\n     */\n    buildFromMetadataArgsStorage(driver: Driver,\n                                 lazyRelationsWrapper: LazyRelationsWrapper,\n                                 namingStrategy: NamingStrategyInterface,\n                                 entityClasses?: Function[]): EntityMetadata[] {\n        return this.build(driver, lazyRelationsWrapper, getMetadataArgsStorage(), namingStrategy, entityClasses);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private build(driver: Driver,\n                  lazyRelationsWrapper: LazyRelationsWrapper,\n                  metadataArgsStorage: MetadataArgsStorage,\n                  namingStrategy: NamingStrategyInterface,\n                  entityClasses?: Function[]): EntityMetadata[] {\n        const embeddableMergedArgs = metadataArgsStorage.getMergedEmbeddableTableMetadatas(entityClasses);\n        const entityMetadatas: EntityMetadata[] = [];\n        const allMergedArgs = metadataArgsStorage.getMergedTableMetadatas(entityClasses);\n        allMergedArgs.forEach(mergedArgs => {\n\n            const tables = [mergedArgs.table].concat(mergedArgs.children);\n            tables.forEach(tableArgs => {\n\n                // find embeddable tables for embeddeds registered in this table and create EmbeddedMetadatas from them\n                const embeddeds: EmbeddedMetadata[] = [];\n                mergedArgs.embeddeds.toArray().forEach(embedded => {\n                    const embeddableTable = embeddableMergedArgs.find(embeddedMergedArgs => embeddedMergedArgs.table.target === embedded.type());\n                    if (embeddableTable) {\n                        const table = new TableMetadata(embeddableTable.table);\n                        const columns = embeddableTable.columns.toArray().map(args => new ColumnMetadata(args));\n                        embeddeds.push(new EmbeddedMetadata(embedded.type(), embedded.propertyName, table, columns));\n                    }\n                });\n\n                // create metadatas from args\n                const argsForTable = mergedArgs.inheritance && mergedArgs.inheritance.type === \"single-table\" ? mergedArgs.table : tableArgs;\n\n                const table = new TableMetadata(argsForTable);\n                const columns = mergedArgs.columns.toArray().map(args => {\n\n                    // if column's target is a child table then this column should have all nullable columns\n                    if (mergedArgs.inheritance &&\n                        mergedArgs.inheritance.type === \"single-table\" &&\n                        args.target !== mergedArgs.table.target && !!mergedArgs.children.find(childTable => childTable.target === args.target)) {\n                        args.options.nullable = true;\n                    }\n                    return new ColumnMetadata(args);\n                });\n                const relations = mergedArgs.relations.toArray().map(args => new RelationMetadata(args));\n                const indices = mergedArgs.indices.toArray().map(args => new IndexMetadata(args));\n                const discriminatorValueArgs = mergedArgs.discriminatorValues.find(discriminatorValueArgs => {\n                    return discriminatorValueArgs.target === tableArgs.target;\n                });\n                // create a new entity metadata\n                const entityMetadata = new EntityMetadata({\n                    junction: false,\n                    target: tableArgs.target,\n                    tablesPrefix: driver.options.tablesPrefix,\n                    namingStrategy: namingStrategy,\n                    tableMetadata: table,\n                    columnMetadatas: columns,\n                    relationMetadatas: relations,\n                    indexMetadatas: indices,\n                    embeddedMetadatas: embeddeds,\n                    inheritanceType: mergedArgs.inheritance ? mergedArgs.inheritance.type : undefined,\n                    discriminatorValue: discriminatorValueArgs ? discriminatorValueArgs.value : (tableArgs.target as any).name // todo: pass this to naming strategy to generate a name\n                }, lazyRelationsWrapper);\n                entityMetadatas.push(entityMetadata);\n                // create entity's relations join tables\n                entityMetadata.manyToManyRelations.forEach(relation => {\n                    const joinTableMetadata = mergedArgs.joinTables.findByProperty(relation.propertyName);\n                    if (joinTableMetadata) {\n                        const joinTable = new JoinTableMetadata(joinTableMetadata);\n                        relation.joinTable = joinTable;\n                        joinTable.relation = relation;\n                    }\n                });\n\n                // create entity's relations join columns\n                entityMetadata.oneToOneRelations\n                    .concat(entityMetadata.manyToOneRelations)\n                    .forEach(relation => {\n\n                        // since for many-to-one relations having JoinColumn is not required on decorators level, we need to go\n                        // throw all of them which don't have JoinColumn decorators and create it for them\n                        let joinColumnMetadata = mergedArgs.joinColumns.findByProperty(relation.propertyName);\n                        if (!joinColumnMetadata && relation.isManyToOne) {\n                            joinColumnMetadata = {\n                                target: relation.entityMetadata.target,\n                                propertyName: relation.propertyName\n                            };\n                        }\n\n                        if (joinColumnMetadata) {\n                            const joinColumn = new JoinColumnMetadata(joinColumnMetadata);\n                            relation.joinColumn = joinColumn;\n                            joinColumn.relation = relation;\n                        }\n                    });\n\n                // save relation id-s data\n                entityMetadata.relations.forEach(relation => {\n                    const relationIdMetadata = mergedArgs.relationIds.toArray().find(relationId => {\n                        if (relationId.relation instanceof Function)\n                            return relation.propertyName === relationId.relation(entityMetadata.createPropertiesMap());\n\n                        return relation.propertyName === relationId.relation;\n                    });\n                    if (relationIdMetadata) {\n                        if (relation.isOneToOneNotOwner || relation.isOneToMany)\n                            throw new Error(`RelationId cannot be used for the one-to-one without join column or one-to-many relations.`);\n\n                        relation.idField = relationIdMetadata.propertyName;\n                    }\n                });\n\n                // save relation counter-s data\n                entityMetadata.relations.forEach(relation => {\n                    const relationCountMetadata = mergedArgs.relationCounts.toArray().find(relationCount => {\n                        if (relationCount.relation instanceof Function)\n                            return relation.propertyName === relationCount.relation(entityMetadata.createPropertiesMap());\n\n                        return relation.propertyName === relationCount.relation;\n                    });\n\n                    if (relationCountMetadata)\n                        relation.countField = relationCountMetadata.propertyName;\n                });\n\n                // add lazy initializer for entity relations\n                if (entityMetadata.target instanceof Function) {\n                    entityMetadata.relations\n                        .filter(relation => relation.isLazy)\n                        .forEach(relation => {\n                            lazyRelationsWrapper.wrap((entityMetadata.target as Function).prototype, relation);\n                        });\n                }\n            });\n        });\n\n        // after all metadatas created we set inverse side (related) entity metadatas for all relation metadatas\n        entityMetadatas.forEach(entityMetadata => {\n            entityMetadata.relations.forEach(relation => {\n                const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type));\n                if (!inverseEntityMetadata)\n                    throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyName + \" was not found.\");\n\n                relation.inverseEntityMetadata = inverseEntityMetadata;\n            });\n        });\n\n        // after all metadatas created we set parent entity metadata for class-table inheritance\n        entityMetadatas.forEach(entityMetadata => {\n            const mergedArgs = allMergedArgs.find(mergedArgs => {\n                return mergedArgs.table.target === entityMetadata.target;\n            });\n            if (mergedArgs && mergedArgs.parent) {\n                const parentEntityMetadata = entityMetadatas.find(entityMetadata => entityMetadata.table.target === (mergedArgs!.parent! as any).target); // todo: weird compiler error here, thats why type casing is used\n                if (parentEntityMetadata)\n                    entityMetadata.parentEntityMetadata = parentEntityMetadata;\n            }\n        });\n\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(metadata => metadata.inheritanceType === \"single-table\" && metadata.hasDiscriminatorColumn)\n            .forEach(metadata => {\n                const indexForKey = new IndexMetadata({\n                    target: metadata.target,\n                    columns: [metadata.discriminatorColumn.name],\n                    unique: false\n                });\n                indexForKey.entityMetadata = metadata;\n                metadata.indices.push(indexForKey);\n\n                const indexForKeyWithPrimary = new IndexMetadata({\n                    target: metadata.target,\n                    columns: [metadata.firstPrimaryColumn.propertyName, metadata.discriminatorColumn.propertyName],\n                    unique: false\n                });\n                indexForKeyWithPrimary.entityMetadata = metadata;\n                metadata.indices.push(indexForKeyWithPrimary);\n            });\n\n        // generate virtual column with foreign key for class-table inheritance\n        entityMetadatas\n            .filter(metadata => !!metadata.parentEntityMetadata)\n            .forEach(metadata => {\n                const parentEntityMetadataPrimaryColumn = metadata.parentEntityMetadata.firstPrimaryColumn; // todo: make sure to create columns for all its primary columns\n                const columnName = namingStrategy.classTableInheritanceParentColumnName(metadata.parentEntityMetadata.table.name, parentEntityMetadataPrimaryColumn.propertyName);\n                const parentRelationColumn = new ColumnMetadata({\n                    target: metadata.parentEntityMetadata.table.target,\n                    propertyName: parentEntityMetadataPrimaryColumn.propertyName,\n                    // propertyType: parentEntityMetadataPrimaryColumn.propertyType,\n                    mode: \"parentId\",\n                    options: <ColumnOptions> {\n                        name: columnName,\n                        type: parentEntityMetadataPrimaryColumn.type,\n                        unique: true,\n                        nullable: false,\n                        primary: false\n                    }\n                });\n\n                // add column\n                metadata.addColumn(parentRelationColumn);\n\n                // add foreign key\n                const foreignKey = new ForeignKeyMetadata(\n                    [parentRelationColumn],\n                    metadata.parentEntityMetadata.table,\n                    [parentEntityMetadataPrimaryColumn],\n                    \"CASCADE\"\n                );\n                foreignKey.entityMetadata = metadata;\n                metadata.foreignKeys.push(foreignKey);\n            });\n\n        // generate columns and foreign keys for tables with relations\n        entityMetadatas.forEach(metadata => {\n            metadata.relationsWithJoinColumns.forEach(relation => {\n\n                // find relational column and if it does not exist - add it\n                const inverseSideColumn = relation.joinColumn.referencedColumn;\n                let relationalColumn = metadata.columns.find(column => column.name === relation.name);\n                if (!relationalColumn) {\n                    relationalColumn = new ColumnMetadata({\n                        target: metadata.target,\n                        propertyName: relation.name,\n                        // propertyType: inverseSideColumn.propertyType,\n                        mode: \"virtual\",\n                        options: <ColumnOptions> {\n                            type: inverseSideColumn.type,\n                            nullable: relation.isNullable,\n                            primary: relation.isPrimary\n                        }\n                    });\n                    relationalColumn.relationMetadata = relation;\n                    metadata.addColumn(relationalColumn);\n                }\n\n                // create and add foreign key\n                const foreignKey = new ForeignKeyMetadata(\n                    [relationalColumn],\n                    relation.inverseEntityMetadata.table,\n                    [inverseSideColumn],\n                    relation.onDelete\n                );\n                foreignKey.entityMetadata = metadata;\n                metadata.foreignKeys.push(foreignKey);\n            });\n        });\n\n        // generate junction tables for all closure tables\n        entityMetadatas.forEach(metadata => {\n            if (!metadata.table.isClosure)\n                return;\n\n            if (metadata.primaryColumns.length > 1)\n                throw new Error(`Cannot use given entity ${metadata.name} as a closure table, because it have multiple primary keys. Entities with multiple primary keys are not supported in closure tables.`);\n\n            const closureJunctionEntityMetadata = getFromContainer(ClosureJunctionEntityMetadataBuilder).build(driver, lazyRelationsWrapper, {\n                namingStrategy: namingStrategy,\n                table: metadata.table,\n                primaryColumn: metadata.firstPrimaryColumn,\n                hasTreeLevelColumn: metadata.hasTreeLevelColumn\n            });\n            metadata.closureJunctionTable = closureJunctionEntityMetadata;\n            entityMetadatas.push(closureJunctionEntityMetadata);\n        });\n\n        // generate junction tables for all many-to-many tables\n        entityMetadatas.forEach(metadata => {\n            metadata.ownerManyToManyRelations.forEach(relation => {\n                const junctionEntityMetadata = getFromContainer(JunctionEntityMetadataBuilder).build(driver, lazyRelationsWrapper, {\n                    namingStrategy: namingStrategy,\n                    firstTable: metadata.table,\n                    secondTable: relation.inverseEntityMetadata.table,\n                    joinTable: relation.joinTable\n                });\n                relation.junctionEntityMetadata = junctionEntityMetadata;\n                if (relation.hasInverseSide)\n                    relation.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n\n                entityMetadatas.push(junctionEntityMetadata);\n            });\n        });\n\n        // check for errors in a built metadata schema (we need to check after relationEntityMetadata is set)\n        getFromContainer(EntityMetadataValidator).validateMany(entityMetadatas);\n\n        return entityMetadatas;\n    }\n\n}","export class RandomGenerator {\n\n    /**\n     *  discuss at: http://locutus.io/php/sha1/\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n     * improved by: Michael White (http://getsprink.com)\n     * improved by: Kevin van Zonneveld (http://kvz.io)\n     *    input by: Brett Zamir (http://brett-zamir.me)\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\n     *      note 1: in a steaming fashion for faster and more efficient hashing\n     *   example 1: sha1('Kevin van Zonneveld')\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\n     */\n    static sha1(str: string) {\n\n        let _rotLeft = function(n: any, s: any) {\n            let t4 = (n << s) | (n >>> (32 - s));\n            return t4;\n        };\n\n        let _cvtHex = function(val: any) {\n            let str = \"\";\n            let i;\n            let v;\n\n            for (i = 7; i >= 0; i--) {\n                v = (val >>> (i * 4)) & 0x0f;\n                str += v.toString(16);\n            }\n            return str;\n        };\n\n        let blockstart;\n        let i, j;\n        let W = new Array(80);\n        let H0 = 0x67452301;\n        let H1 = 0xEFCDAB89;\n        let H2 = 0x98BADCFE;\n        let H3 = 0x10325476;\n        let H4 = 0xC3D2E1F0;\n        let A, B, C, D, E;\n        let temp;\n\n        // utf8_encode\n        str = /*unescape*/(encodeURIComponent(str));\n        let strLen = str.length;\n\n        let wordArray = [];\n        for (i = 0; i < strLen - 3; i += 4) {\n            j = str.charCodeAt(i) << 24 |\n                str.charCodeAt(i + 1) << 16 |\n                str.charCodeAt(i + 2) << 8 |\n                str.charCodeAt(i + 3);\n            wordArray.push(j);\n        }\n\n        switch (strLen % 4) {\n            case 0:\n                i = 0x080000000;\n                break;\n            case 1:\n                i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;\n                break;\n            case 2:\n                i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;\n                break;\n            case 3:\n                i = str.charCodeAt(strLen - 3) << 24 |\n                    str.charCodeAt(strLen - 2) << 16 |\n                    str.charCodeAt(strLen - 1) <<\n                    8 | 0x80;\n                break;\n        }\n\n        wordArray.push(i);\n\n        while ((wordArray.length % 16) !== 14) {\n            wordArray.push(0);\n        }\n\n        wordArray.push(strLen >>> 29);\n        wordArray.push((strLen << 3) & 0x0ffffffff);\n\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\n            for (i = 0; i < 16; i++) {\n                W[i] = wordArray[blockstart + i];\n            }\n            for (i = 16; i <= 79; i++) {\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n            }\n\n            A = H0;\n            B = H1;\n            C = H2;\n            D = H3;\n            E = H4;\n\n            for (i = 0; i <= 19; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 20; i <= 39; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 40; i <= 59; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            for (i = 60; i <= 79; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n\n            H0 = (H0 + A) & 0x0ffffffff;\n            H1 = (H1 + B) & 0x0ffffffff;\n            H2 = (H2 + C) & 0x0ffffffff;\n            H3 = (H3 + D) & 0x0ffffffff;\n            H4 = (H4 + E) & 0x0ffffffff;\n        }\n\n        temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\n        return temp.toLowerCase();\n    }\n\n}","/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str: string) {\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\n        if (p2) return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n\n/**\n * Converts string into snake-case.\n *\n * @see http://stackoverflow.com/questions/30521224/javascript-convert-pascalcase-to-underscore-case\n */\nexport function snakeCase(str: string) {\n    return str.replace(/(?:^|\\.?)([A-Z])/g, (x, y) => \"_\" + y.toLowerCase()).replace(/^_/, \"\");\n}","import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\nimport {RandomGenerator} from \"../util/RandomGenerator\";\nimport {snakeCase, camelCase} from \"../util/StringUtils\";\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n\n    tableName(className: string, customName: string): string {\n        return customName ? customName : snakeCase(className);\n    }\n\n    columnName(propertyName: string, customName: string): string {\n        return customName ? customName : propertyName;\n    }\n\n    embeddedColumnName(embeddedPropertyName: string, columnPropertyName: string, columnCustomName?: string): string {\n        return camelCase(embeddedPropertyName + \"_\" + (columnCustomName ? columnCustomName : columnPropertyName));\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName;\n    }\n\n    indexName(customName: string|undefined, tableName: string, columns: string[]): string {\n        if (customName)\n            return customName;\n\n        const key = \"ind_\" + tableName + \"_\" + columns.join(\"_\");\n        return \"ind_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    joinColumnInverseSideName(joinColumnName: string, propertyName: string): string {\n        if (joinColumnName)\n            return joinColumnName;\n\n        return propertyName;\n    }\n\n    joinTableName(firstTableName: string,\n                  secondTableName: string,\n                  firstPropertyName: string,\n                  secondPropertyName: string,\n                  firstColumnName: string,\n                  secondColumnName: string): string {\n        return snakeCase(firstTableName + \"_\" + firstPropertyName + \"_\" + secondTableName + \"_\" + secondColumnName);\n    }\n\n    joinTableColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string {\n        const column1 = camelCase(tableName + \"_\" + columnName);\n        const column2 = camelCase(secondTableName + \"_\" + secondColumnName);\n        return column1 === column2 ? column1 + \"_1\" : column1; // todo: do we still need _1 prefix?!\n    }\n\n    joinTableInverseColumnName(tableName: string, columnName: string, secondTableName: string, secondColumnName: string): string {\n        const column1 = camelCase(tableName + \"_\" + columnName);\n        const column2 = camelCase(secondTableName + \"_\" + secondColumnName);\n        return column1 === column2 ? column1 + \"_2\" : column1; // todo: do we still need _2 prefix?!\n    }\n\n    closureJunctionTableName(tableName: string): string {\n        return tableName + \"_closure\";\n    }\n\n    foreignKeyName(tableName: string, columnNames: string[], referencedTableName: string, referencedColumnNames: string[]): string {\n        const key = `${tableName}_${columnNames.join(\"_\")}_${referencedTableName}_${referencedColumnNames.join(\"_\")}`;\n        return \"fk_\" + RandomGenerator.sha1(key).substr(0, 27); // todo: use crypto instead?\n    }\n\n    classTableInheritanceParentColumnName(parentTableName: any, parentTableIdPropertyName: any): string {\n        return camelCase(parentTableName + \"_\" + parentTableIdPropertyName);\n    }\n\n    /**\n     * Adds prefix to the table.\n     */\n    prefixTableName(prefix: string, originalTableName: string): string {\n        return prefix + originalTableName;\n    }\n\n}\n","/**\n * Thrown when consumer tries to import entities / entity schemas / subscribers / naming strategies after connection\n * is established.\n */\nexport class CannotImportAlreadyConnectedError extends Error {\n    name = \"CannotImportAlreadyConnected\";\n\n    constructor(importStuff: string, connectionName: string) {\n        super();\n        this.message = `Cannot import ${importStuff} for \"${connectionName}\" connection because connection to the database already established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries close not opened connection.\n */\nexport class CannotCloseNotConnectedError extends Error {\n    name = \"CannotCloseNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot close \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to connect when he already connected.\n */\nexport class CannotConnectAlreadyConnectedError extends Error {\n    name = \"CannotConnectAlreadyConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot create a \"${connectionName}\" connection because connection to the database already established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to use naming strategy that does not exist.\n */\nexport class NamingStrategyNotFoundError extends Error {\n    name = \"NamingStrategyNotFoundError\";\n\n    constructor(strategyName: string|Function, connectionName: string) {\n        super();\n        const name = strategyName instanceof Function ? (strategyName as any).name : strategyName;\n        this.message = `Naming strategy \"${name}\" was not found. Looks like this naming strategy does not ` +\n            `exist or it was not registered in current \"${connectionName}\" connection?`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to sync a database schema after connection is established\n */\nexport class CannotSyncNotConnectedError extends Error {\n    name = \"CannotSyncNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot sync schema of the \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to change used naming strategy after connection is established.\n */\nexport class CannotUseNamingStrategyNotConnectedError extends Error {\n    name = \"CannotUseNamingStrategyNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot use a given naming strategy for \"${connectionName}\" connection because connection to the database already established.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {EntitySubscriberInterface} from \"./EntitySubscriberInterface\";\nimport {EventListenerTypes} from \"../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Subject} from \"../persistence/Subject\";\nimport {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\n\n/**\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\n */\nexport class Broadcaster {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection,\n                private subscriberMetadatas: EntitySubscriberInterface<any>[],\n                private entityListeners: EntityListenerMetadata[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\n     */\n    async broadcastBeforeEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\n        const insertPromises = insertSubjects.map(subject => this.broadcastBeforeInsertEvent(entityManager, subject));\n        const updatePromises = updateSubjects.map(subject => this.broadcastBeforeUpdateEvent(entityManager, subject));\n        const removePromises = removeSubjects.map(subject => this.broadcastBeforeRemoveEvent(entityManager, subject));\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\n        await Promise.all(allPromises);\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\n     */\n    async broadcastAfterEventsForAll(entityManager: EntityManager, insertSubjects: Subject[], updateSubjects: Subject[], removeSubjects: Subject[]): Promise<void> {\n        const insertPromises = insertSubjects.map(subject => this.broadcastAfterInsertEvent(entityManager, subject));\n        const updatePromises = updateSubjects.map(subject => this.broadcastAfterUpdateEvent(entityManager, subject));\n        const removePromises = removeSubjects.map(subject => this.broadcastAfterRemoveEvent(entityManager, subject));\n        const allPromises = insertPromises.concat(updatePromises).concat(removePromises);\n        await Promise.all(allPromises);\n    }\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\" event.\n     * Before insert event is executed before entity is being inserted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastBeforeInsertEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = this.entityListeners\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_INSERT && this.isAllowedListener(listener, subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.subscriberMetadatas\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.beforeInsert)\n            .map(subscriber => subscriber.beforeInsert!({\n                entityManager: entityManager,\n                entity: subject.entity\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"BEFORE_UPDATE\" event.\n     * Before update event is executed before entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastBeforeUpdateEvent(entityManager: EntityManager, subject: Subject): Promise<void> { // todo: send relations too?\n\n        const listeners = this.entityListeners\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_UPDATE && this.isAllowedListener(listener, subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.subscriberMetadatas\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.beforeUpdate)\n            .map(subscriber => subscriber.beforeUpdate!({\n                entityManager: entityManager,\n                entity: subject.entity,\n                databaseEntity: subject.databaseEntity,\n                updatedColumns: subject.diffColumns,\n                updatedRelations: subject.diffRelations,\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"BEFORE_REMOVE\" event.\n     * Before remove event is executed before entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastBeforeRemoveEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = this.entityListeners\n            .filter(listener => listener.type === EventListenerTypes.BEFORE_REMOVE && this.isAllowedListener(listener, subject.entity))\n            .map(entityListener => subject.databaseEntity[entityListener.propertyName]());\n\n        const subscribers = this.subscriberMetadatas\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.beforeRemove)\n            .map(subscriber => subscriber.beforeRemove!({\n                entityManager: entityManager,\n                entity: subject.hasEntity ? subject.entity : undefined,\n                databaseEntity: subject.databaseEntity,\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\" event.\n     * After insert event is executed after entity is being persisted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastAfterInsertEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = this.entityListeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_INSERT && this.isAllowedListener(listener, subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.subscriberMetadatas\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.afterInsert)\n            .map(subscriber => subscriber.afterInsert!({\n                entityManager: entityManager,\n                entity: subject.entity\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_UPDATE\" event.\n     * After update event is executed after entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastAfterUpdateEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = this.entityListeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_UPDATE && this.isAllowedListener(listener, subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.subscriberMetadatas\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.afterUpdate)\n            .map(subscriber => subscriber.afterUpdate!({\n                entityManager: entityManager,\n                entity: subject.entity,\n                databaseEntity: subject.databaseEntity,\n                updatedColumns: subject.diffColumns,\n                updatedRelations: subject.diffRelations,\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_REMOVE\" event.\n     * After remove event is executed after entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastAfterRemoveEvent(entityManager: EntityManager, subject: Subject): Promise<void> {\n\n        const listeners = this.entityListeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_REMOVE && this.isAllowedListener(listener, subject.entity))\n            .map(entityListener => subject.entity[entityListener.propertyName]());\n\n        const subscribers = this.subscriberMetadatas\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, subject.entityTarget) && subscriber.afterRemove)\n            .map(subscriber => subscriber.afterRemove!({\n                entityManager: entityManager,\n                entity: subject.hasEntity ? subject.entity : undefined,\n                databaseEntity: subject.databaseEntity,\n                entityId: subject.metadata.getEntityIdMixedMap(subject.databaseEntity)\n            }));\n\n        await Promise.all(listeners.concat(subscribers));\n    }\n\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastLoadEventsForAll(target: Function|string, entities: ObjectLiteral[]): Promise<void> {\n        await Promise.all(entities.map(entity => this.broadcastLoadEvents(target, entity)));\n    }\n\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for the given entity and all its sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     */\n    async broadcastLoadEvents(target: Function|string, entity: ObjectLiteral): Promise<void> {\n        if (entity instanceof Promise) // todo: check why need this?\n            return;\n\n        // collect load events for all children entities that were loaded with the main entity\n        const children = this.connection.getMetadata(target).relations.reduce((promises, relation) => {\n            if (!entity.hasOwnProperty(relation.propertyName))\n                return promises;\n\n            const value = relation.getEntityValue(entity);\n            if (value instanceof Array) {\n                promises = promises.concat(this.broadcastLoadEventsForAll(relation.inverseEntityMetadata.target, value));\n            } else if (value) {\n                promises.push(this.broadcastLoadEvents(relation.inverseEntityMetadata.target, value));\n            }\n\n            return promises;\n        }, [] as Promise<void>[]);\n\n        const listeners = this.entityListeners\n            .filter(listener => listener.type === EventListenerTypes.AFTER_LOAD && this.isAllowedListener(listener, entity))\n            .map(listener => entity[listener.propertyName]());\n\n        const subscribers = this.subscriberMetadatas\n            .filter(subscriber => this.isAllowedSubscriber(subscriber, target) && subscriber.afterLoad)\n            .map(subscriber => subscriber.afterLoad!(entity));\n\n        await Promise.all(children.concat(listeners.concat(subscribers)));\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    protected isAllowedListener(listener: EntityListenerMetadata, entity: ObjectLiteral) {\n        // todo: create in entity metadata method like isInherited\n        return listener.target === entity.constructor || // todo: .constructor won't work for entity schemas\n            (listener.target instanceof Function && entity.constructor.prototype instanceof listener.target); // todo: also need to implement entity schema inheritance\n    }\n\n    /**\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\n     * or listens our entity.\n     */\n    protected isAllowedSubscriber(subscriber: EntitySubscriberInterface<any>, target: Function|string): boolean {\n        return  !subscriber.listenTo ||\n                !subscriber.listenTo() ||\n                subscriber.listenTo() === Object ||\n                subscriber.listenTo() === target;\n    }\n\n}","import {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {TableSchema} from \"./schema/TableSchema\";\nimport {ColumnSchema} from \"./schema/ColumnSchema\";\nimport {ForeignKeySchema} from \"./schema/ForeignKeySchema\";\nimport {IndexSchema} from \"./schema/IndexSchema\";\nimport {Driver} from \"../driver/Driver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"../logger/Logger\";\nimport {PrimaryKeySchema} from \"./schema/PrimaryKeySchema\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    /**\n     * All synchronized tables in the database.\n     */\n    protected tableSchemas: TableSchema[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * @param driver Driver needs to create a query runner\n     * @param logger Used to log schema creation events\n     * @param entityMetadatas All entities to create schema for\n     */\n    constructor(protected driver: Driver,\n                protected logger: Logger,\n                protected entityMetadatas: EntityMetadata[]) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = await this.driver.createQueryRunner();\n        this.tableSchemas = await this.loadTableSchemas();\n\n        await this.queryRunner.beginTransaction();\n        try {\n            await this.dropOldForeignKeys();\n            // await this.dropOldPrimaryKeys(); // todo: need to drop primary column because column updates are not possible\n            await this.createNewTables();\n            await this.dropRemovedColumns();\n            await this.addNewColumns();\n            await this.updateExistColumns();\n            await this.updatePrimaryKeys();\n            await this.createForeignKeys();\n            await this.createIndices();\n            await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n            await this.queryRunner.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.entityMetadatas.filter(metadata => !metadata.table.skipSchemaSync);\n    }\n\n    /**\n     * Loads all table schemas from the database.\n     */\n    protected loadTableSchemas(): Promise<TableSchema[]> {\n        const tableNames = this.entityToSyncMetadatas.map(metadata => metadata.table.name);\n        return this.queryRunner.loadTableSchemas(tableNames);\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the table schemas, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const foreignKeySchemasToDrop = tableSchema.foreignKeys.filter(foreignKeySchema => {\n                return !metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === foreignKeySchema.name);\n            });\n            if (foreignKeySchemasToDrop.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`dropping old foreign keys of ${tableSchema.name}: ${foreignKeySchemasToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // remove foreign keys from the table schema\n            tableSchema.removeForeignKeys(foreignKeySchemasToDrop);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemasToDrop);\n        });\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            // check if table does not exist yet\n            const existTableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (existTableSchema)\n                return;\n\n            this.logger.logSchemaBuild(`creating a new table: ${metadata.table.name}`);\n\n            // create a new table schema and sync it in the database\n            const tableSchema = new TableSchema(metadata.table.name, this.metadataColumnsToColumnSchemas(metadata.columns), true);\n            this.tableSchemas.push(tableSchema);\n            await this.queryRunner.createTable(tableSchema);\n        });\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected dropRemovedColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema) return;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedColumnSchemas = tableSchema.columns.filter(columnSchema => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.name === columnSchema.name);\n            });\n            if (droppedColumnSchemas.length === 0)\n                return;\n\n            // drop all foreign keys that has column to be removed in its columns\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedForeignKeys(metadata.table.name, droppedColumnSchema.name);\n            }));\n\n            // drop all indices that point to this column\n            await Promise.all(droppedColumnSchemas.map(droppedColumnSchema => {\n                return this.dropColumnReferencedIndices(metadata.table.name, droppedColumnSchema.name);\n            }));\n\n            this.logger.logSchemaBuild(`columns dropped in ${tableSchema.name}: ` + droppedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // remove columns from the table schema and primary keys of it if its used in the primary keys\n            tableSchema.removeColumns(droppedColumnSchemas);\n            tableSchema.removePrimaryKeysOfColumns(droppedColumnSchemas);\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(tableSchema, droppedColumnSchemas);\n        });\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected addNewColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !tableSchema.columns.find(columnSchema => columnSchema.name === columnMetadata.name);\n            });\n            if (newColumnMetadatas.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.name).join(\", \"));\n\n            // create columns in the database\n            const newColumnSchemas = this.metadataColumnsToColumnSchemas(newColumnMetadatas);\n            await this.queryRunner.addColumns(tableSchema, newColumnSchemas);\n            tableSchema.addColumns(newColumnSchemas);\n        });\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected updateExistColumns() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            const updatedColumnSchemas = tableSchema.findChangedColumns(this.queryRunner, metadata.columns);\n            if (updatedColumnSchemas.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`columns changed in ${tableSchema.name}. updating: ` + updatedColumnSchemas.map(column => column.name).join(\", \"));\n\n            // drop all foreign keys that point to this column\n            const dropRelatedForeignKeysPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.name === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedForeignKeys(metadata.table.name, changedColumnSchema.name));\n\n            // wait until all related foreign keys are dropped\n            await Promise.all(dropRelatedForeignKeysPromises);\n\n            // drop all indices that point to this column\n            const dropRelatedIndicesPromises = updatedColumnSchemas\n                .filter(changedColumnSchema => !!metadata.columns.find(columnMetadata => columnMetadata.name === changedColumnSchema.name))\n                .map(changedColumnSchema => this.dropColumnReferencedIndices(metadata.table.name, changedColumnSchema.name));\n\n            // wait until all related indices are dropped\n            await Promise.all(dropRelatedIndicesPromises);\n\n            // generate a map of new/old columns\n            const newAndOldColumnSchemas = updatedColumnSchemas.map(changedColumnSchema => {\n                const columnMetadata = metadata.columns.find(column => column.name === changedColumnSchema.name);\n                const newColumnSchema = ColumnSchema.create(columnMetadata!, this.queryRunner.normalizeType(columnMetadata!));\n                tableSchema.replaceColumn(changedColumnSchema, newColumnSchema);\n\n                return {\n                    newColumn: newColumnSchema,\n                    oldColumn: changedColumnSchema\n                };\n            });\n\n            return this.queryRunner.changeColumns(tableSchema, newAndOldColumnSchemas);\n        });\n    }\n\n    /**\n     * Creates primary keys which does not exist in the table yet.\n     */\n    protected updatePrimaryKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name && !table.justCreated);\n            if (!tableSchema)\n                return;\n\n            const metadataPrimaryColumns = metadata.columns.filter(column => column.isPrimary && !column.isGenerated);\n            const addedKeys = metadataPrimaryColumns\n                .filter(primaryKey => {\n                    return !tableSchema.primaryKeysWithoutGenerated.find(dbPrimaryKey => dbPrimaryKey.columnName === primaryKey.name);\n                })\n                .map(primaryKey => new PrimaryKeySchema(\"\", primaryKey.name));\n\n            const droppedKeys = tableSchema.primaryKeysWithoutGenerated.filter(primaryKeySchema => {\n                return !metadataPrimaryColumns.find(primaryKeyMetadata => primaryKeyMetadata.name === primaryKeySchema.columnName);\n            });\n\n            if (addedKeys.length === 0 && droppedKeys.length === 0)\n                return;\n\n            this.logger.logSchemaBuild(`primary keys of ${tableSchema.name} has changed: dropped - ${droppedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}; added - ${addedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}`);\n            tableSchema.addPrimaryKeys(addedKeys);\n            tableSchema.removePrimaryKeys(droppedKeys);\n            await this.queryRunner.updatePrimaryKeys(tableSchema);\n        });\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected createForeignKeys() {\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\n                return !tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\n            });\n            if (newKeys.length === 0)\n                return;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n            this.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")}`);\n            await this.queryRunner.createForeignKeys(tableSchema, dbForeignKeys);\n            tableSchema.addForeignKeys(dbForeignKeys);\n        });\n    }\n\n    /**\n     * Creates indices which are missing in db yet, and drops indices which exist in the db,\n     * but does not exist in the metadata anymore.\n     */\n    protected createIndices() {\n        // return Promise.all(this.entityMetadatas.map(metadata => this.createIndices(metadata.table, metadata.indices)));\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\n            const tableSchema = this.tableSchemas.find(table => table.name === metadata.table.name);\n            if (!tableSchema)\n                return;\n\n            // drop all indices that exist in the table, but does not exist in the given composite indices\n            const dropQueries = tableSchema.indices\n                .filter(indexSchema => !metadata.indices.find(indexMetadata => indexMetadata.name === indexSchema.name))\n                .map(async indexSchema => {\n                    this.logger.logSchemaBuild(`dropping an index: ${indexSchema.name}`);\n                    tableSchema.removeIndex(indexSchema);\n                    await this.queryRunner.dropIndex(metadata.table.name, indexSchema.name);\n                });\n\n            // then create table indices for all composite indices we have\n            const addQueries = metadata.indices\n                .filter(indexMetadata => !tableSchema.indices.find(indexSchema => indexSchema.name === indexMetadata.name))\n                .map(async indexMetadata => {\n                    const indexSchema = IndexSchema.create(indexMetadata);\n                    tableSchema.indices.push(indexSchema);\n                    this.logger.logSchemaBuild(`adding new index: ${indexSchema.name}`);\n                    await this.queryRunner.createIndex(indexSchema.tableName, indexSchema);\n                });\n\n            await Promise.all(dropQueries.concat(addQueries));\n        });\n    }\n\n    /**\n     * Drops all indices where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedIndices(tableName: string, columnName: string): Promise<void> {\n\n        const allIndexMetadatas = this.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.indices),\n            [] as IndexMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // console.log(allIndexMetadatas);\n\n        // find depend indices to drop them\n        const dependIndices = allIndexMetadatas.filter(indexMetadata => {\n            return indexMetadata.tableName === tableName && indexMetadata.columns.indexOf(columnName) !== -1;\n        });\n        if (!dependIndices.length)\n            return;\n\n        const dependIndicesInTable = tableSchema.indices.filter(indexSchema => {\n            return !!dependIndices.find(indexMetadata => indexSchema.name === indexMetadata.name);\n        });\n        if (dependIndicesInTable.length === 0)\n            return;\n\n        this.logger.logSchemaBuild(`dropping related indices of ${tableName}#${columnName}: ${dependIndicesInTable.map(index => index.name).join(\", \")}`);\n\n        const dropPromises = dependIndicesInTable.map(index => {\n            tableSchema.removeIndex(index);\n            return this.queryRunner.dropIndex(tableSchema.name, index.name);\n        });\n\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tableName: string, columnName: string): Promise<void> {\n\n        const allForeignKeyMetadatas = this.entityMetadatas.reduce(\n            (all, metadata) => all.concat(metadata.foreignKeys),\n            [] as ForeignKeyMetadata[]\n        );\n\n        const tableSchema = this.tableSchemas.find(table => table.name === tableName);\n        if (!tableSchema)\n            return;\n\n        // find depend foreign keys to drop them\n        const dependForeignKeys = allForeignKeyMetadatas.filter(foreignKey => {\n            if (foreignKey.tableName === tableName) {\n                return !!foreignKey.columns.find(fkColumn => {\n                    return fkColumn.name === columnName;\n                });\n            } else if (foreignKey.referencedTableName === tableName) {\n                return !!foreignKey.referencedColumns.find(fkColumn => {\n                    return fkColumn.name === columnName;\n                });\n            }\n            return false;\n        });\n        if (!dependForeignKeys.length)\n            return;\n\n        const dependForeignKeyInTable = dependForeignKeys.filter(fk => {\n            return !!tableSchema.foreignKeys.find(dbForeignKey => dbForeignKey.name === fk.name);\n        });\n        if (dependForeignKeyInTable.length === 0)\n            return;\n\n        this.logger.logSchemaBuild(`dropping related foreign keys of ${tableName}#${columnName}: ${dependForeignKeyInTable.map(foreignKey => foreignKey.name).join(\", \")}`);\n        const foreignKeySchemas = dependForeignKeyInTable.map(foreignKeyMetadata => ForeignKeySchema.create(foreignKeyMetadata));\n        tableSchema.removeForeignKeys(foreignKeySchemas);\n        await this.queryRunner.dropForeignKeys(tableSchema, foreignKeySchemas);\n    }\n\n    /**\n     * Creates new column schemas from the given column metadatas.\n     */\n    protected metadataColumnsToColumnSchemas(columns: ColumnMetadata[]): ColumnSchema[] {\n        return columns.map(columnMetadata => {\n            return ColumnSchema.create(columnMetadata, this.queryRunner.normalizeType(columnMetadata));\n        });\n    }\n\n}","/**\n */\nexport class EntityMetadataNotFound extends Error {\n    name = \"EntityMetadataNotFound\";\n\n    constructor(target: Function|string) {\n        super();\n        const targetName = typeof target === \"function\" && (<any> target).name ? (<any> target).name : target;\n        this.message = `No metadata for \"${targetName}\" was found.`;\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\n\n/**\n * Migrations should implement this interface and all its methods.\n */\nexport interface MigrationInterface {\n\n    /**\n     * Run the migrations.\n     */\n    up(queryRunner: QueryRunner, connection: Connection, entityManager?: EntityManager): Promise<any>;\n\n    /**\n     * Reverse the migrations.\n     */\n    down(queryRunner: QueryRunner, connection: Connection, entityManager?: EntityManager): Promise<any>;\n\n}","import {MigrationInterface} from \"./MigrationInterface\";\n\n/**\n * Represents entity of the migration in the database.\n */\nexport class Migration {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Timestamp of the migration.\n     */\n    timestamp: number;\n\n    /**\n     * Name of the migration (class name).\n     */\n    name: string;\n\n    /**\n     * Migration instance that needs to be run.\n     */\n    instance?: MigrationInterface;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(timestamp: number, name: string, instance?: MigrationInterface) {\n        this.timestamp = timestamp;\n        this.name = name;\n        this.instance = instance;\n    }\n\n}","import {TableSchema} from \"../schema-builder/schema/TableSchema\";\nimport {ColumnSchema} from \"../schema-builder/schema/ColumnSchema\";\nimport {ColumnTypes} from \"../metadata/types/ColumnTypes\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {Migration} from \"./Migration\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    protected queryRunnerProvider: QueryRunnerProvider;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection, queryRunnerProvider?: QueryRunnerProvider) {\n        this.queryRunnerProvider = queryRunnerProvider || new QueryRunnerProvider(connection.driver, true);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<void> {\n        const queryRunner = await this.queryRunnerProvider.provide();\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist();\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations();\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter(migration => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n            if (executedMigration)\n                return false;\n\n            // migration is new and not executed. now check if its timestamp is correct\n            if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n                throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.log(\"info\", `No migrations are pending`);\n            return;\n        }\n\n        // log information about migration execution\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.log(\"info\", `${allMigrations.length} migrations were found in the source code.`);\n        if (lastTimeExecutedMigration)\n            this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\n        this.connection.logger.log(\"info\", `${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (!queryRunner.isTransactionActive()) {\n            await queryRunner.beginTransaction();\n            transactionStartedByUs = true;\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\n                return migration.instance!.up(queryRunner, this.connection, entityManager)\n                    .then(() => { // now when migration is executed we need to insert record about it into the database\n                        return this.insertExecutedMigration(migration);\n                    })\n                    .then(() => { // informative log about migration success\n                        this.connection.logger.log(\"info\", `Migration ${migration.name} has been executed successfully.`);\n                    });\n            });\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.rollbackTransaction();\n\n            throw err;\n        }\n\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n        const queryRunner = await this.queryRunnerProvider.provide();\n        const entityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(this.queryRunnerProvider);\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist();\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations();\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.log(\"info\", `No migrations was found in the database. Nothing to revert!`);\n            return;\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\n\n        // log information about migration execution\n        this.connection.logger.log(\"info\", `${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.log(\"info\", `${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\n        this.connection.logger.log(\"info\", `Now reverting it...`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (!queryRunner.isTransactionActive()) {\n            await queryRunner.beginTransaction();\n            transactionStartedByUs = true;\n        }\n\n        try {\n            await migrationToRevert.instance!.down(queryRunner, this.connection, entityManager);\n            await this.deleteExecutedMigration(migrationToRevert);\n            this.connection.logger.log(\"info\", `Migration ${migrationToRevert.name} has been reverted successfully.`);\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.rollbackTransaction();\n\n            throw err;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(): Promise<void> {\n        const queryRunner = await this.queryRunnerProvider.provide();\n        const tableExist = await queryRunner.hasTable(\"migrations\"); // todo: table name should be configurable\n        if (!tableExist) {\n            await queryRunner.createTable(new TableSchema(\"migrations\", [\n                new ColumnSchema({\n                    name: \"timestamp\",\n                    type: queryRunner.normalizeType({\n                        type: ColumnTypes.NUMBER\n                    }),\n                    isPrimary: true,\n                    isNullable: false\n                }),\n                new ColumnSchema({\n                    name: \"name\",\n                    type: queryRunner.normalizeType({\n                        type: ColumnTypes.STRING\n                    }),\n                    isNullable: false\n                }),\n            ]));\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database.\n     */\n    protected async loadExecutedMigrations(): Promise<Migration[]> {\n        const migrationsRaw: ObjectLiteral[] = await new QueryBuilder(this.connection, this.queryRunnerProvider)\n            .select()\n            .fromTable(\"migrations\", \"migrations\")\n            .getRawMany();\n\n        return migrationsRaw.map(migrationRaw => {\n            return new Migration(parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n        });\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.getMigrations().map(migration => {\n            const migrationClassName = (migration.constructor as any).name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\n            if (!migrationTimestamp)\n                throw new Error(`Migration class name should contain a class name at the end of the file. ${migrationClassName} migration name is wrong.`);\n\n            return new Migration(migrationTimestamp, migrationClassName, migration);\n        });\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestMigration(migrations: Migration[]): Migration|undefined {\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(migration: Migration): Promise<void> {\n        const queryRunner = await this.queryRunnerProvider.provide();\n        await queryRunner.insert(\"migrations\", {\n            timestamp: migration.timestamp,\n            name: migration.name,\n        });\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(migration: Migration): Promise<void> {\n        const queryRunner = await this.queryRunnerProvider.provide();\n        await queryRunner.delete(\"migrations\", {\n            timestamp: migration.timestamp,\n            name: migration.name,\n        });\n    }\n\n}","/**\n * Thrown when consumer tries to run/revert migrations without connection set.\n */\nexport class CannotRunMigrationNotConnectedError extends Error {\n    name = \"CannotRunMigrationNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot run/revert migrations on \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\n */\nexport class CustomRepositoryDoesNotHaveEntityError extends Error {\n    name = \"CustomRepositoryDoesNotHaveEntityError\";\n\n    constructor(repository: any) {\n        super(`Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name} does not have managed entity. ` +\n        `Did you forget to specify entity for it @EntityRepository(MyEntity)? `);\n    }\n\n}","import {Connection} from \"../connection/Connection\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {Repository} from \"./Repository\";\nimport {TreeRepository} from \"./TreeRepository\";\nimport {SpecificRepository} from \"./SpecificRepository\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {CustomRepositoryDoesNotHaveEntityError} from \"./error/CustomRepositoryDoesNotHaveEntityError\";\n\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nexport class AbstractRepository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this repository.\n     */\n    protected connection: Connection;\n\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity.\n     */\n    protected get entityManager(): EntityManager {\n        return this.connection.entityManager;\n    }\n\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get repository(): Repository<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getRepository<Entity>(target);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get treeRepository(): TreeRepository<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getTreeRepository<Entity>(target);\n    }\n\n    /**\n     * Gets the original ORM specific repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get specificRepository(): SpecificRepository<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getSpecificRepository<Entity>(target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected createQueryBuilder(alias: string): QueryBuilder<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getRepository(target).createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    protected createQueryBuilderFor<T>(entity: ObjectType<T>, alias: string): QueryBuilder<T> {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    }\n\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    protected getRepositoryFor<T>(entity: ObjectType<T>): Repository<T> {\n        return this.entityManager.getRepository(entity);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    protected getTreeRepositoryFor<T>(entity: ObjectType<T>): TreeRepository<T> {\n        return this.entityManager.getTreeRepository(entity);\n    }\n\n    /**\n     * Gets the original ORM specific repository for the given entity class.\n     */\n    protected getSpecificRepositoryFor<T>(entity: ObjectType<T>): SpecificRepository<T> {\n        return this.entityManager.getSpecificRepository(entity);\n    }\n\n}","/**\n * Thrown if custom repository was not found.\n */\nexport class CustomRepositoryNotFoundError extends Error {\n    name = \"CustomRepositoryNotFoundError\";\n\n    constructor(repository: any) {\n        super();\n        this.message = `Custom repository ${repository instanceof Function ? repository.name : repository.constructor.name } was not found. ` +\n            `Did you forgot to put @EntityRepository decorator on it?`;\n    }\n\n}","/**\n * Thrown if same custom repository instance is reused between different connections.\n */\nexport class CustomRepositoryReusedError extends Error {\n    name = \"CustomRepositoryReusedError\";\n\n    constructor(repository: any) {\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\n            `was already used in the different connection. You can't share entity repositories between different connections ` +\n            `when useContainer is set to true for the entity repository.`);\n    }\n\n}","/**\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\n */\nexport class CustomRepositoryCannotInheritRepositoryError extends Error {\n    name = \"CustomRepositoryCannotInheritRepositoryError\";\n\n    constructor(repository: any) {\n        super(`Custom entity repository ${repository instanceof Function ? repository.name : repository.constructor.name} ` +\n            ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`);\n    }\n\n}","import {Driver} from \"../driver/Driver\";\nimport {Repository} from \"../repository/Repository\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\nimport {RepositoryNotFoundError} from \"./error/RepositoryNotFoundError\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityListenerMetadata} from \"../metadata/EntityListenerMetadata\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {importClassesFromDirectories, importJsonsFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\nimport {getMetadataArgsStorage, getFromContainer} from \"../index\";\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\nimport {CannotImportAlreadyConnectedError} from \"./error/CannotImportAlreadyConnectedError\";\nimport {CannotCloseNotConnectedError} from \"./error/CannotCloseNotConnectedError\";\nimport {CannotConnectAlreadyConnectedError} from \"./error/CannotConnectAlreadyConnectedError\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {NamingStrategyNotFoundError} from \"./error/NamingStrategyNotFoundError\";\nimport {RepositoryNotTreeError} from \"./error/RepositoryNotTreeError\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {CannotSyncNotConnectedError} from \"./error/CannotSyncNotConnectedError\";\nimport {CannotUseNamingStrategyNotConnectedError} from \"./error/CannotUseNamingStrategyNotConnectedError\";\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\nimport {LazyRelationsWrapper} from \"../lazy-loading/LazyRelationsWrapper\";\nimport {SpecificRepository} from \"../repository/SpecificRepository\";\nimport {RepositoryAggregator} from \"../repository/RepositoryAggregator\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SchemaBuilder} from \"../schema-builder/SchemaBuilder\";\nimport {Logger} from \"../logger/Logger\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {EntityMetadataNotFound} from \"../metadata-args/error/EntityMetadataNotFound\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\nimport {CannotRunMigrationNotConnectedError} from \"./error/CannotRunMigrationNotConnectedError\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\nimport {CustomRepositoryNotFoundError} from \"../repository/error/CustomRepositoryNotFoundError\";\nimport {CustomRepositoryReusedError} from \"../repository/error/CustomRepositoryReusedError\";\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../repository/error/CustomRepositoryCannotInheritRepositoryError\";\n\n/**\n * Connection is a single database connection to a specific database of a database management system.\n * You can have multiple connections to multiple databases in your application.\n */\nexport class Connection {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     */\n    public readonly name: string;\n\n    /**\n     * Database driver used by this connection.\n     */\n    public readonly driver: Driver;\n\n    /**\n     * Logger used to log orm events.\n     */\n    public readonly logger: Logger;\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    public readonly entityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * Used to broadcast connection events.\n     */\n    public readonly broadcaster: Broadcaster;\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets EntityManager of this connection.\n     */\n    private readonly _entityManager: EntityManager;\n\n    /**\n     * Stores all registered repositories.\n     */\n    private readonly repositoryAggregators: RepositoryAggregator[] = [];\n\n    /**\n     * Stores all entity repository instances.\n     */\n    private readonly entityRepositories: Object[] = [];\n\n    /**\n     * Entity listeners that are registered for this connection.\n     */\n    private readonly entityListeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Entity subscribers that are registered for this connection.\n     */\n    private readonly entitySubscribers: EntitySubscriberInterface<any>[] = [];\n\n    /**\n     * Registered entity classes to be used for this connection.\n     */\n    private readonly entityClasses: Function[] = [];\n\n    /**\n     * Registered entity schemas to be used for this connection.\n     */\n    private readonly entitySchemas: EntitySchema[] = [];\n\n    /**\n     * Registered subscriber classes to be used for this connection.\n     */\n    private readonly subscriberClasses: Function[] = [];\n\n    /**\n     * Registered naming strategy classes to be used for this connection.\n     */\n    private readonly namingStrategyClasses: Function[] = [];\n\n    /**\n     * Registered migration classes to be used for this connection.\n     */\n    private readonly migrationClasses: Function[] = [];\n\n    /**\n     * Naming strategy to be used in this connection.\n     */\n    private usedNamingStrategy: Function|string;\n\n    /**\n     * Indicates if connection has been done or not.\n     */\n    private _isConnected = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string, driver: Driver, logger: Logger) {\n        this.name = name;\n        this.driver = driver;\n        this.logger = logger;\n        this._entityManager = this.createEntityManager();\n        this.broadcaster = this.createBroadcaster();\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection to the database already established for this connection.\n     */\n    get isConnected() {\n        return this._isConnected;\n    }\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity in this connection.\n     */\n    get entityManager() {\n        // if (!this.isConnected)\n        //     throw new CannotGetEntityManagerNotConnectedError(this.name);\n\n        return this._entityManager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<this> {\n        if (this.isConnected)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n\n        // connect to the database via its driver\n        await this.driver.connect();\n\n        // set connected status for the current connection\n        this._isConnected = true;\n\n        // build all metadatas registered in the current connection\n        try {\n            this.buildMetadatas();\n\n        } catch (error) {\n\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.close();\n            throw error;\n        }\n\n        return this;\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories and perform any operations except\n     * opening connection again.\n     */\n    async close(): Promise<void> {\n        if (!this.isConnected)\n            throw new CannotCloseNotConnectedError(this.name);\n\n        await this.driver.disconnect();\n        this._isConnected = false;\n    }\n\n    /**\n     * Drops the database and all its data.\n     */\n    async dropDatabase(): Promise<void> {\n        const queryRunner = await this.driver.createQueryRunner();\n        await queryRunner.clearDatabase();\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async syncSchema(dropBeforeSync: boolean = false): Promise<void> {\n\n        if (!this.isConnected)\n            return Promise.reject(new CannotSyncNotConnectedError(this.name));\n\n        if (dropBeforeSync)\n            await this.dropDatabase();\n\n        await this.createSchemaBuilder().build();\n    }\n\n    /**\n     * Runs all pending migrations.\n     */\n    async runMigrations(): Promise<void> {\n\n        if (!this.isConnected)\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\n\n        const migrationExecutor = new MigrationExecutor(this);\n        await migrationExecutor.executePendingMigrations();\n    }\n\n    /**\n     * Reverts last executed migration.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        if (!this.isConnected)\n            return Promise.reject(new CannotRunMigrationNotConnectedError(this.name));\n\n        const migrationExecutor = new MigrationExecutor(this);\n        await migrationExecutor.undoLastMigration();\n    }\n\n    /**\n     * Imports entities from the given paths (directories) and registers them in the current connection.\n     */\n    importEntitiesFromDirectories(paths: string[]): this {\n        this.importEntities(importClassesFromDirectories(paths));\n        return this;\n    }\n\n    /**\n     * Imports entity schemas from the given paths (directories) and registers them in the current connection.\n     */\n    importEntitySchemaFromDirectories(paths: string[]): this {\n        this.importEntitySchemas(importJsonsFromDirectories(paths));\n        return this;\n    }\n\n    /**\n     * Imports subscribers from the given paths (directories) and registers them in the current connection.\n     */\n    importSubscribersFromDirectories(paths: string[]): this {\n        this.importSubscribers(importClassesFromDirectories(paths));\n        return this;\n    }\n\n    /**\n     * Imports naming strategies from the given paths (directories) and registers them in the current connection.\n     */\n    importNamingStrategiesFromDirectories(paths: string[]): this {\n        this.importEntities(importClassesFromDirectories(paths));\n        return this;\n    }\n\n    /**\n     * Imports migrations from the given paths (directories) and registers them in the current connection.\n     */\n    importMigrationsFromDirectories(paths: string[]): this {\n        this.importMigrations(importClassesFromDirectories(paths));\n        return this;\n    }\n\n    /**\n     * Imports entities and registers them in the current connection.\n     */\n    importEntities(entities: Function[]): this {\n        if (this.isConnected)\n            throw new CannotImportAlreadyConnectedError(\"entities\", this.name);\n\n        entities.forEach(cls => this.entityClasses.push(cls));\n        return this;\n    }\n\n    /**\n     * Imports schemas and registers them in the current connection.\n     */\n    importEntitySchemas(schemas: EntitySchema[]): this {\n        if (this.isConnected)\n            throw new CannotImportAlreadyConnectedError(\"schemas\", this.name);\n\n        schemas.forEach(schema => this.entitySchemas.push(schema));\n        return this;\n    }\n\n    /**\n     * Imports subscribers and registers them in the current connection.\n     */\n    importSubscribers(subscriberClasses: Function[]): this {\n        if (this.isConnected)\n            throw new CannotImportAlreadyConnectedError(\"entity subscribers\", this.name);\n\n        subscriberClasses.forEach(cls => this.subscriberClasses.push(cls));\n        return this;\n    }\n\n    /**\n     * Imports naming strategies and registers them in the current connection.\n     */\n    importNamingStrategies(strategies: Function[]): this {\n        if (this.isConnected)\n            throw new CannotImportAlreadyConnectedError(\"naming strategies\", this.name);\n\n        strategies.forEach(cls => this.namingStrategyClasses.push(cls));\n        return this;\n    }\n\n    /**\n     * Imports migrations and registers them in the current connection.\n     */\n    importMigrations(migrations: Function[]): this {\n        if (this.isConnected)\n            throw new CannotImportAlreadyConnectedError(\"migrations\", this.name);\n\n        migrations.forEach(cls => this.migrationClasses.push(cls));\n        return this;\n    }\n\n    /**\n     * Sets given naming strategy to be used.\n     * Naming strategy must be set to be used before connection is established.\n     */\n    useNamingStrategy(name: string): this;\n\n    /**\n     * Sets given naming strategy to be used.\n     * Naming strategy must be set to be used before connection is established.\n     */\n    useNamingStrategy(strategy: Function): this;\n\n    /**\n     * Sets given naming strategy to be used.\n     * Naming strategy must be set to be used before connection is established.\n     */\n    useNamingStrategy(strategyClassOrName: string|Function): this {\n        if (this.isConnected)\n            throw new CannotUseNamingStrategyNotConnectedError(this.name);\n\n        this.usedNamingStrategy = strategyClassOrName;\n        return this;\n    }\n\n    /**\n     * Gets the entity metadata of the given entity class.\n     */\n    getMetadata(target: Function): EntityMetadata;\n\n    /**\n     * Gets the entity metadata of the given entity name.\n     */\n    getMetadata(target: string): EntityMetadata;\n\n    /**\n     * Gets the entity metadata of the given entity class or schema name.\n     */\n    getMetadata(target: Function|string): EntityMetadata;\n\n    /**\n     Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: Function|string): EntityMetadata {\n        const metadata = this.entityMetadatas.find(metadata => metadata.target === target || (typeof target === \"string\" && metadata.targetName === target));\n        if (!metadata)\n            throw new EntityMetadataNotFound(target);\n\n        return metadata;\n    }\n\n    /**\n     * Gets repository for the given entity class.\n     */\n    getRepository<Entity>(entityClass: ObjectType<Entity>): Repository<Entity>;\n\n    /**\n     * Gets repository for the given entity name.\n     */\n    getRepository<Entity>(entityName: string): Repository<Entity>;\n\n    /**\n     * Gets repository for the given entity name.\n     */\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity>;\n\n    /**\n     * Gets repository for the given entity class or name.\n     */\n    getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): Repository<Entity> {\n        return this.findRepositoryAggregator(entityClassOrName).repository;\n    }\n\n    /**\n     * Gets tree repository for the given entity class.\n     * Only tree-type entities can have a TreeRepository,\n     * like ones decorated with @ClosureEntity decorator.\n     */\n    getTreeRepository<Entity>(entityClass: ObjectType<Entity>): TreeRepository<Entity>;\n\n    /**\n     * Gets tree repository for the given entity class.\n     * Only tree-type entities can have a TreeRepository,\n     * like ones decorated with @ClosureEntity decorator.\n     */\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity>;\n\n    /**\n     * Gets tree repository for the given entity class.\n     * Only tree-type entities can have a TreeRepository,\n     * like ones decorated with @ClosureEntity decorator.\n     */\n    getTreeRepository<Entity>(entityName: string): TreeRepository<Entity>;\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository,\n     * like ones decorated with @ClosureEntity decorator.\n     */\n    getTreeRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): TreeRepository<Entity> {\n        const repository = this.findRepositoryAggregator(entityClassOrName).treeRepository;\n        if (!repository)\n            throw new RepositoryNotTreeError(entityClassOrName);\n        return repository;\n    }\n\n    /**\n     * Gets specific repository for the given entity class.\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\n     */\n    getSpecificRepository<Entity>(entityClass: ObjectType<Entity>): SpecificRepository<Entity>;\n\n    /**\n     * Gets specific repository for the given entity name.\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\n     */\n    getSpecificRepository<Entity>(entityName: string): SpecificRepository<Entity>;\n\n    /**\n     * Gets specific repository for the given entity class or name.\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\n     */\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity>;\n\n    /**\n     * Gets specific repository for the given entity class or name.\n     * SpecificRepository is a special repository that contains specific and non standard repository methods.\n     */\n    getSpecificRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): SpecificRepository<Entity> {\n        return this.findRepositoryAggregator(entityClassOrName).specificRepository;\n    }\n\n    /**\n     * Creates a new entity manager with a single opened connection to the database.\n     * This may be useful if you want to perform all db queries within one connection.\n     * After finishing with entity manager, don't forget to release it, to release connection back to pool.\n     */\n    createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider?: QueryRunnerProvider): EntityManager {\n        if (!queryRunnerProvider)\n            queryRunnerProvider = new QueryRunnerProvider(this.driver, true);\n\n        return new EntityManager(this, queryRunnerProvider);\n    }\n\n    /**\n     * Gets migration instances that are registered for this connection.\n     */\n    getMigrations(): MigrationInterface[] {\n        if (this.migrationClasses && this.migrationClasses.length) {\n            return this.migrationClasses.map(migrationClass => {\n                return getFromContainer<MigrationInterface>(migrationClass);\n            });\n        }\n\n        return [];\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.toArray().find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        let entityRepositoryInstance: any = this.entityRepositories.find(entityRepository => entityRepository.constructor === customRepository);\n        if (!entityRepositoryInstance) {\n            if (entityRepositoryMetadataArgs.useContainer) {\n                entityRepositoryInstance = getFromContainer(entityRepositoryMetadataArgs.target);\n\n                // if we get custom entity repository from container then there is a risk that it already was used\n                // in some different connection. If it was used there then we check it and throw an exception\n                // because we cant override its connection there again\n\n                if (entityRepositoryInstance instanceof AbstractRepository || entityRepositoryInstance instanceof Repository) {\n                    // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n                    // however we need these properties for internal work of the class\n                    if ((entityRepositoryInstance as any)[\"connection\"] && (entityRepositoryInstance as any)[\"connection\"] !== this)\n                        throw new CustomRepositoryReusedError(customRepository);\n                }\n\n            } else {\n                entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)();\n            }\n\n            if (entityRepositoryInstance instanceof AbstractRepository) {\n                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n                // however we need these properties for internal work of the class\n                if (!(entityRepositoryInstance as any)[\"connection\"])\n                    (entityRepositoryInstance as any)[\"connection\"] = this;\n            }\n            if (entityRepositoryInstance instanceof Repository) {\n                if (!entityRepositoryMetadataArgs.entity)\n                    throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n\n                // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n                // however we need these properties for internal work of the class\n                (entityRepositoryInstance as any)[\"connection\"] = this;\n                (entityRepositoryInstance as any)[\"metadata\"] = this.getMetadata(entityRepositoryMetadataArgs.entity);\n            }\n\n            // register entity repository\n            this.entityRepositories.push(entityRepositoryInstance);\n        }\n\n        return entityRepositoryInstance;\n    }\n\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    getCustomRepositoryTarget<T>(customRepository: any): Function|string|undefined {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.toArray().find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        return entityRepositoryMetadataArgs.entity;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds repository aggregator of the given entity class or name.\n     */\n    protected findRepositoryAggregator(entityClassOrName: ObjectType<any>|string): RepositoryAggregator {\n        // if (!this.isConnected)\n        //     throw new NoConnectionForRepositoryError(this.name);\n\n        if (!this.entityMetadatas.find(metadata => metadata.target === entityClassOrName || (typeof entityClassOrName === \"string\" && metadata.targetName === entityClassOrName)))\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\n\n        const metadata = this.getMetadata(entityClassOrName);\n        const repositoryAggregator = this.repositoryAggregators.find(repositoryAggregate => repositoryAggregate.metadata === metadata);\n        if (!repositoryAggregator)\n            throw new RepositoryNotFoundError(this.name, entityClassOrName);\n\n        return repositoryAggregator;\n    }\n\n    /**\n     * Builds all registered metadatas.\n     */\n    protected buildMetadatas() {\n\n        this.entitySubscribers.length = 0;\n        this.entityListeners.length = 0;\n        this.repositoryAggregators.length = 0;\n        this.entityMetadatas.length = 0;\n\n        const namingStrategy = this.createNamingStrategy();\n        this.driver.namingStrategy = namingStrategy;\n        const lazyRelationsWrapper = this.createLazyRelationsWrapper();\n\n        // take imported event subscribers\n        if (this.subscriberClasses && this.subscriberClasses.length && !PlatformTools.getEnvVariable(\"SKIP_SUBSCRIBERS_LOADING\")) {\n            getMetadataArgsStorage()\n                .entitySubscribers\n                .filterByTargets(this.subscriberClasses)\n                .toArray()\n                .map(metadata => getFromContainer(metadata.target))\n                .forEach(subscriber => this.entitySubscribers.push(subscriber));\n        }\n\n        // take imported entity listeners\n        if (this.entityClasses && this.entityClasses.length) {\n            getMetadataArgsStorage()\n                .entityListeners\n                .filterByTargets(this.entityClasses)\n                .toArray()\n                .forEach(metadata => this.entityListeners.push(new EntityListenerMetadata(metadata)));\n        }\n\n        // build entity metadatas from metadata args storage (collected from decorators)\n        if (this.entityClasses && this.entityClasses.length) {\n            getFromContainer(EntityMetadataBuilder)\n                .buildFromMetadataArgsStorage(this.driver, lazyRelationsWrapper, namingStrategy, this.entityClasses)\n                .forEach(metadata => {\n                    this.entityMetadatas.push(metadata);\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\n                });\n        }\n\n        // build entity metadatas from given entity schemas\n        if (this.entitySchemas && this.entitySchemas.length) {\n            getFromContainer(EntityMetadataBuilder)\n                .buildFromSchemas(this.driver, lazyRelationsWrapper, namingStrategy, this.entitySchemas)\n                .forEach(metadata => {\n                    this.entityMetadatas.push(metadata);\n                    this.repositoryAggregators.push(new RepositoryAggregator(this, metadata));\n                });\n        }\n    }\n\n    /**\n     * Creates a naming strategy to be used for this connection.\n     */\n    protected createNamingStrategy(): NamingStrategyInterface {\n\n        // if naming strategies are not loaded, or used naming strategy is not set then use default naming strategy\n        if (!this.namingStrategyClasses || !this.namingStrategyClasses.length || !this.usedNamingStrategy)\n            return getFromContainer(DefaultNamingStrategy);\n\n        // try to find used naming strategy in the list of loaded naming strategies\n        const namingMetadata = getMetadataArgsStorage()\n            .namingStrategies\n            .filterByTargets(this.namingStrategyClasses)\n            .toArray()\n            .find(strategy => {\n                if (typeof this.usedNamingStrategy === \"string\") {\n                    return strategy.name === this.usedNamingStrategy;\n                } else {\n                    return strategy.target === this.usedNamingStrategy;\n                }\n            });\n\n        // throw an error if not found\n        if (!namingMetadata)\n            throw new NamingStrategyNotFoundError(this.usedNamingStrategy, this.name);\n\n        // initialize a naming strategy instance\n        return getFromContainer<NamingStrategyInterface>(namingMetadata.target);\n    }\n\n    /**\n     * Creates a new default entity manager without single connection setup.\n     */\n    protected createEntityManager() {\n        return new EntityManager(this);\n    }\n\n    /**\n     * Creates a new entity broadcaster using in this connection.\n     */\n    protected createBroadcaster() {\n        return new Broadcaster(this, this.entitySubscribers, this.entityListeners);\n    }\n\n    /**\n     * Creates a schema builder used to build a database schema for the entities of the current connection.\n     */\n    protected createSchemaBuilder() {\n        return new SchemaBuilder(this.driver, this.logger, this.entityMetadatas);\n    }\n\n    /**\n     * Creates a lazy relations wrapper.\n     */\n    protected createLazyRelationsWrapper() {\n        return new LazyRelationsWrapper(this);\n    }\n\n}","/**\n * Thrown when consumer tries to get connection that does not exist.\n */\nexport class ConnectionNotFoundError extends Error {\n    name = \"ConnectionNotFoundError\";\n\n    constructor(name: string) {\n        super();\n        this.message = `Connection \"${name}\" was not found.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {Logger} from \"../../logger/Logger\";\nimport {MysqlDriver} from \"./MysqlDriver\";\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class MysqlQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    protected isReleased = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected databaseConnection: DatabaseConnection,\n                protected driver: MysqlDriver,\n                protected logger: Logger) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     * You cannot use this class's methods after its released.\n     */\n    release(): Promise<void> {\n        if (this.databaseConnection.releaseCallback) {\n            this.isReleased = true;\n            return this.databaseConnection.releaseCallback();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        await this.beginTransaction();\n        try {\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            await this.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.release();\n        }\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async beginTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.databaseConnection.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.databaseConnection.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean {\n        return this.databaseConnection.isTransactionActive;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise((ok, fail) => {\n            this.logger.logQuery(query, parameters);\n            this.databaseConnection.connection.query(query, parameters, (err: any, result: any) => {\n                if (err) {\n                    this.logger.logFailedQuery(query, parameters);\n                    this.logger.logQueryError(err);\n                    return fail(err);\n                }\n\n                ok(result);\n            });\n        });\n    }\n\n    /**\n     * Insert a new row with given values into given table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const parameters = keys.map(key => keyValues[key]);\n        const sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`;\n        const result = await this.query(sql, parameters);\n        return generatedColumn ? result.insertId : undefined;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions).join(\" AND \");\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let sql = \"\";\n        if (hasLevel) {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n        const tablesSql      = `SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql     = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}'`;\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql)\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n            const primaryKeys: ObjectLiteral[] = await this.query(`SHOW INDEX FROM \\`${dbTable[\"TABLE_NAME\"]}\\` WHERE Key_name = 'PRIMARY'`);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = dbColumn[\"COLUMN_TYPE\"].toLowerCase();\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    columnSchema.isPrimary = dbColumn[\"COLUMN_KEY\"].indexOf(\"PRI\") !== -1;\n                    columnSchema.isUnique = dbColumn[\"COLUMN_KEY\"].indexOf(\"UNI\") !== -1;\n                    columnSchema.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\n                    columnSchema.comment = dbColumn[\"COLUMN_COMMENT\"];\n                    return columnSchema;\n                });\n\n            // create primary keys\n            tableSchema.primaryKeys = primaryKeys.map(primaryKey => {\n                return new PrimaryKeySchema(primaryKey[\"Key_name\"], primaryKey[\"Column_name\"]);\n            });\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbForeignKeys\n                .filter(dbForeignKey => dbForeignKey[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"TABLE_NAME\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n                })\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const currentDbIndices = dbIndices.filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName);\n                    const columnNames = currentDbIndices.map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n\n                    // find a special index - unique index and\n                    if (currentDbIndices.length === 1 && currentDbIndices[0][\"NON_UNIQUE\"] === 0) {\n                        const column = tableSchema.columns.find(column => column.name === currentDbIndices[0][\"INDEX_NAME\"] && column.name === currentDbIndices[0][\"COLUMN_NAME\"]);\n                        if (column) {\n                            column.isUnique = true;\n                            return;\n                        }\n                    }\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\n                })\n                .filter(index => !!index) as IndexSchema[]; // remove empty returns\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table schema and column schemas inside it.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\n        let sql = `CREATE TABLE \\`${table.name}\\` (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\\`${column.name}\\``).join(\", \")})`;\n        sql += `) ENGINE=InnoDB;`; // todo: remove engine from here\n\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '${this.dbName}' AND TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \\`${tableName}\\` ADD ${this.buildCreateColumnSql(column, false)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (newColumn.isUnique === false && oldColumn.isUnique === true)\n            await this.query(`ALTER TABLE \\`${tableSchema.name}\\` DROP INDEX \\`${oldColumn.name}\\``);\n\n        return this.query(`ALTER TABLE \\`${tableSchema.name}\\` CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, oldColumn.isPrimary)}`);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP \\`${columnName}\\``);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(tableSchema: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!tableSchema.hasGeneratedColumn)\n            await this.query(`ALTER TABLE ${tableSchema.name} DROP PRIMARY KEY`);\n\n        const primaryColumnNames = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated).map(column => \"`\" + column.name + \"`\");\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE ${tableSchema.name} ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => \"`\" + column + \"`\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"`\" + column + \"`\").join(\",\");\n        let sql = `ALTER TABLE ${tableName} ADD CONSTRAINT \\`${foreignKey.name}\\` ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \\`${foreignKey.referencedTableName}\\`(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        return this.query(`ALTER TABLE \\`${tableName}\\` DROP FOREIGN KEY \\`${foreignKey.name}\\``);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columns = index.columnNames.map(columnName => \"`\" + columnName + \"`\").join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \\`${index.name}\\` ON \\`${tableName}\\`(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const sql = `ALTER TABLE \\`${tableName}\\` DROP INDEX \\`${indexName}\\``;\n        await this.query(sql);\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }) {\n\n        switch (typeOptions.type) {\n            case \"string\":\n                return \"varchar(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\n            case \"text\":\n                return \"text\";\n            case \"boolean\":\n                return \"tinyint(1)\";\n            case \"integer\":\n            case \"int\":\n                return \"int(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\n            case \"smallint\":\n                return \"smallint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\n            case \"bigint\":\n                return \"bigint(\" + (typeOptions.length ? typeOptions.length : 11) + \")\";\n            case \"float\":\n                return \"float\";\n            case \"double\":\n            case \"number\":\n                return \"double\";\n            case \"decimal\":\n                if (typeOptions.precision && typeOptions.scale) {\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\n\n                } else if (typeOptions.scale) {\n                    return `decimal(${typeOptions.scale})`;\n\n                } else if (typeOptions.precision) {\n                    return `decimal(${typeOptions.precision})`;\n\n                } else {\n                    return \"decimal\";\n\n                }\n            case \"date\":\n                return \"date\";\n            case \"time\":\n                return \"time\";\n            case \"datetime\":\n                return \"datetime\";\n            case \"json\":\n                return \"text\";\n            case \"simple_array\":\n                return typeOptions.length ? \"varchar(\" + typeOptions.length + \")\" : \"text\";\n        }\n\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"MySQL/MariaDB\");\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\n\n        if (typeof columnMetadataValue === \"number\")\n            return columnMetadataValue === parseInt(databaseValue);\n        if (typeof columnMetadataValue === \"boolean\")\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        if (typeof columnMetadataValue === \"function\")\n            return columnMetadataValue() === databaseValue;\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=?\");\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\n        let c = \"`\" + column.name + \"` \" + column.type;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated && column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTO_INCREMENT\";\n        if (column.comment)\n            c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            if (typeof column.default === \"number\") {\n                c += \" DEFAULT \" + column.default + \"\";\n            } else if (typeof column.default === \"boolean\") {\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\n            } else if (typeof column.default === \"function\") {\n                c += \" DEFAULT \" + column.default() + \"\";\n            } else if (typeof column.default === \"string\") {\n                c += \" DEFAULT '\" + column.default + \"'\";\n            } else {\n                c += \" DEFAULT \" + column.default + \"\";\n            }\n        }\n        return c;\n    }\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {Logger} from \"../../logger/Logger\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class MysqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Mysql library.\n     */\n    protected mysql: any;\n\n    /**\n     * Connection to mysql database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Mysql pool.\n     */\n    protected pool: any;\n\n    /**\n     * Pool of database connections.\n     */\n    protected databaseConnectionPool: DatabaseConnection[] = [];\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DriverOptions, logger: Logger, mysql?: any) {\n\n        this.options = DriverUtils.buildDriverOptions(options);\n        this.logger = logger;\n        this.mysql = mysql;\n\n        // validate options to make sure everything is set\n        if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)))\n            throw new DriverOptionNotSetError(\"socketPath and host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // if mysql package instance was not set explicitly then try to load it\n        if (!mysql)\n            this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            host: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        if (this.options.usePool === undefined || this.options.usePool === true) {\n            this.pool = this.mysql.createPool(options);\n            return Promise.resolve();\n\n        } else {\n            return new Promise<void>((ok, fail) => {\n                const connection = this.mysql.createConnection(options);\n                this.databaseConnection = {\n                    id: 1,\n                    connection: connection,\n                    isTransactionActive: false\n                };\n                this.databaseConnection.connection.connect((err: any) => err ? fail(err) : ok());\n            });\n        }\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.databaseConnection && !this.pool)\n            throw new ConnectionIsNotSetError(\"mysql\");\n\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            // if pooling is used, then disconnect from it\n            if (this.pool) {\n                this.pool.end(handler);\n                this.pool = undefined;\n                this.databaseConnectionPool = [];\n            }\n\n            // if single connection is opened, then close it\n            if (this.databaseConnection) {\n                this.databaseConnection.connection.end(handler);\n                this.databaseConnection = undefined;\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection && !this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new MysqlQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            driver: this.mysql,\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\n            pool: this.pool\n        };\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return \"?\";\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return \"`\" + aliasName + \"`\";\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return \"`\" + tableName + \"`\";\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (columnMetadata.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n                return JSON.parse(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n\n        if (this.pool) {\n            return new Promise((ok, fail) => {\n                this.pool.getConnection((err: any, connection: any) => {\n                    if (err)\n                        return fail(err);\n\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\n                    if (!dbConnection) {\n                        dbConnection = {\n                            id: this.databaseConnectionPool.length,\n                            connection: connection,\n                            isTransactionActive: false\n                        };\n                        dbConnection.releaseCallback = () => {\n                            if (this.pool && dbConnection) {\n                                connection.release();\n                                this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\n                            }\n                            return Promise.resolve();\n                        };\n                        this.databaseConnectionPool.push(dbConnection);\n                    }\n                    ok(dbConnection);\n                });\n            });\n        }\n\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"mysql\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\n\n        } catch (e) {\n            try {\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\n            }\n        }\n    }\n\n}","import {DriverOptions} from \"../driver/DriverOptions\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {LoggerOptions} from \"../logger/LoggerOptions\";\n\n/**\n * ConnectionOptions is an interface with settings and options for specific connection.\n * Options contain database and other connection-related settings.\n * Consumer must provide connection options for each of your connections.\n */\nexport interface ConnectionOptions {\n\n    /**\n     * Database options of this connection.\n     */\n    readonly driver: DriverOptions;\n\n    /**\n     * Connection name. If connection name is not given then it will be called \"default\".\n     * Different connections must have different names.\n     */\n    readonly name?: string;\n\n    /**\n     * Name of the naming strategy or target class of the naming strategy to be used for this connection.\n     */\n    readonly usedNamingStrategy?: string|Function;\n\n    /**\n     * Entities to be loaded for this connection.\n     * Accepts both entity classes and directories where from entities need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly entities?: Function[]|string[];\n\n    /**\n     * Subscribers to be loaded for this connection.\n     * Accepts both subscriber classes and directories where from subscribers need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly subscribers?: Function[]|string[];\n\n    /**\n     * Naming strategies to be loaded for this connection.\n     * Accepts both naming strategy classes and directories where from naming strategies need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly namingStrategies?: Function[]|string[];\n\n    /**\n     * Entity schemas to be loaded for this connection.\n     * Accepts both entity schema classes and directories where from entity schemas need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly entitySchemas?: EntitySchema[]|string[];\n\n    /**\n     * Migrations to be loaded for this connection.\n     * Accepts both migration classes and directories where from migrations need to be loaded.\n     * Directories support glob patterns.\n     */\n    readonly migrations?: Function[]|string[];\n\n    /**\n     * Logging options.\n     */\n    readonly logging?: LoggerOptions;\n\n    /**\n     * Drops the schema each time connection is being established.\n     * Be careful with this option and don't use this in production - otherwise you'll loose all production data.\n     * This option is useful during debug and development.\n     */\n    readonly dropSchemaOnConnection?: boolean;\n\n    /**\n     * Indicates if database schema should be auto created on every application launch.\n     * Be careful with this option and don't use this in production - otherwise you can loose production data.\n     * This option is useful during debug and development.\n     * Alternative to it, you can use CLI and run schema:sync command.\n     */\n    readonly autoSchemaSync?: boolean;\n\n    /**\n     * Indicates if migrations should be auto run on every application launch.\n     * Alternative to it, you can use CLI and run migration:create command.\n     */\n    readonly autoMigrationsRun?: boolean;\n\n    /**\n     * Environment in which connection will run.\n     * Current environment is determined from the environment NODE_ENV variable's value.\n     * For example, if NODE_ENV is \"test\" and this property is set to \"test\",\n     * then this connection will be created. On any other NODE_ENV value it will be skipped.\n     * This option is specific to the configuration in the ormconfig.json file.\n     */\n    readonly environment?: string;\n\n    /**\n     * CLI settings.\n     */\n    readonly cli?: {\n\n        /**\n         * Directory where entities should be created by default.\n         */\n        readonly entitiesDir?: string;\n\n        /**\n         * Directory where migrations should be created by default.\n         */\n        readonly migrationsDir?: string;\n\n        /**\n         * Directory where subscribers should be created by default.\n         */\n        readonly subscribersDir?: string;\n\n    };\n\n}","/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nexport class MissingDriverError extends Error {\n    name = \"MissingDriverError\";\n\n    constructor(driverType: string) {\n        super();\n        this.message = `Wrong driver ${driverType} given. Supported drivers are: \"mysql\", \"postgres\", \"mssql\", \"oracle\", \"mariadb\", \"sqlite\".`;\n        this.stack = new Error().stack;\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {Logger} from \"../../logger/Logger\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {PostgresDriver} from \"./PostgresDriver\";\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class PostgresQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    protected isReleased = false;\n\n    private schemaName: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected databaseConnection: DatabaseConnection,\n                protected driver: PostgresDriver,\n                protected logger: Logger) {\n        this.schemaName = driver.schemaName || \"public\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     */\n    release(): Promise<void> {\n        if (this.databaseConnection.releaseCallback) {\n            this.isReleased = true;\n            return this.databaseConnection.releaseCallback();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        await this.beginTransaction();\n        try {\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname = '${this.schemaName}'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            await this.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.release();\n        }\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async beginTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        if (this.databaseConnection.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.databaseConnection.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean {\n        return this.databaseConnection.isTransactionActive;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // console.log(\"query: \", query);\n        // console.log(\"parameters: \", parameters);\n        return new Promise<any[]>((ok, fail) => {\n            this.logger.logQuery(query, parameters);\n            this.databaseConnection.connection.query(query, parameters, (err: any, result: any) => {\n                if (err) {\n                    this.logger.logFailedQuery(query, parameters);\n                    this.logger.logQueryError(err);\n                    fail(err);\n                } else {\n                    ok(result.rows);\n                }\n            });\n        });\n    }\n\n    /**\n     * Insert a new row into given table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\n        const sql = columns.length > 0\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values}) ${ generatedColumn ? \" RETURNING \" + this.driver.escapeColumnName(generatedColumn.name) : \"\" }`\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES ${ generatedColumn ? \" RETURNING \" + this.driver.escapeColumnName(generatedColumn.name) : \"\" }`;\n        const parameters = keys.map(key => keyValues[key]);\n        const result: ObjectLiteral[] = await this.query(sql, parameters);\n        if (generatedColumn)\n            return result[0][generatedColumn.name];\n\n        return result;\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql      = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name IN (${tableNamesString})`;\n        const columnsSql     = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}'`;\n        const indicesSql     = `SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name  FROM pg_class t, pg_class i, pg_index ix, pg_attribute a\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (${tableNamesString}) ORDER BY t.relname, i.relname`;\n        const foreignKeysSql = `SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND constraint_type = 'FOREIGN KEY'`;\n        const uniqueKeysSql  = `SELECT * FROM information_schema.table_constraints WHERE table_catalog = '${this.dbName}' AND constraint_type = 'UNIQUE'`;\n        const primaryKeysSql = `SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\nwhere constraint_type = 'PRIMARY KEY' and tc.table_catalog = '${this.dbName}'`;\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbUniqueKeys, primaryKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(uniqueKeysSql),\n            this.query(primaryKeysSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return dbTables.map(dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"table_name\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"table_name\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const columnType = dbColumn[\"data_type\"].toLowerCase() + (dbColumn[\"character_maximum_length\"] !== undefined && dbColumn[\"character_maximum_length\"] !== null ? (\"(\" + dbColumn[\"character_maximum_length\"] + \")\") : \"\");\n                    const isGenerated = dbColumn[\"column_default\"] === `nextval('${dbColumn[\"table_name\"]}_id_seq'::regclass)` \n                        || dbColumn[\"column_default\"] === `nextval('\"${dbColumn[\"table_name\"]}_id_seq\"'::regclass)` \n                        || /^uuid\\_generate\\_v\\d\\(\\)/.test(dbColumn[\"column_default\"]);\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"column_name\"];\n                    columnSchema.type = columnType;\n                    columnSchema.default = dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined ? dbColumn[\"column_default\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                    // columnSchema.isPrimary = dbColumn[\"column_key\"].indexOf(\"PRI\") !== -1;\n                    columnSchema.isGenerated = isGenerated;\n                    columnSchema.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    columnSchema.isUnique = !!dbUniqueKeys.find(key => key[\"constraint_name\"] ===  `uk_${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}`);\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = primaryKeys\n                .filter(primaryKey => primaryKey[\"table_name\"] === tableSchema.name)\n                .map(primaryKey => new PrimaryKeySchema(primaryKey[\"constraint_name\"], primaryKey[\"column_name\"]));\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = dbForeignKeys\n                .filter(dbForeignKey => dbForeignKey[\"table_name\"] === tableSchema.name)\n                .map(dbForeignKey => new ForeignKeySchema(dbForeignKey[\"constraint_name\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // create unique key schemas from the loaded indices\n            /*tableSchema.uniqueKeys = dbUniqueKeys\n                .filter(dbUniqueKey => dbUniqueKey[\"table_name\"] === tableSchema.name)\n                .map(dbUniqueKey => {\n                    return new UniqueKeySchema(dbUniqueKey[\"TABLE_NAME\"], dbUniqueKey[\"CONSTRAINT_NAME\"], [/!* todo *!/]);\n                });*/\n\n            // create index schemas from the loaded indices\n            tableSchema.indices = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"table_name\"] === tableSchema.name &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"index_name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"index_name\"])) &&\n                        (!dbUniqueKeys.find(key => key[\"constraint_name\"] === dbIndex[\"index_name\"]));\n                })\n                .map(dbIndex => dbIndex[\"index_name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(dbIndexName => {\n                    const columnNames = dbIndices\n                        .filter(dbIndex => dbIndex[\"table_name\"] === tableSchema.name && dbIndex[\"index_name\"] === dbIndexName)\n                        .map(dbIndex => dbIndex[\"column_name\"]);\n\n                    return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\n                });\n\n            return tableSchema;\n        });\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM information_schema.tables WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\n        let sql = `CREATE SCHEMA IF NOT EXISTS \"${this.schemaName}\";CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        sql += table.columns\n            .filter(column => column.isUnique)\n            .map(column => `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`)\n            .join(\" \");\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT * FROM information_schema.columns WHERE table_catalog = '${this.dbName}' AND table_schema = '${this.schemaName}' AND table_name = '${tableName}' AND column_name = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column, false)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (oldColumn.type !== newColumn.type ||\n            oldColumn.name !== newColumn.name) {\n\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\n            if (oldColumn.type !== newColumn.type) {\n                sql += ` TYPE ${newColumn.type}`;\n            }\n            if (oldColumn.name !== newColumn.name) { // todo: make rename in a separate query too\n                sql += ` RENAME TO ` + newColumn.name;\n            }\n            await this.query(sql);\n        }\n\n        if (oldColumn.isNullable !== newColumn.isNullable) {\n            let sql = `ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\"`;\n            if (newColumn.isNullable) {\n                sql += ` DROP NOT NULL`;\n            } else {\n                sql += ` SET NOT NULL`;\n            }\n            await this.query(sql);\n        }\n\n        // update sequence generation\n        if (oldColumn.isGenerated !== newColumn.isGenerated) {\n            if (!oldColumn.isGenerated && newColumn.type !== \"uuid\") {\n                await this.query(`CREATE SEQUENCE \"${tableSchema.name}_id_seq\" OWNED BY \"${tableSchema.name}\".\"${oldColumn.name}\"`);\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT nextval('\"${tableSchema.name}_id_seq\"')`);\n            } else {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`);\n                await this.query(`DROP SEQUENCE \"${tableSchema.name}_id_seq\"`);\n            }\n        }\n\n        if (oldColumn.comment !== newColumn.comment) {\n            await this.query(`COMMENT ON COLUMN \"${tableSchema.name}\".\"${oldColumn.name}\" is '${newColumn.comment}'`);\n        }\n\n        if (oldColumn.isUnique !== newColumn.isUnique) {\n            if (newColumn.isUnique === true) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" ADD CONSTRAINT \"uk_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\n\n            } else if (newColumn.isUnique === false) {\n                await this.query(`ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"uk_${newColumn.name}\"`);\n\n            }\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\n        return this.query(`ALTER TABLE \"${tableName}\" DROP \"${columnName}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => `\"${primaryKey.columnName}\"`);\n        await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT IF EXISTS \"${dbTable.name}_pkey\"`);\n        await this.query(`DROP INDEX IF EXISTS \"${dbTable.name}_pkey\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (\"${foreignKey.columnNames.join(\"\\\", \\\"\")}\") ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(\"${foreignKey.referencedColumnNames.join(\"\\\", \\\"\")}\")`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string, isGenerated: boolean = false): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (isGenerated) {\n            await this.query(`ALTER SEQUENCE \"${tableName}_id_seq\" OWNED BY NONE`);\n        }\n\n        const sql = `DROP INDEX \"${indexName}\"`; // todo: make sure DROP INDEX should not be used here\n        await this.query(sql);\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }): string {\n        switch (typeOptions.type) {\n            case \"string\":\n                return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\n            case \"text\":\n                return \"text\";\n            case \"boolean\":\n                return \"boolean\";\n            case \"integer\":\n            case \"int\":\n                return \"integer\";\n            case \"smallint\":\n                return \"smallint\";\n            case \"bigint\":\n                return \"bigint\";\n            case \"float\":\n                return \"real\";\n            case \"double\":\n            case \"number\":\n                return \"double precision\";\n            case \"decimal\":\n                if (typeOptions.precision && typeOptions.scale) {\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\n\n                } else if (typeOptions.scale) {\n                    return `decimal(${typeOptions.scale})`;\n\n                } else if (typeOptions.precision) {\n                    return `decimal(${typeOptions.precision})`;\n\n                } else {\n                    return \"decimal\";\n\n                }\n            case \"date\":\n                return \"date\";\n            case \"time\":\n                if (typeOptions.timezone) {\n                    return \"time with time zone\";\n                } else {\n                    return \"time without time zone\";\n                }\n            case \"datetime\":\n                if (typeOptions.timezone) {\n                    return \"timestamp with time zone\";\n                } else {\n                    return \"timestamp without time zone\";\n                }\n            case \"json\":\n                return \"json\";\n            case \"jsonb\":\n                return \"jsonb\";\n            case \"simple_array\":\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\n            case \"uuid\":\n                return \"uuid\";\n        }\n\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Postgres\");\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\n\n        if (typeof columnMetadataValue === \"number\")\n            return columnMetadataValue === parseInt(databaseValue);\n        if (typeof columnMetadataValue === \"boolean\")\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        if (typeof columnMetadataValue === \"function\")\n            return columnMetadataValue() === databaseValue;\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema, skipPrimary: boolean) {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column.isGenerated === true && column.type !== \"uuid\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" SERIAL\";\n        if (!column.isGenerated || column.type === \"uuid\")\n            c += \" \" + column.type;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated)\n            c += \" PRIMARY KEY\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            if (typeof column.default === \"number\") {\n                c += \" DEFAULT \" + column.default + \"\";\n            } else if (typeof column.default === \"boolean\") {\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\n            } else if (typeof column.default === \"function\") {\n                c += \" DEFAULT \" + column.default() + \"\";\n            } else if (typeof column.default === \"string\") {\n                c += \" DEFAULT '\" + column.default + \"'\";\n            } else {\n                c += \" DEFAULT \" + column.default + \"\";\n            }\n        }\n        if (column.isGenerated && column.type === \"uuid\" && !column.default)\n            c += \" DEFAULT uuid_generate_v4()\";\n        return c;\n    }\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Logger} from \"../../logger/Logger\";\nimport {PostgresQueryRunner} from \"./PostgresQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n// todo(tests):\n// check connection with url\n// check if any of required option is not set exception to be thrown\n//\n\n/**\n * Organizes communication with PostgreSQL DBMS.\n */\nexport class PostgresDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Postgres library.\n     */\n    protected postgres: any;\n\n    /**\n     * Connection to postgres database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Postgres pool.\n     */\n    protected pool: any;\n\n    /**\n     * Pool of database connections.\n     */\n    protected databaseConnectionPool: DatabaseConnection[] = [];\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    /**\n     * Schema name. (Only used in Postgres)\n     * default: \"public\"\n     */\n    public schemaName?: string;\n    \n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOptions: DriverOptions, logger: Logger, postgres?: any) {\n\n        this.options = DriverUtils.buildDriverOptions(connectionOptions);\n        this.logger = logger;\n        this.postgres = postgres;\n        this.schemaName = connectionOptions.schemaName || \"public\";\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // if postgres package instance was not set explicitly then try to load it\n        if (!postgres)\n            this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            host: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        if (this.options.usePool === undefined || this.options.usePool === true) {\n            this.pool = new this.postgres.Pool(options);\n            return Promise.resolve();\n\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection = {\n                    id: 1,\n                    connection: new this.postgres.Client(options),\n                    isTransactionActive: false\n                };\n                this.databaseConnection.connection.connect((err: any) => {\n                    if (err) {\n                        fail(err);\n                    } else {\n                        this.databaseConnection && this.databaseConnection.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any, result: any) => {\n                            if (err) {\n                                this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\n                                this.logger.logQueryError(err);\n                                fail(err);\n                            } else {\n                                ok();\n                            }\n                        });\n                    }\n                });\n            });\n        }\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.databaseConnection && !this.pool)\n            throw new ConnectionIsNotSetError(\"postgres\");\n\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            if (this.databaseConnection) {\n                this.databaseConnection.connection.end(/*handler*/); // todo: check if it can emit errors\n                this.databaseConnection = undefined;\n            }\n\n            if (this.pool) {\n                this.databaseConnectionPool.forEach(dbConnection => {\n                    if (dbConnection && dbConnection.releaseCallback) {\n                        dbConnection.releaseCallback();\n                    }\n                });\n                this.pool.end(handler);\n                this.pool = undefined;\n                this.databaseConnectionPool = [];\n            }\n\n            ok();\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection && !this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"postgres\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new PostgresQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            driver: this.postgres,\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\n            pool: this.pool\n        };\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, column: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (column.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (column.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n            case ColumnTypes.JSONB:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n            case ColumnTypes.JSONB:\n                // pg(pg-types) have done JSON.parse conversion\n                // https://github.com/brianc/node-pg-types/blob/ed2d0e36e33217b34530727a98d20b325389e73a/lib/textParsers.js#L170\n                return value;\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const builtParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            } else {\n                builtParameters.push(value);\n            }\n            return \"$\" + builtParameters.length;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return \"\\\"\" + aliasName + \"\\\"\";\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return \"\\\"\" + tableName + \"\\\"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n        if (this.pool) {\n            return new Promise((ok, fail) => {\n                this.pool.connect((err: any, connection: any, release: Function) => {\n                    if (err) {\n                        fail(err);\n                        return;\n                    }\n\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\n                    if (!dbConnection) {\n                        dbConnection = {\n                            id: this.databaseConnectionPool.length,\n                            connection: connection,\n                            isTransactionActive: false\n                        };\n                        this.databaseConnectionPool.push(dbConnection);\n                    }\n                    dbConnection.releaseCallback = () => {\n                        if (dbConnection) {\n                            this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\n                        }\n                        release();\n                        return Promise.resolve();\n                    };\n                    dbConnection.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any) => {\n                        if (err) {\n                            this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\n                            this.logger.logQueryError(err);\n                            fail(err);\n                        } else {\n                            ok(dbConnection);\n                        }\n                    });\n                });\n            });\n        }\n\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"postgres\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.postgres = PlatformTools.load(\"pg\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    }\n\n}","/**\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\n */\nexport class AlreadyHasActiveConnectionError extends Error {\n    name = \"AlreadyHasActiveConnectionError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot create a new connection named \"${connectionName}\", because connection with such name ` +\n            `already exist and it now has an active connection session.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {Logger} from \"../../logger/Logger\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {SqliteDriver} from \"./SqliteDriver\";\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class SqliteQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    protected isReleased = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected databaseConnection: DatabaseConnection,\n                protected driver: SqliteDriver,\n                protected logger: Logger) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     */\n    release(): Promise<void> {\n        if (this.databaseConnection.releaseCallback) {\n            this.isReleased = true;\n            return this.databaseConnection.releaseCallback();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        await this.query(`PRAGMA foreign_keys = OFF;`);\n        await this.beginTransaction();\n        try {\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            await this.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.release();\n            await this.query(`PRAGMA foreign_keys = ON;`);\n        }\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async beginTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        if (this.databaseConnection.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.databaseConnection.isTransactionActive = true;\n        await this.query(\"BEGIN TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean {\n        return this.databaseConnection.isTransactionActive;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>((ok, fail) => {\n            this.logger.logQuery(query, parameters);\n            this.databaseConnection.connection.all(query, parameters, (err: any, result: any) => {\n                if (err) {\n                    this.logger.logFailedQuery(query, parameters);\n                    this.logger.logQueryError(err);\n                    fail(err);\n                } else {\n                    ok(result);\n                }\n            });\n        });\n    }\n\n    /**\n     * Insert a new row into given table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\n        const sql = columns.length > 0 ? (`INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`) : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<any[]>((ok, fail) => {\n            this.logger.logQuery(sql, parameters);\n            const __this = this;\n            this.databaseConnection.connection.run(sql, parameters, function (err: any): void {\n                if (err) {\n                    __this.logger.logFailedQuery(sql, parameters);\n                    __this.logger.logQueryError(err);\n                    fail(err);\n                } else {\n                    if (generatedColumn)\n                        return ok(this[\"lastID\"]);\n\n                    ok();\n                }\n            });\n        });\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // if no tables given then no need to proceed\n\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n\n        // load tables, columns, indices and foreign keys\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables || !dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\n\n            // load columns and indices\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\n            ]);\n\n            // find column name with auto increment\n            let autoIncrementColumnName: string|undefined = undefined;\n            const tableSql: string = dbTable[\"sql\"];\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n\n                } else if (bracket !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                }\n            }\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns.map(dbColumn => {\n                const columnSchema = new ColumnSchema();\n                columnSchema.name = dbColumn[\"name\"];\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\n                columnSchema.comment = \"\"; // todo later\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                const columnForeignKeys = dbForeignKeys\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\n                    .map(foreignKey => {\n                        const keyName = this.driver.namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\n                    });\n                tableSchema.addForeignKeys(columnForeignKeys);\n                return columnSchema;\n            });\n\n            // create primary key schema\n            await Promise.all(dbIndices\n                .filter(index => index[\"origin\"] === \"pk\")\n                .map(async index => {\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n                    indexColumns.forEach(indexColumn => {\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\n                    });\n                }));\n\n            // create index schemas from the loaded indices\n            const indicesPromises = dbIndices\n                .filter(dbIndex => {\n                    return dbIndex[\"origin\"] !== \"pk\" &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\n                })\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async dbIndexName => {\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n\n                    // check if db index is generated by sqlite itself and has special use case\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\n                            // so we find and update the column\n                            indexColumns.forEach(columnName => {\n                                const column = tableSchema.columns.find(column => column.name === columnName);\n                                if (column)\n                                    column.isUnique = true;\n                            });\n                        }\n\n                        return Promise.resolve(undefined);\n\n                    } else {\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\n                    }\n                });\n\n            const indices = await Promise.all(indicesPromises);\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // skip columns with foreign keys, we will add them later\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\n        const columns: ObjectLiteral[] = await this.query(sql);\n        return !!columns.find(column => column[\"name\"] === columnName);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns([column]);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns(columns);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\n        return this.dropColumns(tableSchemaOrName as any, [columnSchemaOrName as any]);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const updatingTableSchema = tableSchema.clone();\n        const columns = (columnSchemasOrNames as any[]).map(columnSchemasOrName => {\n            if (typeof columnSchemasOrName === \"string\") {\n                const column = tableSchema.columns.find(column => column.name === columnSchemasOrName);\n                if (!column)\n                    throw new Error(`Cannot drop a column - column \"${columnSchemasOrName}\" was not found in the \"${tableSchema.name}\" table.`);\n\n                return column;\n\n            } else {\n                return columnSchemasOrName as ColumnSchema;\n            }\n        });\n        updatingTableSchema.removeColumns(columns);\n        return this.recreateTable(updatingTableSchema);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return this.recreateTable(dbTable);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.addForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.removeForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const sql = `DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }) {\n        switch (typeOptions.type) {\n            case \"string\":\n                return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\n            case \"text\":\n                return \"text\";\n            case \"boolean\":\n                return \"boolean\";\n            case \"integer\":\n            case \"int\":\n                return \"integer\";\n            case \"smallint\":\n                return \"smallint\";\n            case \"bigint\":\n                return \"bigint\";\n            case \"float\":\n                return \"real\";\n            case \"double\":\n            case \"number\":\n                return \"double precision\";\n            case \"decimal\":\n                if (typeOptions.precision && typeOptions.scale) {\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\n\n                } else if (typeOptions.scale) {\n                    return `decimal(${typeOptions.scale})`;\n\n                } else if (typeOptions.precision) {\n                    return `decimal(${typeOptions.precision})`;\n\n                } else {\n                    return \"decimal\";\n\n                }\n            case \"date\":\n                return \"date\";\n            case \"time\":\n                if (typeOptions.timezone) {\n                    return \"time with time zone\";\n                } else {\n                    return \"time without time zone\";\n                }\n            case \"datetime\":\n                if (typeOptions.timezone) {\n                    return \"timestamp with time zone\";\n                } else {\n                    return \"timestamp without time zone\";\n                }\n            case \"json\":\n                return \"json\";\n            case \"simple_array\":\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\n        }\n\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"SQLite\");\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\n\n        if (typeof columnMetadataValue === \"number\")\n            return columnMetadataValue === parseInt(databaseValue);\n        if (typeof columnMetadataValue === \"boolean\")\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        if (typeof columnMetadataValue === \"function\")\n            return columnMetadataValue() === databaseValue;\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM ${this.driver.escapeTableName(tableName)}`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema): string {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.normalizeType(column);\n        } else {\n            c += \" \" + column.type;\n        }\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" PRIMARY KEY AUTOINCREMENT\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            if (typeof column.default === \"number\") {\n                c += \" DEFAULT \" + column.default + \"\";\n            } else if (typeof column.default === \"boolean\") {\n                c += \" DEFAULT \" + (column.default === true ? \"1\" : \"0\") + \"\";\n            } else if (typeof column.default === \"function\") {\n                c += \" DEFAULT \" + column.default() + \"\";\n            } else if (typeof column.default === \"string\") {\n                c += \" DEFAULT '\" + column.default + \"'\";\n            } else {\n                c += \" DEFAULT \" + column.default + \"\";\n            }\n        }\n\n        return c;\n    }\n\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema, migrateData = true): Promise<void> {\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\n        // const createForeignKeys = options && options.createForeignKeys;\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\n\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\n        // if (options && options.createForeignKeys) {\n        tableSchema.foreignKeys.forEach(foreignKey => {\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\n        });\n\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\n\n        sql1 += \")\";\n\n        // todo: need also create uniques and indices?\n\n        // recreate a table with a temporary name\n        await this.query(sql1);\n\n        // we need only select data from old columns\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\n\n        // migrate all data from the table into temporary table\n        if (migrateData) {\n            const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\n            await this.query(sql2);\n        }\n\n        // drop old table\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\n        await this.query(sql3);\n\n        // rename temporary table\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\n        await this.query(sql4);\n\n        // also re-create indices\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\n    }\n\n    /**\n     * If given value is a table name then it loads its table schema representation from the database.\n     */\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\n        if (tableSchemaOrName instanceof TableSchema) {\n            return tableSchemaOrName;\n        } else {\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\n            if (!tableSchema)\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\n\n            return tableSchema;\n        }\n    }\n\n}\n","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Logger} from \"../../logger/Logger\";\nimport {SqliteQueryRunner} from \"./SqliteQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class SqliteDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * SQLite library.\n     */\n    protected sqlite: any;\n\n    /**\n     * Connection to SQLite database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOptions: DriverOptions, logger: Logger, sqlite?: any) {\n\n        this.options = connectionOptions;\n        this.logger = logger;\n        this.sqlite = sqlite;\n\n        // validate options to make sure everything is set\n        if (!this.options.storage)\n            throw new DriverOptionNotSetError(\"storage\");\n\n        // if sqlite package instance was not set explicitly then try to load it\n        if (!sqlite)\n            this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    connect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            const connection = new this.sqlite.Database(this.options.storage, (err: any) => {\n                if (err)\n                    return fail(err);\n\n                this.databaseConnection = {\n                    id: 1,\n                    connection: connection,\n                    isTransactionActive: false\n                };\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete to work with sqlite.\n                connection.run(`PRAGMA foreign_keys = ON;`, (err: any, result: any) => {\n                    ok();\n                });\n            });\n        });\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            if (!this.databaseConnection)\n                return fail(new ConnectionIsNotSetError(\"sqlite\"));\n            this.databaseConnection.connection.close(handler);\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection)\n            return Promise.reject(new ConnectionIsNotSetError(\"sqlite\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new SqliteQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            driver: this.sqlite,\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\n        };\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (columnMetadata.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n                return JSON.parse(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const builtParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            } else {\n                builtParameters.push(value);\n            }\n            return \"$\" + builtParameters.length;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return \"\\\"\" + aliasName + \"\\\"\";\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return \"\\\"\" + tableName + \"\\\"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"sqlite\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\n        }\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {Logger} from \"../../logger/Logger\";\nimport {OracleDriver} from \"./OracleDriver\";\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single mysql database connection.\n *\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\n */\nexport class OracleQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    protected isReleased = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected databaseConnection: DatabaseConnection,\n                protected driver: OracleDriver,\n                protected logger: Logger) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     * You cannot use this class's methods after its released.\n     */\n    release(): Promise<void> {\n        if (this.databaseConnection.releaseCallback) {\n            this.isReleased = true;\n            return this.databaseConnection.releaseCallback();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        await this.beginTransaction();\n        try {\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            await this.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.release();\n        }\n\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async beginTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.databaseConnection.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        // await this.query(\"START TRANSACTION\");\n        this.databaseConnection.isTransactionActive = true;\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean {\n        return this.databaseConnection.isTransactionActive;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise((ok, fail) => {\n            this.logger.logQuery(query, parameters);\n            const handler = (err: any, result: any) => {\n                if (err) {\n                    this.logger.logFailedQuery(query, parameters);\n                    this.logger.logQueryError(err);\n                    return fail(err);\n                }\n\n                ok(result.rows || result.outBinds);\n            };\n            const executionOptions = {\n                autoCommit: this.databaseConnection.isTransactionActive ? false : true\n            };\n            this.databaseConnection.connection.execute(query, parameters || {}, executionOptions, handler);\n        });\n    }\n\n    /**\n     * Insert a new row with given values into given table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\n        const values = keys.map(key => \":\" + key).join(\", \");\n        const parameters = keys.map(key => keyValues[key]);\n\n        const insertSql = columns.length > 0\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\n        if (generatedColumn) {\n            const sql2 = `declare lastId number; begin ${insertSql} returning \"id\" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;`;\n            const saveResult = await this.query(sql2, parameters.concat([\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.STRING, maxSize: 32767 },\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.NUMBER }\n            ]));\n            return parseInt(saveResult[0]);\n        } else {\n            return this.query(insertSql, parameters);\n        }\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions).join(\" AND \");\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let sql = \"\";\n        if (hasLevel) {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql      = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql     = `SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (${tableNamesString})`;\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\n        const uniqueKeysSql  = `SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = '${this.dbName}' AND CONSTRAINT_TYPE = 'UNIQUE'`;\n        const constraintsSql = `SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (${tableNamesString}) \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position`;\n        const [dbTables, dbColumns, /*dbIndices, dbForeignKeys, dbUniqueKeys, */constraints]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            // this.query(indicesSql),\n            // this.query(foreignKeysSql),\n            // this.query(uniqueKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return dbTables.map(dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const isPrimary = !!constraints\n                        .find(constraint => {\n                            return  constraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\" &&\n                                    constraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                        });\n\n                    let columnType = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (dbColumn[\"DATA_TYPE\"].toLowerCase() === \"varchar2\" && dbColumn[\"DATA_LENGTH\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_LENGTH\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null && dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \",\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(0,\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \")\";\n                    }\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = columnType;\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"NULLABLE\"] !== \"N\";\n                    columnSchema.isPrimary = isPrimary;\n                    columnSchema.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"; // todo\n                    columnSchema.comment = \"\"; // todo\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = constraints\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"P\")\n                .map(constraint => new PrimaryKeySchema(constraint[\"CONSTRAINT_NAME\"], constraint[\"COLUMN_NAME\"]));\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = constraints\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"R\")\n                .map(constraint => new ForeignKeySchema(constraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // console.log(tableSchema);\n\n            // create index schemas from the loaded indices\n            // tableSchema.indices = dbIndices\n            //     .filter(dbIndex => {\n            //         return  dbIndex[\"table_name\"] === tableSchema.name &&\n            //             (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n            //             (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n            //     })\n            //     .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n            //     .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n            //     .map(dbIndexName => {\n            //         const columnNames = dbIndices\n            //             .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\n            //             .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n            //\n            //         return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\n            //     });\n\n            return tableSchema;\n        });\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\n\n            if (newColumn.isGenerated) {\n                if (tableSchema.primaryKeys.length > 0 && oldColumn.isPrimary) {\n                    // console.log(tableSchema.primaryKeys);\n                    const dropPrimarySql = `ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"${tableSchema.primaryKeys[0].name}\"`;\n                    await this.query(dropPrimarySql);\n                }\n\n                // since modifying identity column is not supported yet, we need to recreate this column\n                const dropSql = `ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`;\n                await this.query(dropSql);\n\n                const createSql = `ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`;\n                await this.query(createSql);\n\n            } else {\n                const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" DROP IDENTITY`;\n                await this.query(sql);\n\n            }\n        }\n\n        if (newColumn.isNullable !== oldColumn.isNullable) {\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type} ${newColumn.isNullable ? \"NULL\" : \"NOT NULL\"}`;\n            await this.query(sql);\n\n        } else if (newColumn.type !== oldColumn.type) { // elseif is used because\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type}`;\n            await this.query(sql);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => \"\\\"\" + primaryKey.columnName + \"\\\"\");\n        // console.log(dbTable.primaryKeys);\n        if (dbTable.primaryKeys.length > 0 && dbTable.primaryKeys[0].name)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${dbTable.primaryKeys[0].name}\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\",\");\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columns = index.columnNames.map(columnName => \"\\\"\" + columnName + \"\\\"\").join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE\" : \"\"} INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const sql = `ALTER TABLE \"${tableName}\" DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }) {\n        switch (typeOptions.type) {\n            case \"string\":\n                return \"varchar2(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\n            case \"text\":\n                return \"clob\";\n            case \"boolean\":\n                return \"number(1)\";\n            case \"integer\":\n            case \"int\":\n                // if (column.isGenerated)\n                //     return `number(22)`;\n                if (typeOptions.precision && typeOptions.scale)\n                    return `number(${typeOptions.precision},${typeOptions.scale})`;\n                if (typeOptions.precision)\n                    return `number(${typeOptions.precision},0)`;\n                if (typeOptions.scale)\n                    return `number(0,${typeOptions.scale})`;\n\n                return \"number(10,0)\";\n            case \"smallint\":\n                return \"number(5)\";\n            case \"bigint\":\n                return \"number(20)\";\n            case \"float\":\n                if (typeOptions.precision && typeOptions.scale)\n                    return `float(${typeOptions.precision},${typeOptions.scale})`;\n                if (typeOptions.precision)\n                    return `float(${typeOptions.precision},0)`;\n                if (typeOptions.scale)\n                    return `float(0,${typeOptions.scale})`;\n\n                return `float(126)`;\n            case \"double\":\n            case \"number\":\n                return \"float(126)\";\n            case \"decimal\":\n                if (typeOptions.precision && typeOptions.scale) {\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\n\n                } else if (typeOptions.scale) {\n                    return `decimal(0,${typeOptions.scale})`;\n\n                } else if (typeOptions.precision) {\n                    return `decimal(${typeOptions.precision})`;\n\n                } else {\n                    return \"decimal\";\n                }\n            case \"date\":\n                return \"date\";\n            case \"time\":\n                return \"date\";\n            case \"datetime\":\n                return \"timestamp(0)\";\n            case \"json\":\n                return \"clob\";\n            case \"simple_array\":\n                return typeOptions.length ? \"varchar2(\" + typeOptions.length + \")\" : \"text\";\n        }\n\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Oracle\");\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\n\n        if (typeof columnMetadataValue === \"number\")\n            return columnMetadataValue === parseInt(databaseValue);\n        if (typeof columnMetadataValue === \"boolean\")\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        if (typeof columnMetadataValue === \"function\")\n            return columnMetadataValue() === databaseValue;\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=:\" + key);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema) {\n        let c = `\"${column.name}\" ` + column.type;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        // if (column.isPrimary === true && addPrimary)\n        //     c += \" PRIMARY KEY\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" GENERATED BY DEFAULT ON NULL AS IDENTITY\";\n        // if (column.comment) // todo: less priority, fix it later\n        //     c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            if (typeof column.default === \"number\") {\n                c += \" DEFAULT \" + column.default + \"\";\n            } else if (typeof column.default === \"boolean\") {\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\n            } else if (typeof column.default === \"function\") {\n                c += \" DEFAULT \" + column.default() + \"\";\n            } else if (typeof column.default === \"string\") {\n                c += \" DEFAULT '\" + column.default + \"'\";\n            } else {\n                c += \" DEFAULT \" + column.default + \"\";\n            }\n        }\n\n        return c;\n    }\n\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {Logger} from \"../../logger/Logger\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {OracleQueryRunner} from \"./OracleQueryRunner\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Organizes communication with Oracle DBMS.\n *\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\n */\nexport class OracleDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Oracle library.\n     */\n    oracle: any;\n\n    /**\n     * Connection to oracle database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Oracle pool.\n     */\n    protected pool: any;\n\n    /**\n     * Pool of database connections.\n     */\n    protected databaseConnectionPool: DatabaseConnection[] = [];\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DriverOptions, logger: Logger, oracle?: any) {\n\n        this.options = DriverUtils.buildDriverOptions(options, { useSid: true });\n        this.logger = logger;\n        this.oracle = oracle;\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.sid)\n            throw new DriverOptionNotSetError(\"sid\");\n\n        // if oracle package instance was not set explicitly then try to load it\n        if (!oracle)\n            this.loadDependencies();\n\n        this.oracle.outFormat = this.oracle.OBJECT;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            user: this.options.username,\n            password: this.options.password,\n            connectString: this.options.host + \":\" + this.options.port + \"/\" + this.options.sid,\n        }, this.options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        if (this.options.usePool === undefined || this.options.usePool === true) {\n            return new Promise<void>((ok, fail) => {\n                this.oracle.createPool(options, (err: any, pool: any) => {\n                    if (err)\n                        return fail(err);\n\n                    this.pool = pool;\n                    ok();\n                });\n            });\n\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.oracle.getConnection(options, (err: any, connection: any) => {\n                    if (err)\n                        return fail(err);\n\n                    this.databaseConnection = {\n                        id: 1,\n                        connection: connection,\n                        isTransactionActive: false\n                    };\n                    this.databaseConnection.connection.connect((err: any) => err ? fail(err) : ok());\n                });\n            });\n        }\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.databaseConnection && !this.pool)\n            throw new ConnectionIsNotSetError(\"oracle\");\n\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            // if pooling is used, then disconnect from it\n            if (this.pool) {\n                this.pool.close(handler);\n                this.pool = undefined;\n                this.databaseConnectionPool = [];\n            }\n\n            // if single connection is opened, then close it\n            if (this.databaseConnection) {\n                this.databaseConnection.connection.close(handler);\n                this.databaseConnection = undefined;\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection && !this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"oracle\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new OracleQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            driver: this.oracle,\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\n            pool: this.pool\n        };\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return \":\" + key;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return `\"${columnName}\"`; // \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return `\"${aliasName}\"`;\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return `\"${tableName}\"`;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (columnMetadata.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n                return JSON.parse(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n\n        if (this.pool) {\n            return new Promise((ok, fail) => {\n                this.pool.getConnection((err: any, connection: any) => {\n                    if (err)\n                        return fail(err);\n\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\n                    if (!dbConnection) {\n                        dbConnection = {\n                            id: this.databaseConnectionPool.length,\n                            connection: connection,\n                            isTransactionActive: false\n                        };\n                        dbConnection.releaseCallback = () => {\n                            return new Promise<void>((ok, fail) => {\n                                connection.close((err: any) => {\n                                    if (err)\n                                        return fail(err);\n\n                                    if (this.pool && dbConnection) {\n                                        this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\n                                    }\n                                    ok();\n                                });\n                            });\n                        };\n                        this.databaseConnectionPool.push(dbConnection);\n                    }\n                    ok(dbConnection);\n                });\n            });\n        }\n\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"oracle\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.oracle = PlatformTools.load(\"oracledb\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"Oracle\", \"oracledb\");\n        }\n    }\n\n}","/**\n * Thrown when connection is trying to be created automatically from connection options found in the ormconfig.json\n * or environment variables, but failed due to missing these configurations.\n */\nexport class CannotDetermineConnectionOptionsError extends Error {\n    name = \"CannotDetermineConnectionOptionsError\";\n\n    constructor() {\n        super();\n        this.message = `Cannot create connection, because connection options are missing. ` +\n            `You either need to explicitly pass connection options, either create a ormconfig.json with connection options ` +\n            `and \"default\" connection name, either to set proper environment variables. Also, if you are using environment-specific ` +\n            `configurations in your ormconfig.json make sure your are running under correct NODE_ENV.`;\n        this.stack = new Error().stack;\n    }\n\n}","import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {Logger} from \"../../logger/Logger\";\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {WebsqlDriver} from \"./WebsqlDriver\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single websql database connection.\n */\nexport class WebsqlQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    protected isReleased = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected databaseConnection: DatabaseConnection,\n                protected driver: WebsqlDriver,\n                protected logger: Logger) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     * You cannot use this class's methods after its released.\n     */\n    release(): Promise<void> {\n        if (this.databaseConnection.releaseCallback) {\n            this.isReleased = true;\n            return this.databaseConnection.releaseCallback();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // await this.query(`PRAGMA foreign_keys = OFF;`);\n        await this.beginTransaction();\n        try {\n            const selectDropsQuery = `select 'drop table ' || name || ';' as query from sqlite_master where type = 'table' and name != 'sqlite_sequence'`;\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            await this.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.release();\n            // await this.query(`PRAGMA foreign_keys = ON;`);\n        }\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async beginTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.databaseConnection.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        this.databaseConnection.isTransactionActive = true;\n        // await this.query(\"BEGIN TRANSACTION\");\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        // await this.query(\"COMMIT\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        // await this.query(\"ROLLBACK\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean {\n        return this.databaseConnection.isTransactionActive;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise((ok, fail) => {\n\n            this.logger.logQuery(query, parameters);\n            const db = this.databaseConnection.connection;\n            // todo: check if transaction is not active\n            db.transaction((tx: any) => {\n                tx.executeSql(query, parameters, (tx: any, result: any) => {\n                    const rows = Object\n                        .keys(result.rows)\n                        .filter(key => key !== \"length\")\n                        .map(key => result.rows[key]);\n                    ok(rows);\n\n                }, (tx: any, err: any) => {\n                    this.logger.logFailedQuery(query, parameters);\n                    this.logger.logQueryError(err);\n                    return fail(err);\n                });\n            });\n        });\n    }\n\n    /**\n     * Insert a new row into given table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\n        const sql = columns.length > 0 ? (`INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`) : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<any[]>((ok, fail) => {\n            this.logger.logQuery(sql, parameters);\n\n            const db = this.databaseConnection.connection;\n            // todo: check if transaction is not active\n            db.transaction((tx: any) => {\n                tx.executeSql(sql, parameters, (tx: any, result: any) => {\n                    if (generatedColumn)\n                        return ok(result[\"insertId\"]);\n                    ok();\n\n                }, (tx: any, err: any) => {\n                    this.logger.logFailedQuery(sql, parameters);\n                    this.logger.logQueryError(err);\n                    return fail(err);\n                });\n            });\n        });\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\n        const query = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(query, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let sql = \"\";\n        if (hasLevel) {\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\n                `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql = `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\n                `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${tableName} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // if no tables given then no need to proceed\n\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\n\n        // load tables, columns, indices and foreign keys\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM sqlite_master WHERE type = 'table' AND name IN (${tableNamesString})`);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables || !dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"name\"]);\n\n            // load columns and indices\n            /*const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\n            ]);\n\n            // find column name with auto increment\n            let autoIncrementColumnName: string|undefined = undefined;\n            const tableSql: string = dbTable[\"sql\"];\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                if (comma !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n\n                } else if (bracket !== -1) {\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                }\n            }\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns.map(dbColumn => {\n                const columnSchema = new ColumnSchema();\n                columnSchema.name = dbColumn[\"name\"];\n                columnSchema.type = dbColumn[\"type\"].toLowerCase();\n                columnSchema.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                columnSchema.isNullable = dbColumn[\"notnull\"] === 0;\n                columnSchema.isPrimary = dbColumn[\"pk\"] === 1;\n                columnSchema.comment = \"\"; // todo later\n                columnSchema.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                const columnForeignKeys = dbForeignKeys\n                    .filter(foreignKey => foreignKey[\"from\"] === dbColumn[\"name\"])\n                    .map(foreignKey => {\n                        const keyName = namingStrategy.foreignKeyName(dbTable[\"name\"], [foreignKey[\"from\"]], foreignKey[\"table\"], [foreignKey[\"to\"]]);\n                        return new ForeignKeySchema(keyName, [foreignKey[\"from\"]], [foreignKey[\"to\"]], foreignKey[\"table\"], foreignKey[\"on_delete\"]); // todo: how sqlite return from and to when they are arrays? (multiple column foreign keys)\n                    });\n                tableSchema.addForeignKeys(columnForeignKeys);\n                return columnSchema;\n            });\n\n            // create primary key schema\n            await Promise.all(dbIndices\n                .filter(index => index[\"origin\"] === \"pk\")\n                .map(async index => {\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${index[\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n                    indexColumns.forEach(indexColumn => {\n                        tableSchema.primaryKeys.push(new PrimaryKeySchema(index[\"name\"], indexColumn));\n                    });\n                }));\n\n            // create index schemas from the loaded indices\n            const indicesPromises = dbIndices\n                .filter(dbIndex => {\n                    return  dbIndex[\"origin\"] !== \"pk\" &&\n                        (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"name\"])) &&\n                        (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"name\"]));\n                })\n                .map(dbIndex => dbIndex[\"name\"])\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n                .map(async dbIndexName => {\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\n                    const indexColumns = indexInfos.map(indexInfo => indexInfo[\"name\"]);\n\n                    // check if db index is generated by sqlite itself and has special use case\n                    if (dbIndex![\"name\"].substr(0, \"sqlite_autoindex\".length) === \"sqlite_autoindex\") {\n                        if (dbIndex![\"unique\"] === 1) { // this means we have a special index generated for a column\n                            // so we find and update the column\n                            indexColumns.forEach(columnName => {\n                                const column = tableSchema.columns.find(column => column.name === columnName);\n                                if (column)\n                                    column.isUnique = true;\n                            });\n                        }\n\n                        return Promise.resolve(undefined);\n\n                    } else {\n                        return new IndexSchema(dbTable[\"name\"], dbIndex![\"name\"], indexColumns, dbIndex![\"unique\"] === \"1\");\n                    }\n                });\n\n            const indices = await Promise.all(indicesPromises);\n            tableSchema.indices = indices.filter(index => !!index) as IndexSchema[];*/\n\n            return tableSchema;\n        }));\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT * FROM sqlite_master WHERE type = 'table' AND name = ${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // skip columns with foreign keys, we will add them later\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generates a wrong schema\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\n        const columns: ObjectLiteral[] = await this.query(sql);\n        return !!columns.find(column => column[\"name\"] === columnName);\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns([column]);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const newTableSchema = tableSchema.clone();\n        newTableSchema.addColumns(columns);\n        await this.recreateTable(newTableSchema, tableSchema);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // todo: fix it. it should not depend on tableSchema\n        return this.recreateTable(tableSchema);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\n        return this.dropColumns(tableSchemaOrName as any, [columnSchemaOrName as any]);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const updatingTableSchema = tableSchema.clone();\n        const columns = (columnSchemasOrNames as any[]).map(columnSchemasOrName => {\n            if (typeof columnSchemasOrName === \"string\") {\n                const column = tableSchema.columns.find(column => column.name === columnSchemasOrName);\n                if (!column)\n                    throw new Error(`Cannot drop a column - column \"${columnSchemasOrName}\" was not found in the \"${tableSchema.name}\" table.`);\n\n                return column;\n\n            } else {\n                return columnSchemasOrName as ColumnSchema;\n            }\n        });\n        updatingTableSchema.removeColumns(columns);\n        return this.recreateTable(updatingTableSchema);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return this.recreateTable(dbTable);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return this.createForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.addForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return this.dropForeignKeys(tableSchemaOrName as any, [foreignKey]);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableSchema = await this.getTableSchema(tableSchemaOrName);\n        const changedTableSchema = tableSchema.clone();\n        changedTableSchema.removeForeignKeys(foreignKeys);\n        return this.recreateTable(changedTableSchema);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${tableName}\"(${columnNames})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const sql = `DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }) {\n        switch (typeOptions.type) {\n            case \"string\":\n                return \"character varying(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\n            case \"text\":\n                return \"text\";\n            case \"boolean\":\n                return \"boolean\";\n            case \"integer\":\n            case \"int\":\n                return \"integer\";\n            case \"smallint\":\n                return \"smallint\";\n            case \"bigint\":\n                return \"bigint\";\n            case \"float\":\n                return \"real\";\n            case \"double\":\n            case \"number\":\n                return \"double precision\";\n            case \"decimal\":\n                if (typeOptions.precision && typeOptions.scale) {\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\n\n                } else if (typeOptions.scale) {\n                    return `decimal(${typeOptions.scale})`;\n\n                } else if (typeOptions.precision) {\n                    return `decimal(${typeOptions.precision})`;\n\n                } else {\n                    return \"decimal\";\n\n                }\n            case \"date\":\n                return \"date\";\n            case \"time\":\n                if (typeOptions.timezone) {\n                    return \"time with time zone\";\n                } else {\n                    return \"time without time zone\";\n                }\n            case \"datetime\":\n                if (typeOptions.timezone) {\n                    return \"timestamp with time zone\";\n                } else {\n                    return \"timestamp without time zone\";\n                }\n            case \"json\":\n                return \"json\";\n            case \"simple_array\":\n                return typeOptions.length ? \"character varying(\" + typeOptions.length + \")\" : \"text\";\n        }\n\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"WebSQL\");\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\n\n        if (typeof columnMetadataValue === \"number\")\n            return columnMetadataValue === parseInt(databaseValue);\n        if (typeof columnMetadataValue === \"boolean\")\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        if (typeof columnMetadataValue === \"function\")\n            return columnMetadataValue() === databaseValue;\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM ${this.driver.escapeTableName(tableName)}`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => this.driver.escapeColumnName(key) + \"=$\" + (startIndex + index + 1));\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema): string {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.normalizeType(column);\n        } else {\n            c += \" \" + column.type;\n        }\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isUnique === true)\n            c += \" UNIQUE\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" PRIMARY KEY AUTOINCREMENT\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            if (typeof column.default === \"number\") {\n                c += \" DEFAULT \" + column.default + \"\";\n            } else if (typeof column.default === \"boolean\") {\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\n            } else if (typeof column.default === \"function\") {\n                c += \" DEFAULT \" + column.default() + \"\";\n            } else if (typeof column.default === \"string\") {\n                c += \" DEFAULT '\" + column.default + \"'\";\n            } else {\n                c += \" DEFAULT \" + column.default + \"\";\n            }\n        }\n\n        return c;\n    }\n\n    protected async recreateTable(tableSchema: TableSchema, oldTableSchema?: TableSchema): Promise<void> {\n        // const withoutForeignKeyColumns = columns.filter(column => column.foreignKeys.length === 0);\n        // const createForeignKeys = options && options.createForeignKeys;\n        const columnDefinitions = tableSchema.columns.map(dbColumn => this.buildCreateColumnSql(dbColumn)).join(\", \");\n        const columnNames = tableSchema.columns.map(column => `\"${column.name}\"`).join(\", \");\n\n        let sql1 = `CREATE TABLE \"temporary_${tableSchema.name}\" (${columnDefinitions}`;\n        // if (options && options.createForeignKeys) {\n        tableSchema.foreignKeys.forEach(foreignKey => {\n            const columnNames = foreignKey.columnNames.map(name => `\"${name}\"`).join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(name => `\"${name}\"`).join(\", \");\n            sql1 += `, FOREIGN KEY(${columnNames}) REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n            if (foreignKey.onDelete) sql1 += \" ON DELETE \" + foreignKey.onDelete;\n        });\n\n        const primaryKeyColumns = tableSchema.columns.filter(column => column.isPrimary && !column.isGenerated);\n        if (primaryKeyColumns.length > 0)\n            sql1 += `, PRIMARY KEY(${primaryKeyColumns.map(column => `${column.name}`).join(\", \")})`; // for some reason column escaping here generate a wrong schema\n\n        sql1 += \")\";\n\n        // todo: need also create uniques and indices?\n\n        // recreate a table with a temporary name\n        await this.query(sql1);\n\n        // we need only select data from old columns\n        const oldColumnNames = oldTableSchema ? oldTableSchema.columns.map(column => `\"${column.name}\"`).join(\", \") : columnNames;\n\n        // migrate all data from the table into temporary table\n        const sql2 = `INSERT INTO \"temporary_${tableSchema.name}\"(${oldColumnNames}) SELECT ${oldColumnNames} FROM \"${tableSchema.name}\"`;\n        await this.query(sql2);\n\n        // drop old table\n        const sql3 = `DROP TABLE \"${tableSchema.name}\"`;\n        await this.query(sql3);\n\n        // rename temporary table\n        const sql4 = `ALTER TABLE \"temporary_${tableSchema.name}\" RENAME TO \"${tableSchema.name}\"`;\n        await this.query(sql4);\n\n        // also re-create indices\n        const indexPromises = tableSchema.indices.map(index => this.createIndex(tableSchema.name, index));\n        // const uniquePromises = tableSchema.uniqueKeys.map(key => this.createIndex(key));\n        await Promise.all(indexPromises/*.concat(uniquePromises)*/);\n    }\n\n    /**\n     * If given value is a table name then it loads its table schema representation from the database.\n     */\n    protected async getTableSchema(tableSchemaOrName: TableSchema|string): Promise<TableSchema> {\n        if (tableSchemaOrName instanceof TableSchema) {\n            return tableSchemaOrName;\n        } else {\n            const tableSchema = await this.loadTableSchema(tableSchemaOrName);\n            if (!tableSchema)\n                throw new Error(`Table named ${tableSchemaOrName} was not found in the database.`);\n\n            return tableSchema;\n        }\n    }\n\n}","import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {Logger} from \"../../logger/Logger\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {WebsqlQueryRunner} from \"./WebsqlQueryRunner\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Declare a global function that is only available in browsers that support WebSQL.\n */\ndeclare function openDatabase(...params: any[]): any;\n\n/**\n * Organizes communication with WebSQL in the browser.\n */\nexport class WebsqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection to database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DriverOptions, logger: Logger) {\n\n        this.options = DriverUtils.buildDriverOptions(options);\n        this.logger = logger;\n\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        // todo: what about extra options: version, description, size\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            database: this.options.database,\n        }, this.options.extra || {});\n\n        return new Promise<void>((ok, fail) => {\n            const connection = openDatabase(\n                options.database,\n                options.version,\n                options.description,\n                options.size,\n            );\n            this.databaseConnection = {\n                id: 1,\n                connection: connection,\n                isTransactionActive: false\n            };\n            ok();\n        });\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.databaseConnection)\n            throw new ConnectionIsNotSetError(\"websql\");\n\n        return new Promise<void>((ok, fail) => {\n            // const handler = (err: any) => err ? fail(err) : ok();\n            // todo: find out how to close connection\n            ok();\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection)\n            return Promise.reject(new ConnectionIsNotSetError(\"websql\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new WebsqlQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\n        };\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return \"?\";\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return columnName; // \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return aliasName; // \"`\" + aliasName + \"`\";\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return tableName; // \"`\" + tableName + \"`\";\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (columnMetadata.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n                return JSON.parse(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"websql\");\n    }\n\n}","import {Connection} from \"./Connection\";\nimport {ConnectionNotFoundError} from \"./error/ConnectionNotFoundError\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {DriverOptions} from \"../driver/DriverOptions\";\nimport {Driver} from \"../driver/Driver\";\nimport {MissingDriverError} from \"./error/MissingDriverError\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {AlreadyHasActiveConnectionError} from \"./error/AlreadyHasActiveConnectionError\";\nimport {Logger} from \"../logger/Logger\";\nimport {SqliteDriver} from \"../driver/sqlite/SqliteDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {CannotDetermineConnectionOptionsError} from \"./error/CannotDetermineConnectionOptionsError\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {WebsqlDriver} from \"../driver/websql/WebsqlDriver\";\n\n/**\n * ConnectionManager is used to store and manage all these different connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nexport class ConnectionManager {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * List of connections registered in this connection manager.\n     */\n    protected connections: Connection[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return !!this.connections.find(connection => connection.name === name);\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws exception if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): Connection {\n        const connection = this.connections.find(connection => connection.name === name);\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * You need to manually call #connect method to establish connection.\n     * Note that dropSchemaOnConnection and autoSchemaSync options of a ConnectionOptions will not work there - use\n     * createAndConnect method to use them.\n     */\n    create(options: ConnectionOptions): Connection {\n\n        const logger = new Logger(options.logging || {});\n        const driver = this.createDriver(options.driver, logger);\n        const connection = this.createConnection(options.name || \"default\", driver, logger);\n\n        // import entity schemas\n        if (options.entitySchemas) {\n            const [directories, classes] = this.splitStringsAndClasses(options.entitySchemas);\n            connection\n                .importEntitySchemas(classes)\n                .importEntitySchemaFromDirectories(directories);\n        }\n\n        // import entities\n        if (options.entities) {\n            const [directories, classes] = this.splitStringsAndClasses(options.entities);\n            connection\n                .importEntities(classes)\n                .importEntitiesFromDirectories(directories);\n        }\n\n        // import subscriber\n        if (options.subscribers) {\n            const [directories, classes] = this.splitStringsAndClasses(options.subscribers);\n            connection\n                .importSubscribers(classes)\n                .importSubscribersFromDirectories(directories);\n        }\n\n        // import naming strategies\n        if (options.namingStrategies) {\n            const [directories, classes] = this.splitStringsAndClasses(options.namingStrategies);\n            connection\n                .importNamingStrategies(classes)\n                .importNamingStrategiesFromDirectories(directories);\n        }\n\n        // import migrations\n        if (options.migrations) {\n            const [directories, classes] = this.splitStringsAndClasses(options.migrations);\n            connection\n                .importMigrations(classes)\n                .importMigrationsFromDirectories(directories);\n        }\n\n        // set naming strategy to be used for this connection\n        if (options.usedNamingStrategy)\n            connection.useNamingStrategy(options.usedNamingStrategy as any);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection and registers it in the manager.\n     *\n     * If connection options were not specified, then it will try to create connection automatically.\n     *\n     * First, it will try to find a \"default\" configuration from ormconfig.json.\n     * You can also specify a connection name to use from ormconfig.json,\n     * and you even can specify a path to custom ormconfig.json file.\n     *\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\n     * it will try to create connection from environment variables.\n     * There are several environment variables you can set:\n     *\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n     * - TYPEORM_URL - database connection url. Should be a string.\n     * - TYPEORM_HOST - database host. Should be a string.\n     * - TYPEORM_PORT - database access port. Should be a number.\n     * - TYPEORM_USERNAME - database username. Should be a string.\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n     *\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n     */\n    async createAndConnect(): Promise<Connection>;\n\n    /**\n     * Creates connection from the given connection options and registers it in the manager.\n     */\n    async createAndConnect(options: ConnectionOptions): Promise<Connection>;\n\n    /**\n     * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\n     * Optionally you can specify a path to custom ormconfig.json file.\n     */\n    async createAndConnect(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\n\n    /**\n     * Creates connection and and registers it in the manager.\n     */\n    async createAndConnect(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\n\n        // if connection options are given, then create connection from them\n        if (optionsOrConnectionNameFromConfig && optionsOrConnectionNameFromConfig instanceof Object)\n            return this.createAndConnectByConnectionOptions(optionsOrConnectionNameFromConfig as ConnectionOptions);\n\n        // if connection name is specified then explicitly try to load connection options from it\n        if (typeof optionsOrConnectionNameFromConfig === \"string\")\n            return this.createFromConfigAndConnect(optionsOrConnectionNameFromConfig || \"default\", ormConfigPath);\n\n        // if nothing is specified then try to silently load config from ormconfig.json\n        if (this.hasDefaultConfigurationInConfigurationFile())\n            return this.createFromConfigAndConnect(\"default\");\n\n        // if driver type is set in environment variables then try to create connection from env variables\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\n            return this.createFromEnvAndConnect();\n\n        throw new CannotDetermineConnectionOptionsError();\n    }\n\n    /**\n     * Creates new connections and registers them in the manager.\n     *\n     * If array of connection options were not specified, then it will try to create them automatically\n     * from ormconfig.json. You can also specify path to your custom ormconfig.json file.\n     *\n     * In the case if options were not specified, and ormconfig.json file also wasn't found,\n     * it will try to create connection from environment variables.\n     * There are several environment variables you can set:\n     *\n     * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n     * - TYPEORM_URL - database connection url. Should be a string.\n     * - TYPEORM_HOST - database host. Should be a string.\n     * - TYPEORM_PORT - database access port. Should be a number.\n     * - TYPEORM_USERNAME - database username. Should be a string.\n     * - TYPEORM_PASSWORD - database user's password. Should be a string.\n     * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n     * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n     * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n     * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n     * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n     * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n     * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n     * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n     * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n     *\n     * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n     */\n    async createAndConnectToAll(): Promise<Connection[]>;\n\n    /**\n     * Creates connections from the given connection options and registers them in the manager.\n     */\n    async createAndConnectToAll(options?: ConnectionOptions[]): Promise<Connection[]>;\n\n    /**\n     * Creates connections from the ormconfig.json file.\n     * Optionally you can specify a path to custom ormconfig.json file.\n     */\n    async createAndConnectToAll(ormConfigPath?: string): Promise<Connection[]>;\n\n    /**\n     * Creates connections and and registers them in the manager.\n     */\n    async createAndConnectToAll(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\n\n        // if connection options are given, then create connection from them\n        if (optionsOrOrmConfigFilePath && optionsOrOrmConfigFilePath instanceof Array)\n            return Promise.all(optionsOrOrmConfigFilePath.map(options => {\n                return this.createAndConnectByConnectionOptions(options as ConnectionOptions);\n            }));\n\n        // if connection name is specified then explicitly try to load connection options from it\n        if (typeof optionsOrOrmConfigFilePath === \"string\")\n            return this.createFromConfigAndConnectToAll(optionsOrOrmConfigFilePath as string);\n\n        // if nothing is specified then try to silently load config from ormconfig.json\n        if (this.hasOrmConfigurationFile())\n            return this.createFromConfigAndConnectToAll();\n\n        // if driver type is set in environment variables then try to create connection from env variables\n        if (this.hasDefaultConfigurationInEnvironmentVariables())\n            return [await this.createFromEnvAndConnect()];\n\n        throw new CannotDetermineConnectionOptionsError();\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if ormconfig.json exists.\n     */\n    protected hasOrmConfigurationFile(): boolean {\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\n        if (!PlatformTools.fileExist(path))\n            return false;\n\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\n        if (configuration instanceof Array) {\n            return configuration\n                    .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                    .length > 0;\n\n        } else if (configuration instanceof Object) {\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                return false;\n\n            return Object.keys(configuration).length > 0;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if there is a default connection in the ormconfig.json file.\n     */\n    protected hasDefaultConfigurationInConfigurationFile(): boolean {\n        const path = PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\";\n        if (!PlatformTools.fileExist(path))\n            return false;\n\n        const configuration: ConnectionOptions[]|ConnectionOptions = PlatformTools.load(path);\n        if (configuration instanceof Array) {\n            return !!configuration\n                .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                .find(config => !!config.name || config.name === \"default\");\n\n        } else if (configuration instanceof Object) {\n            if (!configuration.name ||\n                configuration.name !== \"default\")\n                return false;\n\n            if (configuration.environment && configuration.environment !== PlatformTools.getEnvVariable(\"NODE_ENV\"))\n                return false;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if environment variables contains connection options.\n     */\n    protected hasDefaultConfigurationInEnvironmentVariables(): boolean {\n        return !!PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\");\n    }\n\n    /**\n     * Allows to quickly create a connection based on the environment variable values.\n     */\n    protected async createFromEnvAndConnect(): Promise<Connection> {\n        return this.createAndConnectByConnectionOptions({\n            driver: {\n                type: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_TYPE\"),\n                url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\n                host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\n                port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\n                username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\n                password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\n                database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\n                sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\n                storage: PlatformTools.getEnvVariable(\"TYPEORM_STORAGE\"),\n                usePool: PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\") !== undefined ? OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_USE_POOL\")) : undefined, // special check for defined is required here\n                extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined\n            },\n            autoSchemaSync: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_AUTO_SCHEMA_SYNC\")),\n            entities: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\").split(\",\") : [],\n            subscribers: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\") ? PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\").split(\",\") : [],\n            entitySchemas: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\") ? PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_SCHEMAS\").split(\",\") : [],\n            namingStrategies: PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\") ? PlatformTools.getEnvVariable(\"TYPEORM_NAMING_STRATEGIES\").split(\",\") : [],\n            usedNamingStrategy: PlatformTools.getEnvVariable(\"TYPEORM_USED_NAMING_STRATEGY\"),\n            logging: {\n                logQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_QUERIES\")),\n                logFailedQueryError: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_FAILED_QUERIES\")),\n                logOnlyFailedQueries: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING_ONLY_FAILED_QUERIES\")),\n            }\n        });\n    }\n\n\n    /**\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\n     * and registers a new connection in the manager.\n     * Optionally you can specify a path to the json configuration.\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\n     */\n    protected async createFromConfigAndConnectToAll(path?: string): Promise<Connection[]> {\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\n        if (!optionsArray)\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\n\n        const promises = optionsArray\n            .filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")) // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\n            .map(options => this.createAndConnectByConnectionOptions(options));\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Creates a new connection based on the connection options from \"ormconfig.json\"\n     * and registers a new connection in the manager.\n     * Optionally you can specify a path to the json configuration.\n     * If path is not given, then ormconfig.json file will be searched near node_modules directory.\n     */\n    protected async createFromConfigAndConnect(connectionName: string, path?: string): Promise<Connection> {\n        const optionsArray: ConnectionOptions[] = PlatformTools.load(path || (PlatformTools.load(\"app-root-path\").path + \"/ormconfig.json\"));\n        if (!optionsArray)\n            throw new Error(`Configuration ${path || \"ormconfig.json\"} was not found. Add connection configuration inside ormconfig.json file.`);\n\n        const environmentLessOptions = optionsArray.filter(options => (options.name || \"default\") === connectionName);\n        const options = environmentLessOptions.filter(options => !options.environment || options.environment === PlatformTools.getEnvVariable(\"NODE_ENV\")); // skip connection creation if environment is set in the options, and its not equal to the value in the NODE_ENV variable\n\n        if (!options.length)\n            throw new Error(`Connection \"${connectionName}\" ${PlatformTools.getEnvVariable(\"NODE_ENV\") ? \"for the environment \" + PlatformTools.getEnvVariable(\"NODE_ENV\") + \" \" : \"\"}was not found in the json configuration file.` +\n                (environmentLessOptions.length ? ` However there are such configurations for other environments: ${environmentLessOptions.map(options => options.environment).join(\", \")}.` : \"\"));\n\n        return this.createAndConnectByConnectionOptions(options[0]);\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers a new connection in the manager.\n     */\n    protected async createAndConnectByConnectionOptions(options: ConnectionOptions): Promise<Connection> {\n        const connection = this.create(options);\n\n        // connect to the database\n        await connection.connect();\n\n        // if option is set - drop schema once connection is done\n        if (options.dropSchemaOnConnection && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n            await connection.dropDatabase();\n\n        // if option is set - automatically synchronize a schema\n        if (options.autoSchemaSync && !PlatformTools.getEnvVariable(\"SKIP_SCHEMA_CREATION\"))\n            await connection.syncSchema();\n\n        // if option is set - automatically synchronize a schema\n        if (options.autoMigrationsRun && !PlatformTools.getEnvVariable(\"SKIP_MIGRATIONS_RUN\"))\n            await connection.runMigrations();\n\n        return connection;\n    }\n\n    /**\n     * Splits given array of mixed strings and / or functions into two separate array of string and array of functions.\n     */\n    protected splitStringsAndClasses<T>(strAndClses: string[]|T[]): [string[], T[]] {\n        return [\n            (strAndClses as string[]).filter(str => typeof str === \"string\"),\n            (strAndClses as T[]).filter(cls => typeof cls !== \"string\"),\n        ];\n    }\n\n    /**\n     * Creates a new driver based on the given driver type and options.\n     */\n    protected createDriver(options: DriverOptions, logger: Logger): Driver {\n        switch (options.type) {\n            case \"mysql\":\n                return new MysqlDriver(options, logger, undefined);\n            case \"postgres\":\n                return new PostgresDriver(options, logger);\n            case \"mariadb\":\n                return new MysqlDriver(options, logger);\n            case \"sqlite\":\n                return new SqliteDriver(options, logger);\n            case \"oracle\":\n                return new OracleDriver(options, logger);\n            case \"mssql\":\n                return new SqlServerDriver(options, logger);\n            case \"websql\":\n                return new WebsqlDriver(options, logger);\n            default:\n                throw new MissingDriverError(options.type);\n        }\n    }\n\n    /**\n     * Creates a new connection and registers it in the connection manager.\n     */\n    protected createConnection(name: string, driver: Driver, logger: Logger) {\n        const existConnection = this.connections.find(connection => connection.name === name);\n        if (existConnection) {\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError(name);\n\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n\n        const connection = new Connection(name, driver, logger);\n        this.connections.push(connection);\n        return connection;\n    }\n\n}\n","/**\n * Container options.\n */\nexport interface UseContainerOptions {\n\n    /**\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\n     */\n    fallback?: boolean;\n\n    /**\n     * If set to true, then default container will be used in the case if given container thrown an exception.\n     */\n    fallbackOnErrors?: boolean;\n\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nexport const defaultContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T } = new (class {\n    private instances: { type: Function, object: any }[] = [];\n\n    get<T>(someClass: { new (...args: any[]): T }): T {\n        let instance = this.instances.find(instance => instance.type === someClass);\n        if (!instance) {\n            instance = { type: someClass, object: new someClass() };\n            this.instances.push(instance);\n        }\n\n        return instance.object;\n    }\n})();\n\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T }|Function): T };\nlet userContainerOptions: UseContainerOptions|undefined;\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions) {\n    userContainer = iocContainer;\n    userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T }|Function): T {\n    if (userContainer) {\n        try {\n            const instance = userContainer.get(someClass);\n            if (instance)\n                return instance;\n\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance;\n\n        } catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error;\n        }\n    }\n    return defaultContainer.get<T>(someClass);\n}","export class ColumnTypeUndefinedError extends Error {\n    name = \"ColumnTypeUndefinedError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        this.message = `Column type for ${(<any>object.constructor).name}#${propertyName} is not defined or cannot be guessed. ` +\n            `Try to implicitly provide a column type to @Column decorator.`;\n    }\n\n}","export class GeneratedOnlyForPrimaryError extends Error {\n    name = \"GeneratedOnlyForPrimaryError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        this.message = `Column for property ${(<any>object.constructor).name}#${propertyName} cannot have a generated ` +\n            `value because its not a primary column. Try to use @PrimaryColumn decorator.`;\n    }\n\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnTypeUndefinedError} from \"../error/ColumnTypeUndefinedError\";\nimport {GeneratedOnlyForPrimaryError} from \"../error/GeneratedOnlyForPrimaryError\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnType, ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\n * decorator will be persisted to the database when entity be saved.\n */\nexport function Column(): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: ColumnType): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(options: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: ColumnType, options: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\n    let type: ColumnType|undefined;\n    if (typeof typeOrOptions === \"string\") {\n        type = <ColumnType> typeOrOptions;\n\n    } else if (typeOrOptions) {\n        options = <ColumnOptions> typeOrOptions;\n        type = typeOrOptions.type;\n    }\n    return function (object: Object, propertyName: string) {\n\n        // todo: need to store not string type, but original type instead? (like in relation metadata)\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if type is not given implicitly then try to guess it\n        if (!type) {\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n            if (reflectMetadataType)\n                type = ColumnTypes.determineTypeFromFunction(reflectMetadataType);\n        }\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options = Object.assign({ type: type } as ColumnOptions, options);\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName);\n\n        // check if auto increment is not set for simple column\n        if (options.generated)\n            throw new GeneratedOnlyForPrimaryError(object, propertyName);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store a creation date of the inserted object.\n * Creation date is generated and inserted only once,\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\n */\nexport function CreateDateColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // implicitly set a type, because this column's type cannot be anything else except date\n        options = Object.assign({ type: ColumnTypes.DATETIME } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"createDate\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * DiscriminatorColumn is a special type column used on entity class (not entity property)\n * and creates a special column which will contain an entity type.\n * This type is required for entities which use single table inheritance pattern.\n */\nexport function DiscriminatorColumn(discriminatorOptions: { name: string, type: ColumnType }): Function {\n    return function (target: Function) {\n\n        // if column options are not given then create a new empty options\n        const options: ColumnOptions = {\n            name: discriminatorOptions.name,\n            type: discriminatorOptions.type\n        };\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: target,\n            mode: \"discriminator\",\n            propertyName: discriminatorOptions.name,\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n","export class PrimaryColumnCannotBeNullableError extends Error {\n    name = \"PrimaryColumnCannotBeNullableError\";\n\n    constructor(object: Object, propertyName: string) {\n        super();\n        this.message = `Primary column ${(<any>object.constructor).name}#${propertyName} cannot be nullable. ` +\n            `Its not allowed for primary keys. Try to remove nullable option.`;\n    }\n\n}","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n * This column creates is an alias for @PrimaryColumn(\"int\", { generated: true }).\n */\nexport function PrimaryGeneratedColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set the int type - by default for auto generated column\n        if (!options.type)\n            options = Object.assign({type: \"int\"} as ColumnOptions, options);\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n\n        // implicitly set a primary and generated to column options\n        options = Object.assign({ primary: true, generated: true } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnType, ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnTypeUndefinedError} from \"../error/ColumnTypeUndefinedError\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {PrimaryColumnCannotBeNullableError} from \"../error/PrimaryColumnCannotBeNullableError\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(type?: ColumnType, options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\n    let type: ColumnType;\n    if (typeof typeOrOptions === \"string\") {\n        type = <ColumnType> typeOrOptions;\n    } else {\n        options = <ColumnOptions> typeOrOptions;\n    }\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if type is not given implicitly then try to guess it\n        if (!type) {\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n            if (reflectMetadataType)\n                type = ColumnTypes.determineTypeFromFunction(reflectMetadataType);\n        }\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options = Object.assign({ type: type } as ColumnOptions, options);\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName);\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n\n        // implicitly set a primary to column options\n        options = Object.assign({ primary: true } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store an update date of the updated object.\n * This date is being updated each time you persist the object.\n */\nexport function UpdateDateColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // implicitly set a type, because this column's type cannot be anything else except date\n        options = Object.assign({ type: ColumnTypes.DATETIME } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"updateDate\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n","import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * This column will store a number - version of the entity.\n * Every time your entity will be persisted, this number will be increased by one -\n * so you can organize visioning and update strategies of your entity.\n */\nexport function VersionColumn(options?: ColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // implicitly set a type, because this column's type cannot be anything else except date\n        options = Object.assign({ type: ColumnTypes.INTEGER } as ColumnOptions, options);\n\n        // todo: check if reflectedType is number too\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"version\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity insertion.\n */\nexport function AfterInsert() {\n    return function (object: Object, propertyName: string) {\n\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_INSERT\n        };\n        getMetadataArgsStorage().entityListeners.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after entity is loaded.\n */\nexport function AfterLoad() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_LOAD\n        };\n        getMetadataArgsStorage().entityListeners.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity removal.\n */\nexport function AfterRemove() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_REMOVE\n        };\n        getMetadataArgsStorage().entityListeners.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied after this entity update.\n */\nexport function AfterUpdate() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_UPDATE\n        };\n        getMetadataArgsStorage().entityListeners.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity insertion.\n */\nexport function BeforeInsert() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_INSERT\n        };\n        getMetadataArgsStorage().entityListeners.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity removal.\n */\nexport function BeforeRemove() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_REMOVE\n        };\n        getMetadataArgsStorage().entityListeners.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EventListenerTypes} from \"../../metadata/types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../../metadata-args/EntityListenerMetadataArgs\";\n\n/**\n * Calls a method on which this decorator is applied before this entity update.\n */\nexport function BeforeUpdate() {\n    return function (object: Object, propertyName: string) {\n        const args: EntityListenerMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_UPDATE\n        };\n        getMetadataArgsStorage().entityListeners.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\n\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\nexport function EventSubscriber() {\n    return function (target: Function) {\n        const args: EntitySubscriberMetadataArgs = {\n            target: target\n        };\n        getMetadataArgsStorage().entitySubscribers.add(args);\n    };\n}","/**\n * Describes all composite index's options.\n */\nexport interface IndexOptions {\n\n    /**\n     * Indicates if this composite index must be unique or not.\n     */\n    readonly unique?: boolean;\n\n}","import {JoinColumnOptions} from \"./JoinColumnOptions\";\n\n/**\n * Describes all relation's options.\n */\nexport interface JoinTableOptions {\n\n    /**\n     * Name of the table that will be created to store values of the both tables (join table).\n     * By default is auto generated.\n     */\n    readonly name?: string;\n\n    /**\n     * First column of the join table.\n     */\n    readonly joinColumn?: JoinColumnOptions;\n\n    /**\n     * Second (inverse) column of the join table.\n     */\n    readonly inverseJoinColumn?: JoinColumnOptions;\n\n}","import {OrderByCondition} from \"../../find-options/OrderByCondition\";\n\n/**\n * Describes all entity's options.\n */\nexport interface EntityOptions {\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    readonly orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     * Note that it used only during table creation.\n     * If you update this value and table is already created, it will not change table's engine type.\n     */\n    readonly engine?: string;\n\n    /**\n     * Specifies if this table will be skipped during schema synchronization.\n     */\n    readonly skipSchemaSync?: boolean;\n\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationCountMetadataArgs} from \"../../metadata-args/RelationCountMetadataArgs\";\n\n/**\n * Holds a number of children in the closure table of the column.\n */\nexport function RelationCount<T>(relation: string|((object: T) => any)): Function {\n    return function (object: Object, propertyName: string) {\n\n        // todo: need to check if property type is number?\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // create and register a new column metadata\n        const args: RelationCountMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation\n        };\n        getMetadataArgsStorage().relationCounts.add(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {JoinColumnOptions} from \"../options/JoinColumnOptions\";\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options?: JoinColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n        options = options || {} as JoinColumnOptions;\n        const args: JoinColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            referencedColumnName: options.referencedColumnName\n        };\n        getMetadataArgsStorage().joinColumns.add(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {JoinTableOptions} from \"../options/JoinTableOptions\";\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options?: JoinTableOptions): Function {\n    return function (object: Object, propertyName: string) {\n        options = options || {} as JoinTableOptions;\n        const args: JoinTableMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumn: options.joinColumn,\n            inverseJoinColumn: options.inverseJoinColumn\n        };\n        getMetadataArgsStorage().joinTables.add(args);\n    };\n}\n\n","import {RelationOptions} from \"../options/RelationOptions\";\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\n                              inverseSide?: string|((object: T) => any),\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\n                              inverseSideOrOptions?: string|((object: T) => any)|{ cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean },\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: RelationTypes.MANY_TO_MANY,\n            isLazy: isLazy,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.add(args);\n    };\n}\n\n","import {RelationOptions} from \"../options/RelationOptions\";\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                             inverseSide?: string|((object: T) => any),\n                             options?: RelationOptions): Function;\n\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                             options?: RelationOptions): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: RelationTypes.MANY_TO_ONE,\n            isLazy: isLazy,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.add(args);\n    };\n}\n","import {RelationTypes} from \"../../metadata/types/RelationTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\nimport {RelationOptions} from \"../options/RelationOptions\";\n\n// todo: make decorators which use inverse side string separate\n\n/**\n * One-to-many relation allows to create type of relation when Entity2 can have multiple instances of Entity1.\n * Entity1 have only one Entity2. Entity1 is an owner of the relationship, and storages Entity2 id on its own side.\n */\nexport function OneToMany<T>(typeFunction: (type?: any) => ObjectType<T>, inverseSide: string|((object: T) => any), options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: RelationTypes.ONE_TO_MANY,\n            type: typeFunction,\n            inverseSideProperty: inverseSide,\n            options: options\n        };\n        getMetadataArgsStorage().relations.add(args);\n    };\n}\n\n","import {RelationOptions} from \"../options/RelationOptions\";\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                            inverseSide?: string|((object: T) => any),\n                            options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                            inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                            options?: RelationOptions): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: RelationTypes.ONE_TO_ONE,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\n\n/**\n * Special decorator used to extract relation id into separate entity property.\n */\nexport function RelationId<T>(relation: string|((object: T) => any)): Function {\n    return function (object: Object, propertyName: string) {\n        const args: RelationIdMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation\n        };\n        getMetadataArgsStorage().relationIds.add(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            engine: options && options.engine ? options.engine : undefined,\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * Abstract entity is a class that contains columns and relations for all entities that will inherit this entity.\n * Database table for the abstract entity is not created.\n */\nexport function AbstractEntity() {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: undefined,\n            type: \"abstract\"\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * Special type of the entity used in the class-table inherited tables.\n */\nexport function ClassEntityChild(tableName?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: tableName,\n            type: \"class-table-child\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * Used on a entities that stores its children in a tree using closure design pattern.\n */\nexport function ClosureEntity(name?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: name,\n            type: \"closure\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * This decorator is used on the entities that must be embedded into another entities.\n */\nexport function EmbeddableEntity(): Function {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            type: \"embeddable\",\n            orderBy: undefined\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * Special type of the table used in the single-table inherited tables.\n */\nexport function SingleEntityChild() {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: undefined,\n            type: \"single-table-child\",\n            orderBy: undefined\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {InheritanceMetadataArgs} from \"../../metadata-args/InheritanceMetadataArgs\";\n\n/**\n * Sets what kind of table-inheritance table will use.\n */\nexport function TableInheritance(type: \"single-table\"|\"class-table\") {\n    return function (target: Function) {\n        const args: InheritanceMetadataArgs = {\n            target: target,\n            type: type\n        };\n        getMetadataArgsStorage().inheritances.add(args);\n    };\n}","import {getMetadataArgsStorage, getConnection} from \"../../index\";\n\n/**\n * Wraps some method into the transaction.\n * Note, method result will return a promise if this decorator applied.\n * Note, all database operations in the wrapped method should be executed using entity managed passed as a first parameter\n * into the wrapped method.\n * If you want to control at what position in your method parameters entity manager should be injected,\n * then use @TransactionEntityManager() decorator.\n */\nexport function Transaction(connectionName: string = \"default\"): Function {\n    return function (target: Object, methodName: string, descriptor: PropertyDescriptor) {\n\n        // save original method - we gonna need it\n        const originalMethod = descriptor.value;\n\n        // override method descriptor with proxy method\n        descriptor.value = function(...args: any[]) {\n            return getConnection(connectionName)\n                .entityManager\n                .transaction(entityManager => {\n\n                    // gets all @TransactionEntityManager() decorator usages for this method\n                    const indices = getMetadataArgsStorage()\n                        .transactionEntityManagers\n                        .filterByTarget(target.constructor)\n                        .toArray()\n                        .filter(transactionEntityManager => transactionEntityManager.methodName === methodName)\n                        .map(transactionEntityManager => transactionEntityManager.index);\n\n                    let argsWithInjectedEntityManager: any[];\n                    if (indices.length) { // if there are @TransactionEntityManager() decorator usages the inject them\n                        argsWithInjectedEntityManager = [...args];\n                        indices.forEach(index => argsWithInjectedEntityManager.splice(index, 0, entityManager));\n\n                    } else { // otherwise inject it as a first parameter\n                        argsWithInjectedEntityManager = [entityManager, ...args];\n                    }\n\n                    return originalMethod.apply(this, argsWithInjectedEntityManager);\n                });\n        };\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TransactionEntityMetadataArgs} from \"../../metadata-args/TransactionEntityMetadataArgs\";\n\n/**\n * Injects transaction's entity manager into the method wrapped with @Transaction decorator.\n */\nexport function TransactionEntityManager(): Function {\n    return function (object: Object, methodName: string, index: number) {\n        const args: TransactionEntityMetadataArgs = {\n            target: object.constructor,\n            methodName: methodName,\n            index: index,\n        };\n        getMetadataArgsStorage().transactionEntityManagers.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\n */\nexport function TreeLevelColumn(): Function {\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // implicitly set a type, because this column's type cannot be anything else except number\n        const options: ColumnOptions = { type: ColumnTypes.INTEGER };\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"treeLevel\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationOptions} from \"../options/RelationOptions\";\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Marks a specific property of the class as a parent of the tree.\n */\nexport function TreeParent(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            isTreeParent: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: RelationTypes.MANY_TO_ONE,\n            type: () => object.constructor,\n            options: options\n        };\n        getMetadataArgsStorage().relations.add(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationOptions} from \"../options/RelationOptions\";\nimport {RelationTypes} from \"../../metadata/types/RelationTypes\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Marks a specific property of the class as a children of the tree.\n */\nexport function TreeChildren(options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean }): Function {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        // add one-to-many relation for this \n        const args: RelationMetadataArgs = {\n            isTreeChildren: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: RelationTypes.ONE_TO_MANY,\n            type: () => object.constructor,\n            options: options\n        };\n        getMetadataArgsStorage().relations.add(args);\n    };\n}\n\n","import {getMetadataArgsStorage} from \"../index\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {IndexOptions} from \"./options/IndexOptions\";\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(name: string, options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(name: string, fields: string[], options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(fields: string[], options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(fields: (object: any) => any[], options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(name: string, fields: (object: any) => any[], options?: IndexOptions): Function;\n\n/**\n * Composite index must be set on entity classes and must specify entity's fields to be indexed.\n */\nexport function Index(nameOrFieldsOrOptions: string|string[]|((object: any) => any[])|IndexOptions,\n                      maybeFieldsOrOptions?: ((object: any) => any[])|IndexOptions|string[],\n                      maybeOptions?: IndexOptions): Function {\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object: any) => any[])|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\n    if (!options)\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\n\n    return function (clsOrObject: Function|Object, propertyName?: string) {\n        const args: IndexMetadataArgs = {\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            unique: options && options.unique ? true : false\n        };\n        getMetadataArgsStorage().indices.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../index\";\nimport {NamingStrategyMetadataArgs} from \"../metadata-args/NamingStrategyMetadataArgs\";\n\n/**\n * Decorator registers a new naming strategy to be used in naming things.\n */\nexport function NamingStrategy(name?: string): Function {\n    return function (target: Function) {\n        const strategyName = name ? name : (<any> target).name;\n        const args: NamingStrategyMetadataArgs = {\n            target: target,\n            name: strategyName\n        };\n        getMetadataArgsStorage().namingStrategies.add(args);\n    };\n}\n","import {ObjectType} from \"../common/ObjectType\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\n\n/**\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\n * embedded will be mapped to it from the single table.\n */\nexport function Embedded<T>(typeFunction: (type?: any) => ObjectType<T>) {\n    return function (object: Object, propertyName: string) {\n        // const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n\n        const args: EmbeddedMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            type: typeFunction\n        };\n        getMetadataArgsStorage().embeddeds.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../index\";\nimport {DiscriminatorValueMetadataArgs} from \"../metadata-args/DiscriminatorValueMetadataArgs\";\n\n/**\n * If entity is a child table of some table, it should have a discriminator value.\n * This decorator sets custom discriminator value for the entity.\n */\nexport function DiscriminatorValue(value: any): Function {\n    return function (target: Function) {\n        const args: DiscriminatorValueMetadataArgs = {\n            target: target,\n            value: value\n        };\n        getMetadataArgsStorage().discriminatorValues.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../index\";\nimport {EntityRepositoryMetadataArgs} from \"../metadata-args/EntityRepositoryMetadataArgs\";\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can either manage some specific entity, either just be generic.\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\n */\nexport function EntityRepository(entity?: Function, options?: { useContainer?: boolean }): Function;\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can either manage some specific entity, either just be generic.\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\n */\nexport function EntityRepository(options?: { useContainer?: boolean }): Function;\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can either manage some specific entity, either just be generic.\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\n */\nexport function EntityRepository(entityOrOptions?: Function|{ useContainer?: boolean }, maybeOptions?: { useContainer?: boolean }): Function {\n    const entity = entityOrOptions instanceof Function ? entityOrOptions as Function : undefined;\n    const options = entityOrOptions instanceof Function ? maybeOptions : entityOrOptions as { useContainer?: boolean };\n    return function (target: Function) {\n        const args: EntityRepositoryMetadataArgs = {\n            target: target,\n            entity: entity,\n            useContainer: !!(options && options.useContainer)\n        };\n        getMetadataArgsStorage().entityRepositories.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * This decorator is used to mark classes that will be a tables. Database schema will be created for all classes\n * decorated with it, and Repository can be retrieved and used for it.\n *\n * @deprecated Use @Entity decorator instead.\n */\nexport function Table(name?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            engine: options && options.engine ? options.engine : undefined,\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * Abstract table is a table that contains columns and relations for all tables that will inherit this table.\n * Database table for the abstract table is not created.\n *\n * @deprecated Use @AbstractEntity decorator instead.\n */\nexport function AbstractTable() {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: undefined,\n            type: \"abstract\"\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * Special type of the table used in the class-table inherited tables.\n *\n * @deprecated Use @ClassEntityChild decorator instead.\n */\nexport function ClassTableChild(tableName?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: tableName,\n            type: \"class-table-child\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {EntityOptions} from \"../options/EntityOptions\";\n\n/**\n * Used on a tables that stores its children in a tree using closure deisgn pattern.\n *\n * @deprecated Use @ClosureEntity decorator instead.\n */\nexport function ClosureTable(name?: string, options?: EntityOptions) {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: name,\n            type: \"closure\",\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\n            skipSchemaSync: !!(options && options.skipSchemaSync === true)\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * This decorators is used on the entities that must be embedded into the tables.\n *\n * @deprecated Use @EmbeddableEntity decorator instead.\n */\nexport function EmbeddableTable(): Function {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            type: \"embeddable\",\n            orderBy: undefined\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}\n","import {getMetadataArgsStorage} from \"../../index\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\n\n/**\n * Special type of the table used in the single-table inherited tables.\n *\n * @deprecated Use @SingleEntityChild decorator instead.\n */\nexport function SingleTableChild() {\n    return function (target: Function) {\n        const args: TableMetadataArgs = {\n            target: target,\n            name: undefined,\n            type: \"single-table-child\",\n            orderBy: undefined\n        };\n        getMetadataArgsStorage().tables.add(args);\n    };\n}","/*!\n */\nimport {DriverOptions} from \"./driver/DriverOptions\";\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\nimport {Connection} from \"./connection/Connection\";\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nimport {getFromContainer} from \"./container\";\nimport {ObjectType} from \"./common/ObjectType\";\nimport {Repository} from \"./repository/Repository\";\nimport {EntityManager} from \"./entity-manager/EntityManager\";\nimport {PlatformTools} from \"./platform/PlatformTools\";\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/DiscriminatorColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/options/ColumnOptions\";\nexport * from \"./decorator/options/IndexOptions\";\nexport * from \"./decorator/options/JoinColumnOptions\";\nexport * from \"./decorator/options/JoinTableOptions\";\nexport * from \"./decorator/options/RelationOptions\";\nexport * from \"./decorator/options/EntityOptions\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/AbstractEntity\";\nexport * from \"./decorator/entity/ClassEntityChild\";\nexport * from \"./decorator/entity/ClosureEntity\";\nexport * from \"./decorator/entity/EmbeddableEntity\";\nexport * from \"./decorator/entity/SingleEntityChild\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionEntityManager\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/NamingStrategy\";\nexport * from \"./decorator/Embedded\";\nexport * from \"./decorator/DiscriminatorValue\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./schema-builder/schema/ColumnSchema\";\nexport * from \"./schema-builder/schema/ForeignKeySchema\";\nexport * from \"./schema-builder/schema/IndexSchema\";\nexport * from \"./schema-builder/schema/PrimaryKeySchema\";\nexport * from \"./schema-builder/schema/TableSchema\";\n\nexport {Connection} from \"./connection/Connection\";\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nexport {DriverOptions} from \"./driver/DriverOptions\";\nexport {Driver} from \"./driver/Driver\";\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\nexport {EntityManager} from \"./entity-manager/EntityManager\";\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\nexport {Repository} from \"./repository/Repository\";\nexport {TreeRepository} from \"./repository/TreeRepository\";\nexport {SpecificRepository} from \"./repository/SpecificRepository\";\nexport {FindOptions} from \"./find-options/FindOptions\";\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\nexport {ObjectLiteral} from \"./common/ObjectLiteral\";\nexport {ObjectType} from \"./common/ObjectType\";\n\n// -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n\nexport * from \"./decorator/tables/Table\";\nexport * from \"./decorator/tables/AbstractTable\";\nexport * from \"./decorator/tables/ClassTableChild\";\nexport * from \"./decorator/tables/ClosureTable\";\nexport * from \"./decorator/tables/EmbeddableTable\";\nexport * from \"./decorator/tables/SingleTableChild\";\nexport * from \"./decorator/tables/Table\";\n\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n\n    return globalScope.typeormMetadataArgsStorage;\n}\n\n/**\n * Gets a ConnectionManager which creates connections.\n */\nexport function getConnectionManager(): ConnectionManager {\n    return getFromContainer(ConnectionManager);\n}\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically.\n *\n * First, it will try to find a \"default\" configuration from ormconfig.json.\n * You can also specify a connection name to use from ormconfig.json,\n * and you even can specify a path to your custom ormconfig.json.\n *\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\n * it will try to create connection from environment variables.\n * There are several environment variables you can set:\n *\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n * - TYPEORM_URL - database connection url. Should be a string.\n * - TYPEORM_HOST - database host. Should be a string.\n * - TYPEORM_PORT - database access port. Should be a number.\n * - TYPEORM_USERNAME - database username. Should be a string.\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n *\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n */\nexport function createConnection(): Promise<Connection>;\n\n/**\n * Creates connection from the given connection options and registers it in the manager.\n */\nexport function createConnection(options?: ConnectionOptions): Promise<Connection>;\n\n/**\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\n * Optionally you can specify a path to custom ormconfig.json file.\n */\nexport function createConnection(connectionNameFromConfig: string, ormConfigPath?: string): Promise<Connection>;\n\n/**\n * Creates connection and and registers it in the manager.\n */\nexport function createConnection(optionsOrConnectionNameFromConfig?: ConnectionOptions|string, ormConfigPath?: string): Promise<Connection> {\n    return getConnectionManager().createAndConnect(optionsOrConnectionNameFromConfig as any, ormConfigPath);\n}\n\n/**\n * Creates new connections and registers them in the manager.\n *\n * If array of connection options were not specified, then it will try to create them automatically\n * from ormconfig.json. You can also specify path to your custom ormconfig.json.\n *\n * In the case if options were not specified, and ormconfig.json file also wasn't found,\n * it will try to create connection from environment variables.\n * There are several environment variables you can set:\n *\n * - TYPEORM_DRIVER_TYPE - driver type. Can be \"mysql\", \"postgres\", \"mariadb\", \"sqlite\", \"oracle\" or \"mssql\".\n * - TYPEORM_URL - database connection url. Should be a string.\n * - TYPEORM_HOST - database host. Should be a string.\n * - TYPEORM_PORT - database access port. Should be a number.\n * - TYPEORM_USERNAME - database username. Should be a string.\n * - TYPEORM_PASSWORD - database user's password. Should be a string.\n * - TYPEORM_SID - database's SID. Used only for oracle databases. Should be a string.\n * - TYPEORM_STORAGE - database's storage url. Used only for sqlite databases. Should be a string.\n * - TYPEORM_USE_POOL - indicates if connection pooling should be enabled. By default its enabled. Should be boolean-like value.\n * - TYPEORM_DRIVER_EXTRA - extra options to be passed to the driver. Should be a serialized json string of options.\n * - TYPEORM_AUTO_SCHEMA_SYNC - indicates if automatic schema synchronization will be performed on each application run. Should be boolean-like value.\n * - TYPEORM_ENTITIES - list of directories containing entities to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_SUBSCRIBERS - list of directories containing subscribers to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_ENTITY_SCHEMAS - list of directories containing entity schemas to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_NAMING_STRATEGIES - list of directories containing custom naming strategies to load. Should be string - directory names (can be patterns) split by a comma.\n * - TYPEORM_LOGGING_QUERIES - indicates if each executed query must be logged. Should be boolean-like value.\n * - TYPEORM_LOGGING_FAILED_QUERIES - indicates if logger should log failed query's error. Should be boolean-like value.\n * - TYPEORM_LOGGING_ONLY_FAILED_QUERIES - indicates if only failed queries must be logged. Should be boolean-like value.\n *\n * TYPEORM_DRIVER_TYPE variable is required. Depend on the driver type some other variables may be required too.\n */\nexport function createConnections(): Promise<Connection[]>;\n\n/**\n * Creates connections from the given connection options and registers them in the manager.\n */\nexport function createConnections(options?: ConnectionOptions[]): Promise<Connection[]>;\n\n/**\n * Creates connection with the given connection name from the ormconfig.json file and registers it in the manager.\n * Optionally you can specify a path to custom ormconfig.json file.\n */\nexport function createConnections(ormConfigPath?: string): Promise<Connection[]>;\n\n/**\n * Creates connections and and registers them in the manager.\n */\nexport function createConnections(optionsOrOrmConfigFilePath?: ConnectionOptions[]|string): Promise<Connection[]> {\n    return getConnectionManager().createAndConnectToAll(optionsOrOrmConfigFilePath as any);\n}\n\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getConnection(connectionName: string = \"default\"): Connection {\n    return getConnectionManager().get(connectionName);\n}\n\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getEntityManager(connectionName: string = \"default\"): EntityManager {\n    return getConnectionManager().get(connectionName).entityManager;\n}\n\n/**\n * Gets repository for the given entity class.\n */\nexport function getRepository<Entity>(entityClass: ObjectType<Entity>, connectionName: string): Repository<Entity>;\n\n/**\n * Gets repository for the given entity name.\n */\nexport function getRepository<Entity>(entityName: string, connectionName: string): Repository<Entity>;\n\n/**\n * Gets repository for the given entity class or name.\n */\nexport function getRepository<Entity>(entityClassOrName: ObjectType<Entity>|string, connectionName: string = \"default\"): Repository<Entity> {\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClassOrName as any);\n}\n","export * from \"./typeorm/index\";","import {EntitySubscriberMetadataArgs} from \"../metadata-args/EntitySubscriberMetadataArgs\";\n\n/**\n * Contains metadata information about ORM event subscribers.\n */\nexport class EntitySubscriberMetadata {\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    constructor(args: EntitySubscriberMetadataArgs) {\n        this.target = args.target;\n    }\n\n}","/**\n * This represents metadata of some object.\n */\nexport interface TargetMetadata {\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n}\n","import {TargetMetadata} from \"./TargetMetadata\";\n\n/**\n * This represents metadata of some object's property.\n */\nexport interface PropertyMetadata extends TargetMetadata {\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n}","import {RelationCountMetadataArgs} from \"../metadata-args/RelationCountMetadataArgs\";\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Relation which need to count.\n     */\n    readonly relation: string|((object: any) => any);\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: RelationCountMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relation = args.relation;\n    }\n\n}","/**\n * Thrown when consumer tries to access entity manager before connection is established.\n */\nexport class CannotGetEntityManagerNotConnectedError extends Error {\n    name = \"CannotGetEntityManagerNotConnectedError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot get entity manager for \"${connectionName}\" connection because connection is not yet established.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when consumer tries to access repository before connection is established.\n */\nexport class NoConnectionForRepositoryError extends Error {\n    name = \"NoConnectionForRepositoryError\";\n\n    constructor(connectionName: string) {\n        super();\n        this.message = `Cannot get a Repository for \"${connectionName} connection, because connection with the database ` +\n            `is not established yet. Call connection#connect method to establish connection.`;\n        this.stack = new Error().stack;\n    }\n\n}","/**\n * Thrown when some unexpected error occur on driver packages load.\n */\nexport class DriverPackageLoadError extends Error {\n    name = \"DriverPackageLoadError\";\n\n    constructor() {\n        super();\n        this.message = `Cannot load driver dependencies. Try to install all required dependencies.`;\n    }\n\n}","/**\n * Thrown if database driver does not support pooling.\n */\nexport class DriverPoolingNotSupportedError extends Error {\n    name = \"DriverPoolingNotSupportedError\";\n\n    constructor(driverName: string) {\n        super();\n        this.message = `Connection pooling is not supported by (${driverName}) driver.`;\n    }\n\n}","/**\n */\nexport class MetadataWithSuchNameAlreadyExistsError extends Error {\n    name = \"MetadataWithSuchNameAlreadyExistsError\";\n\n    constructor(metadataType: string, name: string) {\n        super();\n        this.message = metadataType + \" metadata with such name \" + name + \" already exists. \" +\n            \"Do you apply decorator twice? Or maybe try to change a name?\";\n    }\n\n}","import {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nexport class CascadesNotAllowedError extends Error {\n    name = \"CascadesNotAllowedError\";\n\n    // todo: remove metadata attribute since its present in relation attribute\n    constructor(type: \"insert\"|\"update\"|\"remove\", metadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Cascades (${type}) are not allowed for the given relation ${metadata.name}#${relation.name}`;\n    }\n\n}","/**\n * Thrown . Theoretically can't be thrown.\n */\nexport class PersistedEntityNotFoundError extends Error {\n    name = \"PersistedEntityNotFoundError\";\n\n    constructor() {\n        super();\n        this.message = `Internal error. Persisted entity was not found in the list of prepared operated entities.`;\n    }\n\n}"],"sourceRoot":"."}