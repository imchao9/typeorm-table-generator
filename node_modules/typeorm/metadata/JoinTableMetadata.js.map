{"version":3,"sources":["../../src/metadata/JoinTableMetadata.ts"],"names":[],"mappings":"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","file":"JoinTableMetadata.js","sourcesContent":["import {RelationMetadata} from \"./RelationMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\n\n/**\n * JoinTableMetadata contains all information about relation's join table.\n */\nexport class JoinTableMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Relation - owner of this join table metadata.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join table name.\n     */\n    private readonly _name?: string;\n\n    /**\n     * Join column name.\n     */\n    private readonly _joinColumnName: string;\n\n    /**\n     * Join column referenced column name.\n     */\n    private readonly _joinColumnReferencedColumnName: string;\n\n    /**\n     * Join column name of the inverse side.\n     */\n    private readonly _inverseJoinColumnName: string;\n\n    /**\n     * Join column referenced column name of the inverse side.\n     */\n    private readonly _inverseJoinColumnReferencedColumnName: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: JoinTableMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this._name = args.name;\n\n        if (args.joinColumn) {\n            if (args.joinColumn.name)\n                this._joinColumnName = args.joinColumn.name;\n            if (args.joinColumn.referencedColumnName)\n                this._joinColumnReferencedColumnName = args.joinColumn.referencedColumnName;\n        }\n\n        if (args.inverseJoinColumn) {\n            if (args.inverseJoinColumn.name)\n                this._inverseJoinColumnName = args.inverseJoinColumn.name;\n            if (args.inverseJoinColumn.referencedColumnName)\n                this._inverseJoinColumnReferencedColumnName = args.inverseJoinColumn.referencedColumnName;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join table name.\n     */\n    get name() {\n        if (this._name)\n            return this._name;\n\n        return this.relation.entityMetadata.namingStrategy.joinTableName(\n            this.relation.entityMetadata.table.nameWithoutPrefix,\n            this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\n            this.relation.propertyName,\n            this.relation.hasInverseSide ? this.relation.inverseRelation.propertyName : \"\",\n            this.referencedColumn.name,\n            this.inverseReferencedColumn.name\n        );\n    }\n\n    /**\n     * Join column name.\n     */\n    get joinColumnName() {\n        if (this._joinColumnName)\n            return this._joinColumnName;\n\n        return this.relation\n            .entityMetadata\n            .namingStrategy\n            .joinTableColumnName(\n                this.relation.entityMetadata.table.nameWithoutPrefix,\n                this.referencedColumn.name,\n                this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\n                this.inverseReferencedColumn.name\n            );\n    }\n\n    /**\n     * Join column name of the inverse side.\n     */\n    get inverseJoinColumnName() {\n        if (this._inverseJoinColumnName)\n            return this._inverseJoinColumnName;\n\n        return this.relation\n            .entityMetadata\n            .namingStrategy\n            .joinTableInverseColumnName(\n                this.relation.inverseEntityMetadata.table.nameWithoutPrefix,\n                this.inverseReferencedColumn.name,\n                this.relation.entityMetadata.table.nameWithoutPrefix,\n                this.referencedColumn.name\n            );\n    }\n\n    /**\n     * Referenced join column.\n     */\n    get referencedColumn(): ColumnMetadata {\n        if (this._joinColumnReferencedColumnName) {\n            const referencedColumn = this.relation.entityMetadata.columns.find(column => column.name === this._joinColumnReferencedColumnName);\n            if (!referencedColumn)\n                throw new Error(`Referenced column ${this._joinColumnReferencedColumnName} was not found in entity ${this.name}`);\n\n            return referencedColumn;\n        }\n\n        if (this.relation.entityMetadata.primaryColumns.length > 1)\n            throw new Error(`Cannot automatically determine a referenced column of the \"${this.relation.entityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\n\n        return this.relation.entityMetadata.firstPrimaryColumn;\n    }\n\n    /**\n     * Referenced join column of the inverse side.\n     */\n    get inverseReferencedColumn(): ColumnMetadata {\n        if (this._inverseJoinColumnReferencedColumnName) {\n            const referencedColumn = this.relation.inverseEntityMetadata.columns.find(column => column.name === this._inverseJoinColumnReferencedColumnName);\n            if (!referencedColumn)\n                throw new Error(`Referenced column ${this._inverseJoinColumnReferencedColumnName} was not found in entity ${this.name}`);\n\n            return referencedColumn;\n        }\n\n        if (this.relation.inverseEntityMetadata.primaryColumns.length > 1)\n            throw new Error(`Cannot automatically determine inverse referenced column of the \"${this.relation.inverseEntityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\n\n        return this.relation.inverseEntityMetadata.firstPrimaryColumn;\n    }\n\n}"],"sourceRoot":".."}