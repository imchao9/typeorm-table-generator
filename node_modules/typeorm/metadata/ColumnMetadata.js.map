{"version":3,"sources":["../../src/metadata/ColumnMetadata.ts"],"names":[],"mappings":"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","file":"ColumnMetadata.js","sourcesContent":["import {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\nimport {ColumnType} from \"./types/ColumnTypes\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\n\n/**\n * Kinda type of the column. Not a type in the database, but locally used type to determine what kind of column\n * we are working with.\n * For example, \"primary\" means that it will be a primary column, or \"createDate\" means that it will create a create\n * date column.\n */\nexport type ColumnMode = \"regular\"|\"virtual\"|\"createDate\"|\"updateDate\"|\"version\"|\"treeChildrenCount\"|\"treeLevel\"|\"discriminator\"|\"parentId\";\n\n/**\n * This metadata contains all information about entity's column.\n */\nexport class ColumnMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata where this column metadata is.\n     */\n    embeddedMetadata: EmbeddedMetadata;\n\n    /**\n     * If this column is foreign key of some relation then this relation's metadata will be here.\n     */\n    relationMetadata: RelationMetadata;\n\n    // ---------------------------------------------------------------------\n    // Public Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string|\"__virtual__\";\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    /**\n     * The real reflected property type.\n     */\n    // readonly propertyType: string;\n\n    /**\n     * The database type of the column.\n     */\n    readonly type: ColumnType;\n\n    /**\n     * Column's mode in which this column is working.\n     */\n    readonly mode: ColumnMode;\n\n    /**\n     * Type's length in the database.\n     */\n    readonly length: string = \"\";\n\n    /**\n     * Indicates if this column is a primary key.\n     */\n    readonly isPrimary: boolean = false;\n\n    /**\n     * Indicates if this column is generated (auto increment or generated other way).\n     */\n    readonly isGenerated: boolean = false;\n\n    /**\n     * Indicates if value in the database should be unique or not.\n     */\n    readonly isUnique: boolean = false;\n\n    /**\n     * Indicates if column can contain nulls or not.\n     */\n    readonly isNullable: boolean = false;\n\n    /**\n     * Column comment.\n     */\n    readonly comment: string = \"\";\n\n    /**\n     * Default database value.\n     */\n    readonly default: any;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    readonly precision: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    readonly scale: number;\n\n    /**\n     * Indicates if this date column will contain a timezone.\n     * Used only for date-typed column types.\n     * Note that timezone option is not supported by all databases (only postgres for now).\n     */\n    readonly timezone: boolean;\n\n    /**\n     * Indicates if date object must be stored in given date's timezone.\n     * By default date is saved in UTC timezone.\n     * Works only with \"datetime\" columns.\n     */\n    readonly localTimezone?: boolean;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Column name to be used in the database.\n     */\n    private _name: string;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: ColumnMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n\n        if (args.mode)\n            this.mode = args.mode;\n        // if (args.propertyType)\n        //     this.propertyType = args.propertyType.toLowerCase();\n        if (args.options.name)\n            this._name = args.options.name;\n        if (args.options.type)\n            this.type = args.options.type;\n\n        if (args.options.length)\n            this.length = String(args.options.length);\n        if (args.options.primary)\n            this.isPrimary = args.options.primary;\n        if (args.options.generated)\n            this.isGenerated = args.options.generated;\n        if (args.options.unique)\n            this.isUnique = args.options.unique;\n        if (args.options.nullable)\n            this.isNullable = args.options.nullable;\n        if (args.options.comment)\n            this.comment = args.options.comment;\n        if (args.options.default !== undefined && args.options.default !== null)\n            this.default = args.options.default;\n        if (args.options.scale)\n            this.scale = args.options.scale;\n        if (args.options.precision)\n            this.precision = args.options.precision;\n        if (args.options.timezone)\n            this.timezone = args.options.timezone;\n        if (args.options.localTimezone)\n            this.localTimezone = args.options.localTimezone;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Gets column's entity target.\n     * Original target returns target of the class where column is.\n     * This class can be an abstract class, but column even is from that class,\n     * but its more related to a specific entity. That's why we need this field.\n     */\n    get entityTarget(): Function|string {\n        return this.entityMetadata.target;\n    }\n\n    /**\n     * Column name in the database.\n     */\n    get name(): string {\n\n        // if this column is embedded's column then apply different entity\n        if (this.embeddedMetadata)\n            return this.embeddedMetadata.entityMetadata.namingStrategy.embeddedColumnName(this.embeddedMetadata.propertyName, this.propertyName, this._name);\n\n        // if there is a naming strategy then use it to normalize propertyName as column name\n        if (this.entityMetadata)\n            return this.entityMetadata.namingStrategy.columnName(this.propertyName, this._name);\n\n        throw new Error(`Column ${this._name ? this._name + \" \" : \"\"}is not attached to any entity or embedded.`);\n    }\n\n    /**\n     * Indicates if this column is in embedded, not directly in the table.\n     */\n    get isInEmbedded(): boolean {\n        return !!this.embeddedMetadata;\n    }\n\n    /**\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n     */\n    get isVirtual() {\n        return this.mode === \"virtual\";\n    }\n\n    /**\n     * Indicates if column is a parent id. Parent id columns are not mapped to the entity.\n     */\n    get isParentId() {\n        return this.mode === \"parentId\";\n    }\n\n    /**\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n     */\n    get isDiscriminator() {\n        return this.mode === \"discriminator\";\n    }\n\n    /**\n     * Indicates if this column contains an entity creation date.\n     */\n    get isCreateDate() {\n        return this.mode === \"createDate\";\n    }\n\n    /**\n     * Indicates if this column contains an entity update date.\n     */\n    get isUpdateDate() {\n        return this.mode === \"updateDate\";\n    }\n\n    /**\n     * Indicates if this column contains an entity version.\n     */\n    get isVersion() {\n        return this.mode === \"version\";\n    }\n\n    /**\n     * If this column references some column, it gets the first referenced column of this column.\n     */\n    get referencedColumn(): ColumnMetadata|undefined {\n        const foreignKey = this.entityMetadata.foreignKeys.find(foreignKey => foreignKey.columns.indexOf(this) !== -1);\n        if (foreignKey) {\n            return foreignKey.referencedColumns[0];\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Gets embedded property in which column is.\n     */\n    get embeddedProperty() {\n        if (!this.embeddedMetadata)\n            throw new Error(`This column${ this._name ? this._name + \" \" : \"\" } is not in embedded entity.`);\n\n        return this.embeddedMetadata.propertyName;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    hasEntityValue(entity: any) {\n        if (!entity)\n            return false;\n\n        if (this.isInEmbedded) {\n            return  entity[this.embeddedProperty] !== undefined &&\n                    entity[this.embeddedProperty] !== null &&\n                    entity[this.embeddedProperty][this.propertyName] !== undefined &&\n                    entity[this.embeddedProperty][this.propertyName] !== null;\n\n        } else {\n            return  entity[this.propertyName] !== undefined &&\n                    entity[this.propertyName] !== null;\n        }\n    }\n\n    getEntityValue(entity: any) {\n        if (this.isInEmbedded) {\n            if (entity[this.embeddedProperty] === undefined ||\n                entity[this.embeddedProperty] === null)\n                return undefined;\n\n            return entity[this.embeddedProperty][this.propertyName];\n        } else {\n            return entity[this.propertyName];\n        }\n    }\n\n}"],"sourceRoot":".."}