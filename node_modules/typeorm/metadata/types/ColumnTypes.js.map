{"version":3,"sources":["../../src/metadata/types/ColumnTypes.ts"],"names":[],"mappings":"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","file":"ColumnTypes.js","sourcesContent":["/**\n * All data types that column can be.\n */\nexport type ColumnType = \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\n                         \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";\n\n/**\n * All data types that column can be.\n */\nexport class ColumnTypes {\n\n    /**\n     * SQL VARCHAR type. Your class's property type should be a \"string\".\n     */\n    static STRING: ColumnType = \"string\";\n\n    /**\n     * SQL CLOB type. Your class's property type should be a \"string\".\n     */\n    static TEXT: ColumnType = \"text\";\n\n    /**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     */\n    static NUMBER: ColumnType = \"number\";\n\n    /**\n     * SQL INT type. Your class's property type should be a \"number\".\n     */\n    static INTEGER: ColumnType = \"integer\";\n\n    /**\n     * SQL INT type. Your class's property type should be a \"number\".\n     */\n    static INT: ColumnType = \"int\";\n\n    /**\n     * SQL SMALLINT type. Your class's property type should be a \"number\".\n     */\n    static SMALLINT: ColumnType = \"smallint\";\n\n    /**\n     * SQL BIGINT type. Your class's property type should be a \"number\".\n     */\n    static BIGINT: ColumnType = \"bigint\";\n\n    /**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     */\n    static FLOAT: ColumnType = \"float\";\n\n    /**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     */\n    static DOUBLE: ColumnType = \"double\";\n\n    /**\n     * SQL DECIMAL type. Your class's property type should be a \"string\".\n     */\n    static DECIMAL: ColumnType = \"decimal\";\n\n    /**\n     * SQL DATETIME type. Your class's property type should be a \"Date\" object.\n     */\n    static DATE: ColumnType = \"date\";\n\n    /**\n     * SQL TIME type. Your class's property type should be a \"Date\" object.\n     */\n    static TIME: ColumnType = \"time\";\n\n    /**\n     * SQL DATETIME/TIMESTAMP type. Your class's property type should be a \"Date\" object.\n     */\n    static DATETIME: ColumnType = \"datetime\";\n\n    /**\n     * SQL BOOLEAN type. Your class's property type should be a \"boolean\".\n     */\n    static BOOLEAN: ColumnType = \"boolean\";\n\n    /**\n     * SQL CLOB type. Your class's property type should be any Object.\n     */\n    static JSON: ColumnType = \"json\";\n\n    /**\n     * Postgres jsonb type. Your class's property type should be any Object.\n     */\n    static JSONB: ColumnType = \"jsonb\";\n\n    /**\n     * SQL CLOB type. Your class's property type should be array of string. Note: value in this column should not contain\n     * a comma (\",\") since this symbol is used to create a string from the array, using .join(\",\") operator.\n     */\n    static SIMPLE_ARRAY: ColumnType = \"simple_array\";\n\n    /**\n     * UUID type. Serialized to a string in typescript or javascript\n     */\n    static UUID: ColumnType = \"uuid\";\n\n    /**\n     * Checks if given type in a string format is supported by ORM.\n     */\n    static isTypeSupported(type: string) {\n        return this.supportedTypes.indexOf(<ColumnType> type) !== -1;\n    }\n\n    /**\n     * Returns list of all supported types by the ORM.\n     */\n    static get supportedTypes() {\n        return [\n            this.STRING,\n            this.TEXT,\n            this.NUMBER,\n            this.INTEGER,\n            this.INT,\n            this.SMALLINT,\n            this.BIGINT,\n            this.FLOAT,\n            this.DOUBLE,\n            this.DECIMAL,\n            this.DATE,\n            this.TIME,\n            this.DATETIME,\n            this.BOOLEAN,\n            this.JSON,\n            this.JSONB,\n            this.SIMPLE_ARRAY,\n            this.UUID\n        ];\n    }\n\n    /**\n     * Tries to guess a column type from the given function.\n     */\n    static determineTypeFromFunction(type: Function): ColumnType {\n        if (type instanceof Date) {\n            return ColumnTypes.DATETIME;\n\n        } else if (type instanceof Function) {\n            const typeName = (<any>type).name.toLowerCase();\n            switch (typeName) {\n                case \"number\":\n                    return ColumnTypes.NUMBER;\n                case \"boolean\":\n                    return ColumnTypes.BOOLEAN;\n                case \"string\":\n                    return ColumnTypes.STRING;\n                case \"date\":\n                    return ColumnTypes.DATETIME;\n                case \"object\":\n                    return ColumnTypes.JSON;\n            }\n\n        } else if (type instanceof Object) {\n            return ColumnTypes.JSON;\n\n        }\n        throw new Error(`Column type of ${type} cannot be determined.`);\n        // return undefined;\n    }\n\n    static typeToString(type: Function): string {\n        return (type as any).name.toLowerCase();\n    }\n\n    /**\n     * Checks if column type is numeric.\n     */\n    static isNumeric(type: ColumnType) {\n        return  type === ColumnTypes.NUMBER ||\n                type === ColumnTypes.INT ||\n                type === ColumnTypes.INTEGER ||\n                type === ColumnTypes.BIGINT ||\n                type === ColumnTypes.SMALLINT ||\n                type === ColumnTypes.DOUBLE ||\n                type === ColumnTypes.FLOAT;\n    }\n\n}"],"sourceRoot":"../.."}