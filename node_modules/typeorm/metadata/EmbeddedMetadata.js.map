{"version":3,"sources":["../../src/metadata/EmbeddedMetadata.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH;IAmCI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,0BAAY,IAAc,EAAE,YAAoB,EAAE,KAAoB,EAAE,OAAyB;QAAjG,iBAQC;QAPG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACvB,MAAM,CAAC,gBAAgB,GAAG,KAAI,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;OAEG;IACH,iCAAM,GAAN;QACI,MAAM,CAAC,IAAK,IAAI,CAAC,IAAY,CAAC;IAClC,CAAC;IAEL,uBAAC;AAAD,CA5DA,AA4DC,IAAA;AA5DY,4CAAgB","file":"EmbeddedMetadata.js","sourcesContent":["import {EntityMetadata} from \"./EntityMetadata\";\nimport {TableMetadata} from \"./TableMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\n\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Its own entity metadata.\n     */\n    entityMetadata: EntityMetadata;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Property name on which this embedded is attached.\n     */\n    readonly propertyName: string;\n\n    /**\n     * Embeddable table.\n     */\n    readonly table: TableMetadata;\n\n    /**\n     * Embeddable table's columns.\n     */\n    readonly columns: ColumnMetadata[];\n\n    /**\n     * Embedded type.\n     */\n    readonly type: Function;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(type: Function, propertyName: string, table: TableMetadata, columns: ColumnMetadata[]) {\n        this.type = type;\n        this.propertyName = propertyName;\n        this.table = table;\n        this.columns = columns;\n        this.columns.forEach(column => {\n            column.embeddedMetadata = this;\n        });\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new embedded object.\n     */\n    create() {\n        return new (this.type as any);\n    }\n\n}"],"sourceRoot":".."}