{"version":3,"sources":["../../src/metadata/JoinColumnMetadata.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH;IAmCI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,4BAAY,IAA4B;QACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;IAC1D,CAAC;IASD,sBAAI,oCAAI;QAPR,wEAAwE;QACxE,YAAY;QACZ,wEAAwE;QAExE;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACzH,CAAC;;;OAAA;IAKD,sBAAI,gDAAgB;QAHpB;;WAEG;aACH;YAAA,iBAgBC;YAfG,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC5B,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,KAAI,CAAC,oBAAoB,EAAzC,CAAyC,CAAC,CAAC;gBAClI,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;oBAClB,MAAM,IAAI,KAAK,CAAC,uBAAqB,IAAI,CAAC,oBAAoB,iCAA4B,IAAI,CAAC,IAAM,CAAC,CAAC;gBAE3G,MAAM,CAAC,gBAAgB,CAAC;YAC5B,CAAC;YAED,IAAM,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;YAClE,IAAM,cAAc,GAAG,qBAAqB,CAAC,iCAAiC,CAAC;YAE/E,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,iEAA8D,qBAAqB,CAAC,IAAI,gGAA4F,CAAC,CAAC;YAE1M,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC;;;OAAA;IAEL,yBAAC;AAAD,CA9EA,AA8EC,IAAA;AA9EY,gDAAkB","file":"JoinColumnMetadata.js","sourcesContent":["import {RelationMetadata} from \"./RelationMetadata\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumnMetadata contains all information about relation's join column.\n */\nexport class JoinColumnMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Relation - owner of this join column metadata.\n     */\n    relation: RelationMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    readonly target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    readonly propertyName: string;\n\n    // ---------------------------------------------------------------------\n    // Readonly Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join column name.\n     */\n    private readonly _name: string|undefined;\n\n    /**\n     * Join column referenced column name.\n     */\n    private readonly referencedColumnName: string|undefined;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(args: JoinColumnMetadataArgs) {\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this._name = args.name;\n        this.referencedColumnName = args.referencedColumnName;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Join column name.\n     */\n    get name() {\n        return this.relation.entityMetadata.namingStrategy.joinColumnInverseSideName(this._name, this.relation.propertyName);\n    }\n\n    /**\n     * Referenced join column.\n     */\n    get referencedColumn(): ColumnMetadata {\n        if (this.referencedColumnName) {\n            const referencedColumn = this.relation.inverseEntityMetadata.allColumns.find(column => column.name === this.referencedColumnName);\n            if (!referencedColumn)\n                throw new Error(`Referenced column ${this.referencedColumnName} was not found in entity ${this.name}`);\n\n            return referencedColumn;\n        }\n\n        const inverseEntityMetadata = this.relation.inverseEntityMetadata;\n        const primaryColumns = inverseEntityMetadata.primaryColumnsWithParentIdColumns;\n\n        if (primaryColumns.length > 1)\n            throw new Error(`Cannot automatically determine a referenced column of the \"${inverseEntityMetadata.name}\", because it has multiple primary columns. Try to specify a referenced column explicitly.`);\n\n        return primaryColumns[0];\n    }\n\n}"],"sourceRoot":".."}