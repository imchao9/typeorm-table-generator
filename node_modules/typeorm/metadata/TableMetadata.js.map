{"version":3,"sources":["../../src/metadata/TableMetadata.ts"],"names":[],"mappings":"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","file":"TableMetadata.js","sourcesContent":["import {EntityMetadata} from \"./EntityMetadata\";\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {TableType, TableTypes} from \"./types/TableTypes\";\nimport {EntityMetadataAlreadySetError} from \"./error/EntityMetadataAlreadySetError\";\nimport {EntityMetadataNotSetError} from \"./error/EntityMetadataNotSetError\";\n\n/**\n * TableMetadata contains all entity's table metadata and information.\n */\nexport class TableMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class to which metadata is applied.\n     * Function target is a table defined in the class.\n     * String target is a table defined in a json schema.\n     * \"__virtual__\" is a table defined without target class (like junction tables).\n     */\n    readonly target: Function|string|\"__virtual__\";\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    readonly _orderBy?: OrderByCondition|((object: any) => OrderByCondition|any);\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    readonly engine?: string;\n\n    /**\n     * Whether table must be synced during schema build or not\n     */\n    readonly skipSchemaSync?: boolean;\n\n    // ---------------------------------------------------------------------\n    // Private Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Table type. Tables can be abstract, closure, junction, embedded, etc.\n     */\n    private readonly tableType: TableType = \"regular\";\n\n    /**\n     * Table name in the database. If name is not set then table's name will be generated from target's name.\n     */\n    private readonly _name?: string;\n\n    /**\n     * EntityMetadata of this table metadata, where this table metadata contained.\n     */\n    private _entityMetadata?: EntityMetadata;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new TableMetadata based on the given arguments object.\n     */\n    constructor(args: TableMetadataArgs) {\n        this.target = args.target;\n        this.tableType = args.type;\n        this._name = args.name;\n        this._orderBy = args.orderBy;\n        this.engine = args.engine;\n        this.skipSchemaSync = args.skipSchemaSync;\n    }\n\n    // ---------------------------------------------------------------------\n    // Accessors\n    // ---------------------------------------------------------------------\n\n    /**\n     * Sets the entity metadata of this table metadata.\n     * Note that entity metadata can be set only once.\n     * Once you set it, you can't change it anymore.\n     */\n    set entityMetadata(metadata: EntityMetadata) {\n        if (this._entityMetadata)\n            throw new EntityMetadataAlreadySetError(TableMetadata, this.target, this._name);\n\n        this._entityMetadata = metadata;\n    }\n\n    /**\n     * Gets entity metadata of this table metadata.\n     * If entity metadata was not set then exception will be thrown.\n     */\n    get entityMetadata(): EntityMetadata {\n        if (!this._entityMetadata)\n            throw new EntityMetadataNotSetError(TableMetadata, this.target, this._name);\n\n        return this._entityMetadata;\n    }\n\n    /**\n     * Gets the table name without global table prefix.\n     * When querying table you need a table name with prefix, but in some scenarios,\n     * for example when you want to name a junction table that contains names of two other tables,\n     * you may want a table name without prefix.\n     */\n    get nameWithoutPrefix() {\n        if (this.isClosureJunction && this._name)\n            return this.entityMetadata.namingStrategy.closureJunctionTableName(this._name);\n\n        // otherwise generate table name from target's name\n        const name = this.target instanceof Function ? (this.target as any).name : this.target;\n        return this.entityMetadata.namingStrategy.tableName(name, this._name);\n    }\n\n    /**\n     * Table name in the database.\n     * This name includes global table prefix if it was set.\n     */\n    get name(): string {\n        if (this.entityMetadata.tablesPrefix)\n            return this.entityMetadata.namingStrategy.prefixTableName(this.entityMetadata.tablesPrefix, this.nameWithoutPrefix);\n\n        return this.nameWithoutPrefix;\n    }\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     * If default order by was not set, then returns undefined.\n     */\n    get orderBy(): OrderByCondition|undefined {\n        if (this._orderBy instanceof Function)\n            return this._orderBy(this.entityMetadata.createPropertiesMap());\n\n        return this._orderBy;\n    }\n\n    /**\n     * Checks if this table is regular.\n     * All non-specific tables are just regular tables. Its a default table type.\n     */\n    get isRegular() {\n        return this.tableType === TableTypes.REGULAR;\n    }\n\n    /**\n     * Checks if this table is abstract.\n     * This type is for the tables that does not exist in the database,\n     * but provide columns and relations for the tables of the child classes who inherit them.\n     */\n    get isAbstract() {\n        return this.tableType === TableTypes.ABSTRACT;\n    }\n\n    /**\n     * Checks if this table is abstract.\n     * Junction table is a table automatically created by many-to-many relationship.\n     */\n    get isJunction() {\n        return this.tableType === TableTypes.JUNCTION;\n    }\n\n    /**\n     * Checks if this table is a closure table.\n     * Closure table is one of the tree-specific tables that supports closure database pattern.\n     */\n    get isClosure() {\n        return this.tableType === TableTypes.CLOSURE;\n    }\n\n    /**\n     * Checks if this table is a junction table of the closure table.\n     * This type is for tables that contain junction metadata of the closure tables.\n     */\n    get isClosureJunction() {\n        return this.tableType === TableTypes.CLOSURE_JUNCTION;\n    }\n\n    /**\n     * Checks if this table is an embeddable table.\n     * Embeddable tables are not stored in the database as separate tables.\n     * Instead their columns are embed into tables who owns them.\n     */\n    get isEmbeddable() {\n        return this.tableType === TableTypes.EMBEDDABLE;\n    }\n\n    /**\n     * Checks if this table is a single table child.\n     * Special table type for tables that are mapped into single table using Single Table Inheritance pattern.\n     */\n    get isSingleTableChild() {\n        return this.tableType === TableTypes.SINGLE_TABLE_CHILD;\n    }\n\n    /**\n     * Checks if this table is a class table child.\n     * Special table type for tables that are mapped into multiple tables using Class Table Inheritance pattern.\n     */\n    get isClassTableChild() {\n        return this.tableType === TableTypes.CLASS_TABLE_CHILD;\n    }\n\n}\n"],"sourceRoot":".."}