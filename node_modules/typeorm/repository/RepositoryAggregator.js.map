{"version":3,"sources":["../../src/repository/RepositoryAggregator.ts"],"names":[],"mappings":";;AAIA,kCAA0C;AAC1C,yDAAsD;AAItD;;GAEG;AACH;IA0BI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,8BAAY,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;QACnG,IAAM,iBAAiB,GAAG,wBAAgB,CAAC,qCAAiB,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,GAAG,iBAAiB,CAAC,oBAAoB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QAC9H,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QACpG,CAAC;QAED,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,wBAAwB,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;IACrI,CAAC;IAEL,2BAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,oDAAoB","file":"RepositoryAggregator.js","sourcesContent":["import {Repository} from \"./Repository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {SpecificRepository} from \"./SpecificRepository\";\nimport {Connection} from \"../connection/Connection\";\nimport {getFromContainer} from \"../index\";\nimport {RepositoryFactory} from \"./RepositoryFactory\";\nimport {TreeRepository} from \"./TreeRepository\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\n\n/**\n * Aggregates all repositories of the specific metadata.\n */\nexport class RepositoryAggregator {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata which owns repositories.\n     */\n    public readonly metadata: EntityMetadata;\n\n    /**\n     * Ordinary repository.\n     */\n    public readonly repository: Repository<any>;\n\n    /**\n     * Tree repository.\n     */\n    public readonly treeRepository?: TreeRepository<any>;\n\n    /**\n     * Repository with specific functions.\n     */\n    public readonly specificRepository: SpecificRepository<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider) {\n        const repositoryFactory = getFromContainer(RepositoryFactory);\n        this.metadata = metadata;\n\n        if (metadata.table.isClosure) {\n            this.repository = this.treeRepository = repositoryFactory.createTreeRepository(connection, metadata, queryRunnerProvider);\n        } else {\n            this.repository = repositoryFactory.createRepository(connection, metadata, queryRunnerProvider);\n        }\n\n        this.specificRepository = repositoryFactory.createSpecificRepository(connection, metadata, this.repository, queryRunnerProvider);\n    }\n\n}"],"sourceRoot":".."}