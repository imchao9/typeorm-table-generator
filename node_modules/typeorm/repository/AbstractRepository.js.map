{"version":3,"sources":["../../src/repository/AbstractRepository.ts"],"names":[],"mappings":";;AAQA,yGAAsG;AAEtG;;;;;;GAMG;AACH;IAAA;IAsGA,CAAC;IApFG,sBAAc,6CAAa;QAP3B,4EAA4E;QAC5E,sBAAsB;QACtB,4EAA4E;QAE5E;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QACzC,CAAC;;;OAAA;IAMD,sBAAc,0CAAU;QAJxB;;;WAGG;aACH;YACI,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gBACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAS,MAAM,CAAC,CAAC;QACzD,CAAC;;;OAAA;IAMD,sBAAc,8CAAc;QAJ5B;;;WAGG;aACH;YACI,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gBACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAS,MAAM,CAAC,CAAC;QAC7D,CAAC;;;OAAA;IAMD,sBAAc,kDAAkB;QAJhC;;;WAGG;aACH;YACI,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gBACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAS,MAAM,CAAC,CAAC;QACjE,CAAC;;;OAAA;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;OAGG;IACO,+CAAkB,GAA5B,UAA6B,KAAa;QACtC,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3E,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;YACR,MAAM,IAAI,+EAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACO,kDAAqB,GAA/B,UAAmC,MAAqB,EAAE,KAAa;QACnE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACO,6CAAgB,GAA1B,UAA8B,MAAqB;QAC/C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACO,iDAAoB,GAA9B,UAAkC,MAAqB;QACnD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACO,qDAAwB,GAAlC,UAAsC,MAAqB;QACvD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IAC5D,CAAC;IAEL,yBAAC;AAAD,CAtGA,AAsGC,IAAA;AAtGY,gDAAkB","file":"AbstractRepository.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {Repository} from \"./Repository\";\nimport {TreeRepository} from \"./TreeRepository\";\nimport {SpecificRepository} from \"./SpecificRepository\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {CustomRepositoryDoesNotHaveEntityError} from \"./error/CustomRepositoryDoesNotHaveEntityError\";\n\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nexport class AbstractRepository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this repository.\n     */\n    protected connection: Connection;\n\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity.\n     */\n    protected get entityManager(): EntityManager {\n        return this.connection.entityManager;\n    }\n\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get repository(): Repository<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getRepository<Entity>(target);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get treeRepository(): TreeRepository<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getTreeRepository<Entity>(target);\n    }\n\n    /**\n     * Gets the original ORM specific repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get specificRepository(): SpecificRepository<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this as any);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getSpecificRepository<Entity>(target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected createQueryBuilder(alias: string): QueryBuilder<Entity> {\n        const target = this.connection.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n\n        return this.connection.getRepository(target).createQueryBuilder(alias);\n    }\n\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    protected createQueryBuilderFor<T>(entity: ObjectType<T>, alias: string): QueryBuilder<T> {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    }\n\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    protected getRepositoryFor<T>(entity: ObjectType<T>): Repository<T> {\n        return this.entityManager.getRepository(entity);\n    }\n\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    protected getTreeRepositoryFor<T>(entity: ObjectType<T>): TreeRepository<T> {\n        return this.entityManager.getTreeRepository(entity);\n    }\n\n    /**\n     * Gets the original ORM specific repository for the given entity class.\n     */\n    protected getSpecificRepositoryFor<T>(entity: ObjectType<T>): SpecificRepository<T> {\n        return this.entityManager.getSpecificRepository(entity);\n    }\n\n}"],"sourceRoot":".."}