{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {QueryBuilder} from \"../query-builder/QueryBuilder\";\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport {FindOptions} from \"../find-options/FindOptions\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this repository.\n     */\n    protected connection: Connection;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    protected metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    protected queryRunnerProvider?: QueryRunnerProvider;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity contains compose ids, then it checks them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.metadata.hasId(entity);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias: string, queryRunnerProvider?: QueryRunnerProvider): QueryBuilder<Entity> {\n        return new QueryBuilder(this.connection, queryRunnerProvider || this.queryRunnerProvider)\n            .select(alias)\n            .from(this.metadata.target, alias);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(plainObjects: Object[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(plainObject: Object): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainObjectOrObjects?: Object|Object[]): Entity|Entity[] {\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(object => this.create(object as Object));\n\n        const newEntity: Entity = this.metadata.create();\n        if (plainObjectOrObjects) {\n            const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n            plainObjectToEntityTransformer.transform(newEntity, plainObjectOrObjects, this.metadata);\n        }\n\n        return newEntity;\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    preload(object: Object): Promise<Entity> {\n        const queryBuilder = this.createQueryBuilder(this.metadata.table.name);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer();\n        return plainObjectToDatabaseEntityTransformer.transform(object, this.metadata, queryBuilder);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a one new entity.\n     */\n    merge(...objects: ObjectLiteral[]): Entity {\n        const newEntity: Entity = this.metadata.create();\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n        objects.forEach(object => plainObjectToEntityTransformer.transform(newEntity, object, this.metadata));\n        return newEntity;\n    }\n\n    /**\n     * Persists (saves) all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    async persist(entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Persists (saves) a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    async persist(entity: Entity): Promise<Entity>;\n\n    /**\n     * Persists one or many given entities.\n     */\n    async persist(entityOrEntities: Entity|Entity[]): Promise<Entity|Entity[]> {\n\n        // if multiple entities given then go throw all of them and save them\n        if (entityOrEntities instanceof Array)\n            return Promise.all(entityOrEntities.map(entity => this.persist(entity)));\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        try {\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\n            await databaseEntityLoader.persist(entityOrEntities, this.metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n            return entityOrEntities;\n\n        } finally {\n            if (!this.queryRunnerProvider) // release it only if its created by this method\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    async remove(entities: Entity[]): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    async remove(entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    async remove(entityOrEntities: Entity|Entity[]): Promise<Entity|Entity[]> {\n\n        // if multiple entities given then go throw all of them and save them\n        if (entityOrEntities instanceof Array)\n            return Promise.all(entityOrEntities.map(entity => this.remove(entity)));\n\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        try {\n            const transactionEntityManager = this.connection.createEntityManagerWithSingleDatabaseConnection(queryRunnerProvider);\n\n            const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunnerProvider);\n            await databaseEntityLoader.remove(entityOrEntities, this.metadata);\n\n            const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunnerProvider);\n            await executor.execute(databaseEntityLoader.operateSubjects);\n\n            return entityOrEntities;\n\n        } finally {\n            if (!this.queryRunnerProvider) // release it only if its created by this method\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Counts all entities.\n     */\n    async count(): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    async count(conditions: ObjectLiteral): Promise<number>;\n\n    /**\n     * Counts entities with given find options.\n     */\n    async count(options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions and find options.\n     */\n    async count(conditions: ObjectLiteral, options: FindOptions): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions and/or find options.\n     */\n    async count(conditionsOrFindOptions?: ObjectLiteral | FindOptions, options?: FindOptions): Promise<number> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n                   .getCount();\n    }\n\n    /**\n     * Finds all entities.\n     */\n    async find(): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    async find(conditions: ObjectLiteral): Promise<Entity[]>;\n\n    /**\n     * Finds entities with given find options.\n     */\n    async find(options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions and find options.\n     */\n    async find(conditions: ObjectLiteral, options: FindOptions): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions and/or find options.\n     */\n    async find(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity[]> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n            .getMany();\n    }\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(conditions: ObjectLiteral): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(conditions: ObjectLiteral, options: FindOptions): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (maxResults, firstResult) options.\n     */\n    async findAndCount(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<[ Entity[], number ]> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n            .getManyAndCount();\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    async findOne(): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    async findOne(conditions: ObjectLiteral): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne(options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions and find options.\n     */\n    async findOne(conditions: ObjectLiteral, options: FindOptions): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): Promise<Entity|undefined> {\n        return this.createFindQueryBuilder(conditionsOrFindOptions, options)\n            .getOne();\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    async findByIds(ids: any[], options?: FindOptions): Promise<Entity[]> {\n        const qb = this.createFindQueryBuilder(undefined, options);\n        return qb.andWhereInIds(ids).getMany();\n    }\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options can be applied.\n     */\n    async findOneById(id: any, options?: FindOptions): Promise<Entity|undefined> {\n        const qb = this.createFindQueryBuilder(undefined, options);\n        return qb.andWhereInIds([id]).getOne();\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        try {\n            return await queryRunner.query(query, parameters); // await is needed here because we are using finally\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n        }\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided repository.\n     */\n    async transaction(runInTransaction: (repository: Repository<Entity>) => Promise<any>|any): Promise<any> {\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver, true);\n        const queryRunner = await queryRunnerProvider.provide();\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        const transactionRepository = new Repository<any>();\n        (transactionRepository as any)[\"connection\"] = this.connection;\n        (transactionRepository as any)[\"metadata\"] = this.metadata;\n        (transactionRepository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\n        // todo: same code in the repository factory. probably better to use repository factory here too\n\n        try {\n            await queryRunner.beginTransaction();\n            const result = await runInTransaction(transactionRepository);\n            await queryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n            throw err;\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n            if (!this.queryRunnerProvider) // if we used a new query runner provider then release it\n                await queryRunnerProvider.releaseReused();\n        }\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     */\n    async clear(): Promise<void> {\n        const queryRunnerProvider = this.queryRunnerProvider || new QueryRunnerProvider(this.connection.driver);\n        const queryRunner = await queryRunnerProvider.provide();\n        try {\n            return await queryRunner.truncate(this.metadata.table.name); // await is needed here because we are using finally\n\n        } finally {\n            await queryRunnerProvider.release(queryRunner);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a query builder from the given conditions or find options.\n     * Used to create a query builder for find* methods.\n     */\n    protected createFindQueryBuilder(conditionsOrFindOptions?: ObjectLiteral|FindOptions, options?: FindOptions): QueryBuilder<Entity> {\n        const findOptions = FindOptionsUtils.isFindOptions(conditionsOrFindOptions) ? conditionsOrFindOptions : options as FindOptions;\n        const conditions = FindOptionsUtils.isFindOptions(conditionsOrFindOptions) ? undefined : conditionsOrFindOptions;\n\n        const alias = findOptions ? findOptions.alias : this.metadata.table.name;\n        const qb = this.createQueryBuilder(alias);\n\n        // if find options are given then apply them to query builder\n        if (findOptions)\n            FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\n\n        // if conditions are given then apply them to query builder\n        if (conditions) {\n            Object.keys(conditions).forEach(key => {\n                const name = key.indexOf(\".\") === -1 ? alias + \".\" + key : key;\n                if (conditions![key] === null) {\n                    qb.andWhere(name + \" IS NULL\");\n\n                } else {\n                    qb.andWhere(name + \"=:\" + key);\n                }\n            });\n            qb.setParameters(conditions);\n        }\n\n        return qb;\n    }\n\n}"],"sourceRoot":".."}