{"version":3,"sources":["../../src/repository/RepositoryFactory.ts"],"names":[],"mappings":";;AAAA,mDAAgD;AAGhD,2CAAwC;AACxC,2DAAwD;AAGxD;;GAEG;AACH;IAAA;IAyCA,CAAC;IAvCG,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,4CAAgB,GAAhB,UAAiB,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;QAExG,4HAA4H;QAC5H,kEAAkE;QAClE,IAAM,UAAU,GAAG,IAAI,uBAAU,EAAO,CAAC;QACxC,UAAkB,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;QAC9C,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAC1C,UAAkB,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,gDAAoB,GAApB,UAAqB,UAAsB,EAAE,QAAwB,EAAE,mBAAyC;QAE5G,4HAA4H;QAC5H,kEAAkE;QAClE,IAAM,UAAU,GAAG,IAAI,+BAAc,EAAO,CAAC;QAC5C,UAAkB,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;QAC9C,UAAkB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAC1C,UAAkB,CAAC,qBAAqB,CAAC,GAAG,mBAAmB,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,oDAAwB,GAAxB,UAAyB,UAAsB,EAAE,QAAwB,EAAE,UAA2B,EAAE,mBAAyC;QAC7I,MAAM,CAAC,IAAI,uCAAkB,CAAC,UAAU,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;IAC7E,CAAC;IAEL,wBAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,8CAAiB","file":"RepositoryFactory.js","sourcesContent":["import {TreeRepository} from \"./TreeRepository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {Repository} from \"./Repository\";\nimport {SpecificRepository} from \"./SpecificRepository\";\nimport {QueryRunnerProvider} from \"../query-runner/QueryRunnerProvider\";\n\n/**\n * Factory used to create different types of repositories.\n */\nexport class RepositoryFactory {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a regular repository.\n     */\n    createRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): Repository<any> {\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        const repository = new Repository<any>();\n        (repository as any)[\"connection\"] = connection;\n        (repository as any)[\"metadata\"] = metadata;\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\n        return repository;\n    }\n\n    /**\n     * Creates a tree repository.\n     */\n    createTreeRepository(connection: Connection, metadata: EntityMetadata, queryRunnerProvider?: QueryRunnerProvider): TreeRepository<any> {\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        const repository = new TreeRepository<any>();\n        (repository as any)[\"connection\"] = connection;\n        (repository as any)[\"metadata\"] = metadata;\n        (repository as any)[\"queryRunnerProvider\"] = queryRunnerProvider;\n        return repository;\n    }\n\n    /**\n     * Creates a specific repository.\n     */\n    createSpecificRepository(connection: Connection, metadata: EntityMetadata, repository: Repository<any>, queryRunnerProvider?: QueryRunnerProvider): SpecificRepository<any> {\n        return new SpecificRepository(connection, metadata, queryRunnerProvider);\n    }\n\n}"],"sourceRoot":".."}