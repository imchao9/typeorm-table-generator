{"version":3,"sources":["../../src/decorator/EntityRepository.ts"],"names":[],"mappings":";;AAAA,kCAAgD;AAiBhD;;;;GAIG;AACH,0BAAiC,eAAqD,EAAE,YAAyC;IAC7H,IAAM,MAAM,GAAG,eAAe,YAAY,QAAQ,GAAG,eAA2B,GAAG,SAAS,CAAC;IAC7F,IAAM,OAAO,GAAG,eAAe,YAAY,QAAQ,GAAG,YAAY,GAAG,eAA6C,CAAC;IACnH,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,IAAI,GAAiC;YACvC,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC;SACpD,CAAC;QACF,8BAAsB,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC;AACN,CAAC;AAXD,4CAWC","file":"EntityRepository.js","sourcesContent":["import {getMetadataArgsStorage} from \"../index\";\nimport {EntityRepositoryMetadataArgs} from \"../metadata-args/EntityRepositoryMetadataArgs\";\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can either manage some specific entity, either just be generic.\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\n */\nexport function EntityRepository(entity?: Function, options?: { useContainer?: boolean }): Function;\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can either manage some specific entity, either just be generic.\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\n */\nexport function EntityRepository(options?: { useContainer?: boolean }): Function;\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can either manage some specific entity, either just be generic.\n * Custom repository can extend AbstractRepository or regular Repository or TreeRepository.\n */\nexport function EntityRepository(entityOrOptions?: Function|{ useContainer?: boolean }, maybeOptions?: { useContainer?: boolean }): Function {\n    const entity = entityOrOptions instanceof Function ? entityOrOptions as Function : undefined;\n    const options = entityOrOptions instanceof Function ? maybeOptions : entityOrOptions as { useContainer?: boolean };\n    return function (target: Function) {\n        const args: EntityRepositoryMetadataArgs = {\n            target: target,\n            entity: entity,\n            useContainer: !!(options && options.useContainer)\n        };\n        getMetadataArgsStorage().entityRepositories.add(args);\n    };\n}\n"],"sourceRoot":".."}