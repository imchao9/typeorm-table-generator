{"version":3,"sources":["../../src/decorator/columns/Column.ts"],"names":[],"mappings":";;AACA,8EAA2E;AAC3E,sFAAmF;AACnF,qCAAmD;AACnD,gEAAyE;AA2BzE;;;GAGG;AACH,gBAAuB,aAAwC,EAAE,OAAuB;IACpF,IAAI,IAA0B,CAAC;IAC/B,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC;QACpC,IAAI,GAAgB,aAAa,CAAC;IAEtC,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACvB,OAAO,GAAmB,aAAa,CAAC;QACxC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;IAC9B,CAAC;IACD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,8FAA8F;QAC9F,qHAAqH;QAErH,uDAAuD;QACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACR,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,GAAG,SAAS,CAAC;YACpJ,EAAE,CAAC,CAAC,mBAAmB,CAAC;gBACpB,IAAI,GAAG,yBAAW,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,CAAC;QAC1E,CAAC;QAED,kEAAkE;QAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAmB,CAAC;QAE5C,yGAAyG;QACzG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;YACtB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;QAEtE,yFAAyF;QACzF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;YACd,MAAM,IAAI,mDAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAE7D,uDAAuD;QACvD,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC;YAClB,MAAM,IAAI,2DAA4B,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAEjE,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC;AACN,CAAC;AA9CD,wBA8CC","file":"Column.js","sourcesContent":["import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnTypeUndefinedError} from \"../error/ColumnTypeUndefinedError\";\nimport {GeneratedOnlyForPrimaryError} from \"../error/GeneratedOnlyForPrimaryError\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnType, ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\n * decorator will be persisted to the database when entity be saved.\n */\nexport function Column(): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: ColumnType): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(options: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: ColumnType, options: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\n    let type: ColumnType|undefined;\n    if (typeof typeOrOptions === \"string\") {\n        type = <ColumnType> typeOrOptions;\n\n    } else if (typeOrOptions) {\n        options = <ColumnOptions> typeOrOptions;\n        type = typeOrOptions.type;\n    }\n    return function (object: Object, propertyName: string) {\n\n        // todo: need to store not string type, but original type instead? (like in relation metadata)\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if type is not given implicitly then try to guess it\n        if (!type) {\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n            if (reflectMetadataType)\n                type = ColumnTypes.determineTypeFromFunction(reflectMetadataType);\n        }\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options = Object.assign({ type: type } as ColumnOptions, options);\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName);\n\n        // check if auto increment is not set for simple column\n        if (options.generated)\n            throw new GeneratedOnlyForPrimaryError(object, propertyName);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n"],"sourceRoot":"../.."}