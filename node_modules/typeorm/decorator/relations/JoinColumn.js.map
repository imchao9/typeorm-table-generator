{"version":3,"sources":["../../src/decorator/relations/JoinColumn.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAInD;;;;GAIG;AACH,oBAA2B,OAA2B;IAClD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,OAAO,GAAG,OAAO,IAAI,EAAuB,CAAC;QAC7C,IAAM,IAAI,GAA2B;YACjC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;SACrD,CAAC;QACF,8BAAsB,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC;AACN,CAAC;AAXD,gCAWC","file":"JoinColumn.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\nimport {JoinColumnOptions} from \"../options/JoinColumnOptions\";\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options?: JoinColumnOptions): Function {\n    return function (object: Object, propertyName: string) {\n        options = options || {} as JoinColumnOptions;\n        const args: JoinColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            referencedColumnName: options.referencedColumnName\n        };\n        getMetadataArgsStorage().joinColumns.add(args);\n    };\n}\n\n"],"sourceRoot":"../.."}