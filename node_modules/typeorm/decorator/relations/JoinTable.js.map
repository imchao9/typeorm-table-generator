{"version":3,"sources":["../../src/decorator/relations/JoinTable.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAInD;;;GAGG;AACH,mBAA0B,OAA0B;IAChD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,OAAO,GAAG,OAAO,IAAI,EAAsB,CAAC;QAC5C,IAAM,IAAI,GAA0B;YAChC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;SAC/C,CAAC;QACF,8BAAsB,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC;AACN,CAAC;AAZD,8BAYC","file":"JoinTable.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\nimport {JoinTableOptions} from \"../options/JoinTableOptions\";\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options?: JoinTableOptions): Function {\n    return function (object: Object, propertyName: string) {\n        options = options || {} as JoinTableOptions;\n        const args: JoinTableMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumn: options.joinColumn,\n            inverseJoinColumn: options.inverseJoinColumn\n        };\n        getMetadataArgsStorage().joinTables.add(args);\n    };\n}\n\n"],"sourceRoot":"../.."}