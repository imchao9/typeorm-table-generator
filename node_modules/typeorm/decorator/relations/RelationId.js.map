{"version":3,"sources":["../../src/decorator/relations/RelationId.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAGnD;;GAEG;AACH,oBAA8B,QAAqC;IAC/D,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAM,IAAI,GAA2B;YACjC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACrB,CAAC;QACF,8BAAsB,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC;AACN,CAAC;AATD,gCASC","file":"RelationId.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\n\n/**\n * Special decorator used to extract relation id into separate entity property.\n */\nexport function RelationId<T>(relation: string|((object: T) => any)): Function {\n    return function (object: Object, propertyName: string) {\n        const args: RelationIdMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation\n        };\n        getMetadataArgsStorage().relationIds.add(args);\n    };\n}\n\n"],"sourceRoot":"../.."}