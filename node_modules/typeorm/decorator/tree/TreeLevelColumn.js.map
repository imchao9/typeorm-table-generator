{"version":3,"sources":["../../src/decorator/tree/TreeLevelColumn.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AACnD,gEAA6D;AAI7D;;GAEG;AACH;IACI,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,qHAAqH;QAErH,0FAA0F;QAC1F,IAAM,OAAO,GAAkB,EAAE,IAAI,EAAE,yBAAW,CAAC,OAAO,EAAE,CAAC;QAE7D,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC;AACN,CAAC;AAlBD,0CAkBC","file":"TreeLevelColumn.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\n */\nexport function TreeLevelColumn(): Function {\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // implicitly set a type, because this column's type cannot be anything else except number\n        const options: ColumnOptions = { type: ColumnTypes.INTEGER };\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"treeLevel\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.add(args);\n    };\n}\n\n"],"sourceRoot":"../.."}