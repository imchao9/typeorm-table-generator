{"version":3,"sources":["../../src/driver/websql/WebsqlDriver.ts"],"names":[],"mappings":"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","file":"WebsqlDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {Logger} from \"../../logger/Logger\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {WebsqlQueryRunner} from \"./WebsqlQueryRunner\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Declare a global function that is only available in browsers that support WebSQL.\n */\ndeclare function openDatabase(...params: any[]): any;\n\n/**\n * Organizes communication with WebSQL in the browser.\n */\nexport class WebsqlDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection to database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DriverOptions, logger: Logger) {\n\n        this.options = DriverUtils.buildDriverOptions(options);\n        this.logger = logger;\n\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        // todo: what about extra options: version, description, size\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            database: this.options.database,\n        }, this.options.extra || {});\n\n        return new Promise<void>((ok, fail) => {\n            const connection = openDatabase(\n                options.database,\n                options.version,\n                options.description,\n                options.size,\n            );\n            this.databaseConnection = {\n                id: 1,\n                connection: connection,\n                isTransactionActive: false\n            };\n            ok();\n        });\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.databaseConnection)\n            throw new ConnectionIsNotSetError(\"websql\");\n\n        return new Promise<void>((ok, fail) => {\n            // const handler = (err: any) => err ? fail(err) : ok();\n            // todo: find out how to close connection\n            ok();\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection)\n            return Promise.reject(new ConnectionIsNotSetError(\"websql\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new WebsqlQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\n        };\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            escapedParameters.push(parameters[key.substr(1)]);\n            return \"?\";\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return columnName; // \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return aliasName; // \"`\" + aliasName + \"`\";\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return tableName; // \"`\" + tableName + \"`\";\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (columnMetadata.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n                return JSON.parse(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"websql\");\n    }\n\n}"],"sourceRoot":"../.."}