{"version":3,"sources":["../../src/driver/sqlite/SqliteDriver.ts"],"names":[],"mappings":"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","file":"SqliteDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Logger} from \"../../logger/Logger\";\nimport {SqliteQueryRunner} from \"./SqliteQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class SqliteDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * SQLite library.\n     */\n    protected sqlite: any;\n\n    /**\n     * Connection to SQLite database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOptions: DriverOptions, logger: Logger, sqlite?: any) {\n\n        this.options = connectionOptions;\n        this.logger = logger;\n        this.sqlite = sqlite;\n\n        // validate options to make sure everything is set\n        if (!this.options.storage)\n            throw new DriverOptionNotSetError(\"storage\");\n\n        // if sqlite package instance was not set explicitly then try to load it\n        if (!sqlite)\n            this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    connect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            const connection = new this.sqlite.Database(this.options.storage, (err: any) => {\n                if (err)\n                    return fail(err);\n\n                this.databaseConnection = {\n                    id: 1,\n                    connection: connection,\n                    isTransactionActive: false\n                };\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete to work with sqlite.\n                connection.run(`PRAGMA foreign_keys = ON;`, (err: any, result: any) => {\n                    ok();\n                });\n            });\n        });\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            if (!this.databaseConnection)\n                return fail(new ConnectionIsNotSetError(\"sqlite\"));\n            this.databaseConnection.connection.close(handler);\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection)\n            return Promise.reject(new ConnectionIsNotSetError(\"sqlite\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new SqliteQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            driver: this.sqlite,\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined\n        };\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (columnMetadata.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n                return JSON.parse(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const builtParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            } else {\n                builtParameters.push(value);\n            }\n            return \"$\" + builtParameters.length;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return \"\\\"\" + aliasName + \"\\\"\";\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return \"\\\"\" + tableName + \"\\\"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"sqlite\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\n        }\n    }\n\n}"],"sourceRoot":"../.."}