{"version":3,"sources":["../../src/driver/oracle/OracleQueryRunner.ts"],"names":[],"mappings":"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","file":"OracleQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../error/TransactionNotStartedError\";\nimport {Logger} from \"../../logger/Logger\";\nimport {OracleDriver} from \"./OracleDriver\";\nimport {DataTypeNotSupportedByDriverError} from \"../error/DataTypeNotSupportedByDriverError\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableSchema} from \"../../schema-builder/schema/TableSchema\";\nimport {ForeignKeySchema} from \"../../schema-builder/schema/ForeignKeySchema\";\nimport {PrimaryKeySchema} from \"../../schema-builder/schema/PrimaryKeySchema\";\nimport {IndexSchema} from \"../../schema-builder/schema/IndexSchema\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../query-runner/error/QueryRunnerAlreadyReleasedError\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\nimport {ColumnType} from \"../../metadata/types/ColumnTypes\";\n\n/**\n * Runs queries on a single mysql database connection.\n *\n * todo: this driver is not 100% finished yet, need to fix all issues that are left\n */\nexport class OracleQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    protected isReleased = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected databaseConnection: DatabaseConnection,\n                protected driver: OracleDriver,\n                protected logger: Logger) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Releases database connection. This is needed when using connection pooling.\n     * If connection is not from a pool, it should not be released.\n     * You cannot use this class's methods after its released.\n     */\n    release(): Promise<void> {\n        if (this.databaseConnection.releaseCallback) {\n            this.isReleased = true;\n            return this.databaseConnection.releaseCallback();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        await this.beginTransaction();\n        try {\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS ', table_name, ';') AS query FROM information_schema.tables WHERE table_schema = '${this.dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            await this.rollbackTransaction();\n            throw error;\n\n        } finally {\n            await this.release();\n        }\n\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async beginTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.databaseConnection.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        // await this.query(\"START TRANSACTION\");\n        this.databaseConnection.isTransactionActive = true;\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"COMMIT\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.databaseConnection.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        await this.query(\"ROLLBACK\");\n        this.databaseConnection.isTransactionActive = false;\n    }\n\n    /**\n     * Checks if transaction is in progress.\n     */\n    isTransactionActive(): boolean {\n        return this.databaseConnection.isTransactionActive;\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise((ok, fail) => {\n            this.logger.logQuery(query, parameters);\n            const handler = (err: any, result: any) => {\n                if (err) {\n                    this.logger.logFailedQuery(query, parameters);\n                    this.logger.logQueryError(err);\n                    return fail(err);\n                }\n\n                ok(result.rows || result.outBinds);\n            };\n            const executionOptions = {\n                autoCommit: this.databaseConnection.isTransactionActive ? false : true\n            };\n            this.databaseConnection.connection.execute(query, parameters || {}, executionOptions, handler);\n        });\n    }\n\n    /**\n     * Insert a new row with given values into given table.\n     */\n    async insert(tableName: string, keyValues: ObjectLiteral, generatedColumn?: ColumnMetadata): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => this.driver.escapeColumnName(key)).join(\", \");\n        const values = keys.map(key => \":\" + key).join(\", \");\n        const parameters = keys.map(key => keyValues[key]);\n\n        const insertSql = columns.length > 0\n            ? `INSERT INTO ${this.driver.escapeTableName(tableName)}(${columns}) VALUES (${values})`\n            : `INSERT INTO ${this.driver.escapeTableName(tableName)} DEFAULT VALUES`;\n        if (generatedColumn) {\n            const sql2 = `declare lastId number; begin ${insertSql} returning \"id\" into lastId; dbms_output.enable; dbms_output.put_line(lastId); dbms_output.get_line(:ln, :st); end;`;\n            const saveResult = await this.query(sql2, parameters.concat([\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.STRING, maxSize: 32767 },\n                { dir: this.driver.oracle.BIND_OUT, type: this.driver.oracle.NUMBER }\n            ]));\n            return parseInt(saveResult[0]);\n        } else {\n            return this.query(insertSql, parameters);\n        }\n    }\n\n    /**\n     * Updates rows that match given conditions in the given table.\n     */\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updateValues = this.parametrize(valuesMap).join(\", \");\n        const conditionString = this.parametrize(conditions).join(\" AND \");\n        const sql = `UPDATE ${this.driver.escapeTableName(tableName)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\n        const allParameters = updateParams.concat(conditionParams);\n        await this.query(sql, allParameters);\n    }\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral): Promise<void>;\n\n    /**\n     * Deletes from the given table by a given conditions.\n     */\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\n\n        const sql = `DELETE FROM ${this.driver.escapeTableName(tableName)} WHERE ${conditionString}`;\n        await this.query(sql, parameters);\n    }\n\n    /**\n     * Inserts rows into the closure table.\n     */\n    async insertIntoClosureTable(tableName: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let sql = \"\";\n        if (hasLevel) {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant, level) ` +\n                    `SELECT ancestor, ${newEntityId}, level + 1 FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\n        } else {\n            sql =   `INSERT INTO ${this.driver.escapeTableName(tableName)}(ancestor, descendant) ` +\n                    `SELECT ancestor, ${newEntityId} FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId} ` +\n                    `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\n        }\n        await this.query(sql);\n        const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.driver.escapeTableName(tableName)} WHERE descendant = ${parentId}`);\n        return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async loadTableSchema(tableName: string): Promise<TableSchema|undefined> {\n        const tableSchemas = await this.loadTableSchemas([tableName]);\n        return tableSchemas.length > 0 ? tableSchemas[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a TableSchema from them.\n     */\n    async loadTableSchemas(tableNames: string[]): Promise<TableSchema[]> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql      = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME IN (${tableNamesString})`;\n        const columnsSql     = `SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE, IDENTITY_COLUMN FROM all_tab_cols WHERE TABLE_NAME IN (${tableNamesString})`;\n        const indicesSql     = `SELECT * FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA = '${this.dbName}' AND INDEX_NAME != 'PRIMARY'`;\n        const foreignKeysSql = `SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '${this.dbName}' AND REFERENCED_COLUMN_NAME IS NOT NULL`;\n        const uniqueKeysSql  = `SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = '${this.dbName}' AND CONSTRAINT_TYPE = 'UNIQUE'`;\n        const constraintsSql = `SELECT cols.table_name, cols.column_name, cols.position, cons.constraint_type, cons.constraint_name\nFROM all_constraints cons, all_cons_columns cols WHERE cols.table_name IN (${tableNamesString}) \nAND cons.constraint_name = cols.constraint_name AND cons.owner = cols.owner ORDER BY cols.table_name, cols.position`;\n        const [dbTables, dbColumns, /*dbIndices, dbForeignKeys, dbUniqueKeys, */constraints]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            // this.query(indicesSql),\n            // this.query(foreignKeysSql),\n            // this.query(uniqueKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return dbTables.map(dbTable => {\n            const tableSchema = new TableSchema(dbTable[\"TABLE_NAME\"]);\n\n            // create column schemas from the loaded columns\n            tableSchema.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === tableSchema.name)\n                .map(dbColumn => {\n                    const isPrimary = !!constraints\n                        .find(constraint => {\n                            return  constraint[\"TABLE_NAME\"] === tableSchema.name &&\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\" &&\n                                    constraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                        });\n\n                    let columnType = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (dbColumn[\"DATA_TYPE\"].toLowerCase() === \"varchar2\" && dbColumn[\"DATA_LENGTH\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_LENGTH\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null && dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \",\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_SCALE\"] !== null) {\n                        columnType += \"(0,\" + dbColumn[\"DATA_SCALE\"] + \")\";\n                    } else if (dbColumn[\"DATA_PRECISION\"] !== null) {\n                        columnType += \"(\" + dbColumn[\"DATA_PRECISION\"] + \")\";\n                    }\n\n                    const columnSchema = new ColumnSchema();\n                    columnSchema.name = dbColumn[\"COLUMN_NAME\"];\n                    columnSchema.type = columnType;\n                    columnSchema.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\n                    columnSchema.isNullable = dbColumn[\"NULLABLE\"] !== \"N\";\n                    columnSchema.isPrimary = isPrimary;\n                    columnSchema.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"; // todo\n                    columnSchema.comment = \"\"; // todo\n                    return columnSchema;\n                });\n\n            // create primary key schema\n            tableSchema.primaryKeys = constraints\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"P\")\n                .map(constraint => new PrimaryKeySchema(constraint[\"CONSTRAINT_NAME\"], constraint[\"COLUMN_NAME\"]));\n\n            // create foreign key schemas from the loaded indices\n            tableSchema.foreignKeys = constraints\n                .filter(constraint => constraint[\"TABLE_NAME\"] === tableSchema.name && constraint[\"CONSTRAINT_TYPE\"] === \"R\")\n                .map(constraint => new ForeignKeySchema(constraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\n\n            // console.log(tableSchema);\n\n            // create index schemas from the loaded indices\n            // tableSchema.indices = dbIndices\n            //     .filter(dbIndex => {\n            //         return  dbIndex[\"table_name\"] === tableSchema.name &&\n            //             (!tableSchema.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\n            //             (!tableSchema.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\n            //     })\n            //     .map(dbIndex => dbIndex[\"INDEX_NAME\"])\n            //     .filter((value, index, self) => self.indexOf(value) === index) // unqiue\n            //     .map(dbIndexName => {\n            //         const columnNames = dbIndices\n            //             .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === tableSchema.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\n            //             .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\n            //\n            //         return new IndexSchema(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames, false /* todo: uniqueness */);\n            //     });\n\n            return tableSchema;\n        });\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableName: string): Promise<boolean> {\n        const sql = `SELECT TABLE_NAME FROM user_tables WHERE TABLE_NAME = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    async createTable(table: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryKeyColumns.length > 0)\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\n        sql += `)`;\n        await this.query(sql);\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableName: string, columnName: string): Promise<boolean> {\n        const sql = `SELECT COLUMN_NAME FROM all_tab_cols WHERE TABLE_NAME = '${tableName}' AND COLUMN_NAME = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableName: string, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Creates a new column from the column schema in the table.\n     */\n    async addColumn(tableSchemaOrName: TableSchema|string, column: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" ADD ${this.buildCreateColumnSql(column)}`;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableName: string, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Creates a new columns from the column schema in the table.\n     */\n    async addColumns(tableSchemaOrName: TableSchema|string, columns: ColumnSchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const queries = columns.map(column => this.addColumn(tableSchemaOrName as any, column));\n        await Promise.all(queries);\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumnSchemaOrName: ColumnSchema|string): Promise<void> {\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        let newColumn: ColumnSchema|undefined = undefined;\n        if (newColumnSchemaOrName instanceof ColumnSchema) {\n            newColumn = newColumnSchemaOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newColumnSchemaOrName;\n        }\n\n        return this.changeColumn(tableSchema, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: TableSchema, oldColumn: ColumnSchema, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(tableSchema: string, oldColumn: string, newColumn: ColumnSchema): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableSchemaOrName: TableSchema|string, oldColumnSchemaOrName: ColumnSchema|string, newColumn: ColumnSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let tableSchema: TableSchema|undefined = undefined;\n        if (tableSchemaOrName instanceof TableSchema) {\n            tableSchema = tableSchemaOrName;\n        } else {\n            tableSchema = await this.loadTableSchema(tableSchemaOrName);\n        }\n\n        if (!tableSchema)\n            throw new Error(`Table ${tableSchemaOrName} was not found.`);\n\n        let oldColumn: ColumnSchema|undefined = undefined;\n        if (oldColumnSchemaOrName instanceof ColumnSchema) {\n            oldColumn = oldColumnSchemaOrName;\n        } else {\n            oldColumn = tableSchema.columns.find(column => column.name === oldColumnSchemaOrName);\n        }\n\n        if (!oldColumn)\n            throw new Error(`Column \"${oldColumnSchemaOrName}\" was not found in the \"${tableSchemaOrName}\" table.`);\n\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\n\n            if (newColumn.isGenerated) {\n                if (tableSchema.primaryKeys.length > 0 && oldColumn.isPrimary) {\n                    // console.log(tableSchema.primaryKeys);\n                    const dropPrimarySql = `ALTER TABLE \"${tableSchema.name}\" DROP CONSTRAINT \"${tableSchema.primaryKeys[0].name}\"`;\n                    await this.query(dropPrimarySql);\n                }\n\n                // since modifying identity column is not supported yet, we need to recreate this column\n                const dropSql = `ALTER TABLE \"${tableSchema.name}\" DROP COLUMN \"${newColumn.name}\"`;\n                await this.query(dropSql);\n\n                const createSql = `ALTER TABLE \"${tableSchema.name}\" ADD ${this.buildCreateColumnSql(newColumn)}`;\n                await this.query(createSql);\n\n            } else {\n                const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" DROP IDENTITY`;\n                await this.query(sql);\n\n            }\n        }\n\n        if (newColumn.isNullable !== oldColumn.isNullable) {\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type} ${newColumn.isNullable ? \"NULL\" : \"NOT NULL\"}`;\n            await this.query(sql);\n\n        } else if (newColumn.type !== oldColumn.type) { // elseif is used because\n            const sql = `ALTER TABLE \"${tableSchema.name}\" MODIFY \"${newColumn.name}\" ${newColumn.type}`;\n            await this.query(sql);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableSchema: TableSchema, changedColumns: { newColumn: ColumnSchema, oldColumn: ColumnSchema }[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const updatePromises = changedColumns.map(async changedColumn => {\n            return this.changeColumn(tableSchema, changedColumn.oldColumn, changedColumn.newColumn);\n        });\n        await Promise.all(updatePromises);\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableName: string, columnName: string): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchema: TableSchema, column: ColumnSchema): Promise<void>;\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableSchemaOrName: TableSchema|string, columnSchemaOrName: ColumnSchema|string): Promise<void> {\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnName = columnSchemaOrName instanceof ColumnSchema ? columnSchemaOrName.name : columnSchemaOrName;\n        return this.query(`ALTER TABLE \"${tableName}\" DROP COLUMN \"${columnName}\"`);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableName: string, columnNames: string[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchema: TableSchema, columns: ColumnSchema[]): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableSchemaOrName: TableSchema|string, columnSchemasOrNames: ColumnSchema[]|string[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const dropPromises = (columnSchemasOrNames as any[]).map(column => this.dropColumn(tableSchemaOrName as any, column as any));\n        await Promise.all(dropPromises);\n    }\n\n    /**\n     * Updates table's primary keys.\n     */\n    async updatePrimaryKeys(dbTable: TableSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const primaryColumnNames = dbTable.primaryKeys.map(primaryKey => \"\\\"\" + primaryKey.columnName + \"\\\"\");\n        // console.log(dbTable.primaryKeys);\n        if (dbTable.primaryKeys.length > 0 && dbTable.primaryKeys[0].name)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" DROP CONSTRAINT \"${dbTable.primaryKeys[0].name}\"`);\n        if (primaryColumnNames.length > 0)\n            await this.query(`ALTER TABLE \"${dbTable.name}\" ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const columnNames = foreignKey.columnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => \"\\\"\" + column + \"\\\"\").join(\",\");\n        let sql = `ALTER TABLE \"${tableName}\" ADD CONSTRAINT \"${foreignKey.name}\" ` +\n            `FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\"(${referencedColumnNames})`;\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n        return this.query(sql);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableName: string, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchema: TableSchema, foreignKey: ForeignKeySchema): Promise<void>;\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableSchemaOrName: TableSchema|string, foreignKey: ForeignKeySchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const tableName = tableSchemaOrName instanceof TableSchema ? tableSchemaOrName.name : tableSchemaOrName;\n        const sql = `ALTER TABLE \"${tableName}\" DROP CONSTRAINT \"${foreignKey.name}\"`;\n        return this.query(sql);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableName: string, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchema: TableSchema, foreignKeys: ForeignKeySchema[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableSchemaOrName: TableSchema|string, foreignKeys: ForeignKeySchema[]): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableSchemaOrName as any, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableName: string, index: IndexSchema): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const columns = index.columnNames.map(columnName => \"\\\"\" + columnName + \"\\\"\").join(\", \");\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE\" : \"\"} INDEX \"${index.name}\" ON \"${tableName}\"(${columns})`;\n        await this.query(sql);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableName: string, indexName: string): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const sql = `ALTER TABLE \"${tableName}\" DROP INDEX \"${indexName}\"`;\n        await this.query(sql);\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(typeOptions: { type: ColumnType, length?: string|number, precision?: number, scale?: number, timezone?: boolean }) {\n        switch (typeOptions.type) {\n            case \"string\":\n                return \"varchar2(\" + (typeOptions.length ? typeOptions.length : 255) + \")\";\n            case \"text\":\n                return \"clob\";\n            case \"boolean\":\n                return \"number(1)\";\n            case \"integer\":\n            case \"int\":\n                // if (column.isGenerated)\n                //     return `number(22)`;\n                if (typeOptions.precision && typeOptions.scale)\n                    return `number(${typeOptions.precision},${typeOptions.scale})`;\n                if (typeOptions.precision)\n                    return `number(${typeOptions.precision},0)`;\n                if (typeOptions.scale)\n                    return `number(0,${typeOptions.scale})`;\n\n                return \"number(10,0)\";\n            case \"smallint\":\n                return \"number(5)\";\n            case \"bigint\":\n                return \"number(20)\";\n            case \"float\":\n                if (typeOptions.precision && typeOptions.scale)\n                    return `float(${typeOptions.precision},${typeOptions.scale})`;\n                if (typeOptions.precision)\n                    return `float(${typeOptions.precision},0)`;\n                if (typeOptions.scale)\n                    return `float(0,${typeOptions.scale})`;\n\n                return `float(126)`;\n            case \"double\":\n            case \"number\":\n                return \"float(126)\";\n            case \"decimal\":\n                if (typeOptions.precision && typeOptions.scale) {\n                    return `decimal(${typeOptions.precision},${typeOptions.scale})`;\n\n                } else if (typeOptions.scale) {\n                    return `decimal(0,${typeOptions.scale})`;\n\n                } else if (typeOptions.precision) {\n                    return `decimal(${typeOptions.precision})`;\n\n                } else {\n                    return \"decimal\";\n                }\n            case \"date\":\n                return \"date\";\n            case \"time\":\n                return \"date\";\n            case \"datetime\":\n                return \"timestamp(0)\";\n            case \"json\":\n                return \"clob\";\n            case \"simple_array\":\n                return typeOptions.length ? \"varchar2(\" + typeOptions.length + \")\" : \"text\";\n        }\n\n        throw new DataTypeNotSupportedByDriverError(typeOptions.type, \"Oracle\");\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database schema are equal.\n     */\n    compareDefaultValues(columnMetadataValue: any, databaseValue: any): boolean {\n\n        if (typeof columnMetadataValue === \"number\")\n            return columnMetadataValue === parseInt(databaseValue);\n        if (typeof columnMetadataValue === \"boolean\")\n            return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        if (typeof columnMetadataValue === \"function\")\n            return columnMetadataValue() === databaseValue;\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * Truncates table.\n     */\n    async truncate(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.driver.escapeTableName(tableName)}`);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name shortcut.\n     */\n    protected get dbName(): string {\n        return this.driver.options.database as string;\n    }\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map(key => this.driver.escapeColumnName(key) + \"=:\" + key);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: ColumnSchema) {\n        let c = `\"${column.name}\" ` + column.type;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        // if (column.isPrimary === true && addPrimary)\n        //     c += \" PRIMARY KEY\";\n        if (column.isGenerated === true) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" GENERATED BY DEFAULT ON NULL AS IDENTITY\";\n        // if (column.comment) // todo: less priority, fix it later\n        //     c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\n            if (typeof column.default === \"number\") {\n                c += \" DEFAULT \" + column.default + \"\";\n            } else if (typeof column.default === \"boolean\") {\n                c += \" DEFAULT \" + (column.default === true ? \"TRUE\" : \"FALSE\") + \"\";\n            } else if (typeof column.default === \"function\") {\n                c += \" DEFAULT \" + column.default() + \"\";\n            } else if (typeof column.default === \"string\") {\n                c += \" DEFAULT '\" + column.default + \"'\";\n            } else {\n                c += \" DEFAULT \" + column.default + \"\";\n            }\n        }\n\n        return c;\n    }\n\n\n}"],"sourceRoot":"../.."}