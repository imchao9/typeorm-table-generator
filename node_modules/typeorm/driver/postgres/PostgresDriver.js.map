{"version":3,"sources":["../../src/driver/postgres/PostgresDriver.ts"],"names":[],"mappings":"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","file":"PostgresDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../error/ConnectionIsNotSetError\";\nimport {DriverOptions} from \"../DriverOptions\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {DatabaseConnection} from \"../DatabaseConnection\";\nimport {DriverPackageNotInstalledError} from \"../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {ColumnTypes} from \"../../metadata/types/ColumnTypes\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {Logger} from \"../../logger/Logger\";\nimport {PostgresQueryRunner} from \"./PostgresQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {DriverOptionNotSetError} from \"../error/DriverOptionNotSetError\";\nimport {DataTransformationUtils} from \"../../util/DataTransformationUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {NamingStrategyInterface} from \"../../naming-strategy/NamingStrategyInterface\";\n\n// todo(tests):\n// check connection with url\n// check if any of required option is not set exception to be thrown\n//\n\n/**\n * Organizes communication with PostgreSQL DBMS.\n */\nexport class PostgresDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Naming strategy used in the connection where this driver is used.\n     */\n    namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Driver connection options.\n     */\n    readonly options: DriverOptions;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Postgres library.\n     */\n    protected postgres: any;\n\n    /**\n     * Connection to postgres database.\n     */\n    protected databaseConnection: DatabaseConnection|undefined;\n\n    /**\n     * Postgres pool.\n     */\n    protected pool: any;\n\n    /**\n     * Pool of database connections.\n     */\n    protected databaseConnectionPool: DatabaseConnection[] = [];\n\n    /**\n     * Logger used go log queries and errors.\n     */\n    protected logger: Logger;\n\n    /**\n     * Schema name. (Only used in Postgres)\n     * default: \"public\"\n     */\n    public schemaName?: string;\n    \n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOptions: DriverOptions, logger: Logger, postgres?: any) {\n\n        this.options = DriverUtils.buildDriverOptions(connectionOptions);\n        this.logger = logger;\n        this.postgres = postgres;\n        this.schemaName = connectionOptions.schemaName || \"public\";\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // if postgres package instance was not set explicitly then try to load it\n        if (!postgres)\n            this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            host: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        if (this.options.usePool === undefined || this.options.usePool === true) {\n            this.pool = new this.postgres.Pool(options);\n            return Promise.resolve();\n\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection = {\n                    id: 1,\n                    connection: new this.postgres.Client(options),\n                    isTransactionActive: false\n                };\n                this.databaseConnection.connection.connect((err: any) => {\n                    if (err) {\n                        fail(err);\n                    } else {\n                        this.databaseConnection && this.databaseConnection.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any, result: any) => {\n                            if (err) {\n                                this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\n                                this.logger.logQueryError(err);\n                                fail(err);\n                            } else {\n                                ok();\n                            }\n                        });\n                    }\n                });\n            });\n        }\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    disconnect(): Promise<void> {\n        if (!this.databaseConnection && !this.pool)\n            throw new ConnectionIsNotSetError(\"postgres\");\n\n        return new Promise<void>((ok, fail) => {\n            const handler = (err: any) => err ? fail(err) : ok();\n\n            if (this.databaseConnection) {\n                this.databaseConnection.connection.end(/*handler*/); // todo: check if it can emit errors\n                this.databaseConnection = undefined;\n            }\n\n            if (this.pool) {\n                this.databaseConnectionPool.forEach(dbConnection => {\n                    if (dbConnection && dbConnection.releaseCallback) {\n                        dbConnection.releaseCallback();\n                    }\n                });\n                this.pool.end(handler);\n                this.pool = undefined;\n                this.databaseConnectionPool = [];\n            }\n\n            ok();\n        });\n    }\n\n    /**\n     * Creates a query runner used for common queries.\n     */\n    async createQueryRunner(): Promise<QueryRunner> {\n        if (!this.databaseConnection && !this.pool)\n            return Promise.reject(new ConnectionIsNotSetError(\"postgres\"));\n\n        const databaseConnection = await this.retrieveDatabaseConnection();\n        return new PostgresQueryRunner(databaseConnection, this, this.logger);\n    }\n\n    /**\n     * Access to the native implementation of the database.\n     */\n    nativeInterface() {\n        return {\n            driver: this.postgres,\n            connection: this.databaseConnection ? this.databaseConnection.connection : undefined,\n            pool: this.pool\n        };\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, column: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return null;\n\n        switch (column.type) {\n            case ColumnTypes.BOOLEAN:\n                return value === true ? 1 : 0;\n\n            case ColumnTypes.DATE:\n                return DataTransformationUtils.mixedDateToDateString(value);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedDateToTimeString(value);\n\n            case ColumnTypes.DATETIME:\n                if (column.localTimezone) {\n                    return DataTransformationUtils.mixedDateToDatetimeString(value);\n                } else {\n                    return DataTransformationUtils.mixedDateToUtcDatetimeString(value);\n                }\n\n            case ColumnTypes.JSON:\n            case ColumnTypes.JSONB:\n                return JSON.stringify(value);\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        switch (columnMetadata.type) {\n            case ColumnTypes.BOOLEAN:\n                return value ? true : false;\n\n            case ColumnTypes.DATETIME:\n                return DataTransformationUtils.normalizeHydratedDate(value, columnMetadata.localTimezone === true);\n\n            case ColumnTypes.TIME:\n                return DataTransformationUtils.mixedTimeToString(value);\n\n            case ColumnTypes.JSON:\n            case ColumnTypes.JSONB:\n                // pg(pg-types) have done JSON.parse conversion\n                // https://github.com/brianc/node-pg-types/blob/ed2d0e36e33217b34530727a98d20b325389e73a/lib/textParsers.js#L170\n                return value;\n\n            case ColumnTypes.SIMPLE_ARRAY:\n                return DataTransformationUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n\n        const builtParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            } else {\n                builtParameters.push(value);\n            }\n            return \"$\" + builtParameters.length;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escapeColumnName(columnName: string): string {\n        return \"\\\"\" + columnName + \"\\\"\";\n    }\n\n    /**\n     * Escapes an alias.\n     */\n    escapeAliasName(aliasName: string): string {\n        return \"\\\"\" + aliasName + \"\\\"\";\n    }\n\n    /**\n     * Escapes a table name.\n     */\n    escapeTableName(tableName: string): string {\n        return \"\\\"\" + tableName + \"\\\"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Retrieves a new database connection.\n     * If pooling is enabled then connection from the pool will be retrieved.\n     * Otherwise active connection will be returned.\n     */\n    protected retrieveDatabaseConnection(): Promise<DatabaseConnection> {\n        if (this.pool) {\n            return new Promise((ok, fail) => {\n                this.pool.connect((err: any, connection: any, release: Function) => {\n                    if (err) {\n                        fail(err);\n                        return;\n                    }\n\n                    let dbConnection = this.databaseConnectionPool.find(dbConnection => dbConnection.connection === connection);\n                    if (!dbConnection) {\n                        dbConnection = {\n                            id: this.databaseConnectionPool.length,\n                            connection: connection,\n                            isTransactionActive: false\n                        };\n                        this.databaseConnectionPool.push(dbConnection);\n                    }\n                    dbConnection.releaseCallback = () => {\n                        if (dbConnection) {\n                            this.databaseConnectionPool.splice(this.databaseConnectionPool.indexOf(dbConnection), 1);\n                        }\n                        release();\n                        return Promise.resolve();\n                    };\n                    dbConnection.connection.query(`SET search_path TO '${this.schemaName}', 'public';`, (err: any) => {\n                        if (err) {\n                            this.logger.logFailedQuery(`SET search_path TO '${this.schemaName}', 'public';`);\n                            this.logger.logQueryError(err);\n                            fail(err);\n                        } else {\n                            ok(dbConnection);\n                        }\n                    });\n                });\n            });\n        }\n\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        throw new ConnectionIsNotSetError(\"postgres\");\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.postgres = PlatformTools.load(\"pg\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    }\n\n}"],"sourceRoot":"../.."}